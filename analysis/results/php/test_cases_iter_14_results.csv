Test Case Weakness,Test Case File,Test Case Code,Test Case Line,LLM Hit CWE,LLM Hit Code,LLM Code,LLM Complete Response
CWE-91,src/CWE_91__object-Array__no_sanitizing__username-sprintf_%s_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();



$query = sprintf(""user[username='%s']"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$query = sprintf(""user[username='%s']"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""user[username='%s']"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code constructs an XPath query using user-supplied data without proper sanitization, leading to XML injection vulnerability. An attacker can manipulate the query to extract or modify data in the XML file.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code does not check the return value of simplexml_load_file(). If the file fails to load (e.g., due to file not found or invalid XML), $xml will be false and dereferencing it will lead to an error.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-611</Weakness>
    <Description>Improper Restriction of XML External Entity Reference ('XXE')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$xml = simplexml_load_file(""users.xml"");</Code>
    <Justification>The `simplexml_load_file` function, by default, may be vulnerable to XML External Entity (XXE) injection if the ""users.xml"" file contains external entity references. This could allow an attacker to read arbitrary files from the server or conduct other attacks.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__object-classicGet__no_sanitizing__multiple_select-concatenation.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input;
  }

  public  function __construct(){
   $this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();



$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent="". $tainted . "")"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,$this->input = $_GET['UserData'] ;,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$this->input = $_GET['UserData'] ;</Code>
    <Justification>The code retrieves user input from $_GET['UserData'] without any sanitization or validation. This unsanitized input is then directly concatenated into an SQL query. This makes the application vulnerable to SQL injection attacks.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent="". $tainted . "")"";</Code>
    <Justification>The code builds an SQL query by directly concatenating the `$tainted` variable, which contains unsanitized user input. This allows an attacker to inject malicious SQL code, potentially compromising the database.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res = mysql_query($query);</Code>
    <Justification>The code uses the `mysql_connect` and `mysql_query` functions, which are deprecated. Using deprecated functions can introduce security vulnerabilities and compatibility issues.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__shell_exec__func_preg_replace__name-interpretation_simple_quote.php,"<?php







$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = preg_replace('/\'/', '', $tainted);

$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = preg_replace('/\'/', '', $tainted);

$query = ""name=' $tainted '"";

$sr=ldap_search($ds,""o=My Company, c=US"", $query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute a command based on external input (the file /tmp/tainted.txt).  If an attacker can control the contents of this file, they can inject arbitrary commands to be executed on the server.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = preg_replace('/\'/', '', $tainted);

$query = ""name=' $tainted '"";

$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code constructs an LDAP query by concatenating user-provided data directly into the query string. Even after attempting to sanitize the input with `preg_replace`, the code is still vulnerable to LDAP injection attacks.  An attacker can manipulate the input to bypass the sanitization and inject malicious LDAP syntax.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-directGet__no_sanitizing__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object
sanitize : none
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();




echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",True,True,"echo ""window.setInterval('"". $tainted .""');""","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""window.setInterval('"". $tainted .""');""</Code>
    <Justification>The code uses unsanitized user input from $_GET['UserData'] directly within the setInterval function. This allows an attacker to inject arbitrary JavaScript code, leading to a Cross-Site Scripting (XSS) vulnerability.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__unserialize__no_sanitizing__userByMail-sprintf_%s_simple_quote.php,"<?php







$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    



$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,False,"$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses unserialize() on user-provided data ($_POST['UserData']). This is dangerous because unserialize() can be exploited to achieve arbitrary code execution. An attacker can craft a malicious serialized object that, when unserialized, will execute arbitrary code on the server.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);</Code>
    <Justification>The code uses sprintf() to construct an LDAP query using data from unserialize(), which is derived from user input, without proper sanitization. This can lead to LDAP injection vulnerabilities. An attacker can inject malicious LDAP code by crafting the serialized object in $_POST['UserData'] to manipulate the query and potentially gain unauthorized access to sensitive information or modify the LDAP directory.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__object-Array__func_FILTER-CLEANING-email_filter__data-sprintf_%s_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = sprintf(""'%s'"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code uses user-controlled data ($query) in an XPath query without proper neutralization, leading to potential XML injection vulnerabilities. An attacker could manipulate the XPath query to extract sensitive information or cause denial of service.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-643</Weakness>
    <Description>Improper Neutralization of Data within XPath Expressions ('XPath Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code constructs an XPath expression using external input ($query) without proper neutralization. This allows an attacker to control the structure of the query and potentially access unauthorized data or perform malicious actions.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-22</Weakness>
    <Description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$xml = simplexml_load_file(""users.xml"");</Code>
    <Justification>The code uses a hardcoded filename ""users.xml"" without proper validation or sanitization, which can lead to path traversal vulnerabilities if the application logic allows for modification of the filename through external input or configuration.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$xml = simplexml_load_file(""users.xml"");</Code>
    <Justification>The code does not check the return value of simplexml_load_file(). If the file does not exist or is malformed, this function will return false, and the subsequent call to xpath() will result in an error.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__object-classicGet__func_htmlentities__userByCN-interpretation_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input;
  }

  public  function __construct(){
   $this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = ""(&(objectCategory=person)(objectClass=user)(cn=' $tainted '))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,False,"$query = ""(&(objectCategory=person)(objectClass=user)(cn=' $tainted '))"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""(&(objectCategory=person)(objectClass=user)(cn=' $tainted '))"";</Code>
    <Justification>The code constructs an LDAP query by embedding user-controlled input ($tainted) directly into the query string. Even with htmlentities, this can lead to LDAP injection vulnerabilities. Special characters in the user input can be used to modify the query logic, potentially allowing an attacker to bypass authentication or access sensitive information.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);</Code>
    <Justification>The code uses ldap_bind without specifying any username and password. This can be considered as using anonymous bind if the LDAP server allows it. However, in many cases, proper authentication is required. It's a security risk to rely on default or missing authentication mechanisms, especially when accessing sensitive directory information.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__exec__func_FILTER-CLEANING-full_special_chars_filter__username_at-interpretation_simple_quote.php,"<?php







$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     

$query = ""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     

$query = ""","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];</Code>
    <Justification>The code executes an external script where the filename is hardcoded. However, the script itself may contain vulnerabilities or execute arbitrary commands based on external input, leading to potential command injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     

$query = ""</Code>
    <Justification>The code attempts to sanitize the input, but the FILTER_SANITIZE_FULL_SPECIAL_CHARS filter is insufficient to prevent XPath injection, as it does not neutralize all characters that are special to XPath. The query is then used in simplexml_load_file, which is vulnerable to XML injection. This allows an attacker to control the structure of the query and potentially extract sensitive data.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__exec__func_htmlspecialchars__not_name-sprintf_%s_simple_quote.php,"<?php







$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>exec($script, $result, $return);</Code>
    <Justification>The code uses the `exec` function with a hardcoded script path. If the script `/tmp/tainted.php` is controllable by an attacker, they could inject arbitrary commands to be executed on the server. This is a command injection vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query using `sprintf` and a variable `$tainted` which is derived from the output of a script (which is potentially attacker-controlled) and sanitized using `htmlspecialchars`. However, `htmlspecialchars` is insufficient to prevent LDAP injection. An attacker could still inject malicious LDAP syntax into the query via the `$tainted` variable, potentially allowing them to bypass authentication, extract sensitive data, or modify directory entries.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__system__func_urlencode__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : execute a ls command using the function system, and put the last result in $tainted
SANITIZE : use of urlencode
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$tainted = system('ls', $retval);

$tainted = urlencode($tainted);


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",True,True,"echo ""window.setInterval('"". $tainted .""');""","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code uses the `system()` function to execute an OS command. While the example uses 'ls', in a real-world scenario, this could be any command, and if the input to `system()` is derived from an external source, it becomes vulnerable to command injection. Even though the output of the command is sanitized with urlencode, the initial command execution itself is unsafe.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-99</Weakness>
    <Description>Improper Control of Resource Identifiers (‘Resource injection’)</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""window.setInterval('"". $tainted .""');""</Code>
    <Justification>The code uses the output of the system command, after being urlencoded, as an argument to `setInterval` function. While `urlencode` attempts to sanitize the data, it's still possible for malicious code to be injected that could be executed within the browser context, leading to XSS or other client-side vulnerabilities. Encoding is not sufficient to neutralize all possible threats in this scenario.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""window.setInterval('"". $tainted .""');""</Code>
    <Justification>The output of the system command, even after urlencoding, is embedded directly into the Javascript code as a string. This can lead to Cross-Site Scripting (XSS) vulnerability if the output contains malicious JavaScript code.  The urlencode function does not prevent all forms of XSS.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__fopen__ternary_white_list__Use_untrusted_data_script-side_DoubleQuoted_Expr.php,"<!-- 
Unsafe sample
input : use fopen to read /tmp/tainted.txt and put the first line in $tainted
sanitize : use of ternary condition
File : use of untrusted data in one side of a double quoted expression in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo ""x=\"""". $tainted.""\"""" ;
?>
</script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""x=\"""". $tainted.""\"""" ;",True,True,"echo ""x=\"""". $tainted.""\"""" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""x=\"""". $tainted.""\"""" ;</Code>
    <Justification>The code echoes user-controlled input ($tainted) directly into the JavaScript code without proper neutralization. While a ternary operator is used, it only checks for 'safe1' and defaults to 'safe2', which doesn't prevent XSS if the input is different from these two values. This can lead to cross-site scripting (XSS) vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }</Code>
    <Justification>The code checks if fgets returns false, but it doesn't handle other potential errors or scenarios where fgets might not read the entire line as expected. This could lead to unexpected behavior if fgets encounters an error other than simply reaching the end of the file.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }</Code>
    <Justification>While not strictly obsolete, fgets has known limitations (e.g., null byte handling) and safer alternatives might exist depending on the specific use case. Using fgets without considering these potential issues could be a sign of outdated code or lack of awareness of better practices.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-703</Weakness>
    <Description>Improper Check or Handling of Exceptional Conditions</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}</Code>
    <Justification>The code checks if fopen was successful, but it doesn't handle potential errors during fclose. If fclose fails, it could lead to resource leaks or other unexpected behavior. While less critical in simple scripts, it's good practice to handle potential errors during file operations.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__fopen__func_FILTER-VALIDATION-email_filter__Use_untrusted_data_propertyValue_CSS-double_Quoted_Property_Value.php,"<!-- 
Unsafe sample
input : use fopen to read /tmp/tainted.txt and put the first line in $tainted
Flushes content of $sanitized if the filter email_filter is not applied
File : use of untrusted data in a double quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\"""". $tainted .""\"" ; }"" ;",True,True,"echo ""body { color :\"""". $tainted .""\"" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\"""". $tainted .""\"" ; }"" ;</Code>
    <Justification>The code echoes user-controlled input ($tainted) directly into the CSS style attribute within double quotes, without proper sanitization. This can lead to CSS injection vulnerabilities, where an attacker can inject malicious CSS code to modify the appearance or behavior of the webpage.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }</Code>
    <Justification>The code uses the return value of fgets() to determine if the read was successful. However, it does not differentiate between an actual read error (fgets returns FALSE) and reaching the end of the file or an empty line (fgets returns an empty string). Treating both scenarios the same way might lead to incorrect program behavior if a read error occurs.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-424</Weakness>
    <Description>Improper Protection of Alternate Path</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The code attempts to sanitize the input by validating it as an email. However, if the validation fails, it simply sets $tainted to an empty string. This could be considered an alternate path where the input is not properly sanitized, and an attacker might find ways to bypass the email validation or inject malicious code even with an empty string.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-703</Weakness>
    <Description>Improper Check or Handling of Exceptional Conditions</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}</Code>
    <Justification>The code uses the `@` operator to suppress errors when opening the file. While it checks if the file handle is valid, suppressing the error prevents the program from handling potential file opening issues (e.g., file not found, permission denied) in a more informative way. This can make debugging and error recovery more difficult.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__object-Array__func_FILTER-VALIDATION-email_filter__username-concatenation_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""user[username='"". $tainted . ""']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-643</Weakness>
    <Description>Improper Neutralization of Data within XPath Expressions ('XPath Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""user[username='"". $tainted . ""']"";


$xml = simplexml_load_file(""users.xml"");</Code>
    <Justification>The code constructs an XPath query by directly concatenating user-controlled input ($tainted) without proper neutralization. This allows an attacker to inject malicious XPath expressions, potentially leading to unauthorized data access or modification.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$xml = simplexml_load_file(""users.xml"");</Code>
    <Justification>The code does not check the return value of simplexml_load_file(). If the file does not exist or is not a valid XML, it returns false, and the subsequent xpath query will cause an error.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""&lt;br /&gt;"" ;</Code>
    <Justification>The script outputs the XPath query and the results of the query directly to the web page. If the $query variable contains malicious JavaScript, it will be executed in the user's browser.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-457</Weakness>
    <Description>Use of uninitialized variable</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The variable $sanitized is used in the if statement without being initialized. If the filter_var function is used before $sanitized has been initialized, the if statement will cause an error.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-119</Weakness>
    <Description>Improper Restriction of Operations within the Bounds of a Memory Buffer</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code> public function getInput(){
    return $this->input[1];
  }</Code>
    <Justification>If the $input array does not have an index of 1, then the code will throw an error. It does not have an index of 1 if $_GET['UserData'] is not set.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__shell_exec__func_preg_replace__Unsafe_use_untrusted_data-style.php,"<!-- 
Unsafe sample
input : use shell_exec to cat /tmp/tainted.txt
SANITIZE : use of preg_replace
File : unsafe, use of untrusted data in CSS
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = preg_replace('/\'/', '', $tainted);


echo $tainted ;
?>
</style>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"$tainted = preg_replace('/\'/', '', $tainted);


echo $tainted ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute a command. If the content of '/tmp/tainted.txt' is controlled by an attacker, they could inject arbitrary commands into the shell, leading to command injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>
$tainted = preg_replace('/\'/', '', $tainted);


echo $tainted ;
</Code>
    <Justification>The code sanitizes the tainted data by removing single quotes, but it doesn't neutralize other special characters that could be used for cross-site scripting (XSS) attacks when the data is echoed directly into the HTML style section. The preg_replace only removes single quotes but doesn't sanitize for other potentially malicious characters usable in CSS context.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__POST__func_FILTER-VALIDATION-email_filter__username_at-interpretation_simple_quote.php,"<?php







$tainted = $_POST['UserData'];

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$tainted = $_POST['UserData'];

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_POST['UserData'];

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""</Code>
    <Justification>The code takes user input from $_POST['UserData'] and uses it in an XPath query without proper sanitization. Even though there is an email validation, the validated input is not used in the query. An attacker can inject malicious XPath expressions to extract or manipulate data from the XML file.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The code uses `filter_var` with `FILTER_VALIDATE_EMAIL`, but it doesn't check the return value for errors. Although less likely to cause a critical issue, failing to handle potential errors from filter_var can lead to unexpected behavior if the filter fails in some unusual circumstances.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-Array__func_mysql_real_escape_string__Unsafe_use_untrusted_data-tag_Name.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object, which store it in a array
SANITIZE : use of mysql_real_escape string
File : unsafe, use of untrusted data in an tag name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = mysql_real_escape_string($tainted);


echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;",True,True,"$tainted = mysql_real_escape_string($tainted);


echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = mysql_real_escape_string($tainted);


echo ""&lt;"".  $tainted ."" href= \""/bob\"" /&gt;"" ;</Code>
    <Justification>The code sanitizes the input with mysql_real_escape_string, but this function is intended to prevent SQL Injection, not Cross-Site Scripting. The tainted data is used as an HTML tag name. An attacker could inject arbitrary HTML/JavaScript code by providing a crafted input (e.g., `img src=x onerror=alert(1)`) which could lead to XSS.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$tainted = mysql_real_escape_string($tainted);</Code>
    <Justification>The code uses the function `mysql_real_escape_string`, which is deprecated. Using deprecated functions can introduce security vulnerabilities as they might not be actively maintained and may have known security flaws.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__unserialize__func_FILTER-CLEANING-number_int_filter__Unsafe_use_untrusted_data-comment.php,"<!-- 
Unsafe sample
input : Get a serialize string in POST and unserialize it
Uses a number_int_filter via filter_var function
File : unsafe, use of untrusted data in a comment
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<!--
<?php
$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$sanitized = filter_var($tainted, FILTER_SANITIZE_NUMBER_INT);
if (filter_var($sanitized, FILTER_VALIDATE_INT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo $tainted ;
?>
-->
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,echo $tainted ;,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses unserialize() on user-supplied data ($_POST['UserData']), which can lead to arbitrary code execution if the serialized data is maliciously crafted.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo $tainted ;</Code>
    <Justification>The code directly outputs the variable $tainted to the HTML page without proper sanitization. Although a number_int_filter is applied, if the validation fails, an empty string is assigned to $tainted; however, if validation passes, any integer can be printed on screen. This could allow an attacker to inject arbitrary HTML or script if the input is not strictly controlled or further sanitized.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-778</Weakness>
    <Description>Insufficient Logging</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$sanitized = filter_var($tainted, FILTER_SANITIZE_NUMBER_INT);
if (filter_var($sanitized, FILTER_VALIDATE_INT))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The code sanitizes and validates the input, but there is no logging of invalid input attempts. This makes it harder to detect and respond to potential attacks.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__popen__func_FILTER-CLEANING-email_filter__Unsafe_use_untrusted_data-tag_Name.php,"<!-- 
Unsafe sample
input : Uses popen to read the file /tmp/tainted.txt using cat command
Uses an email_filter via filter_var function
File : unsafe, use of untrusted data in an tag name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;",True,True,"echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;"".  $tainted ."" href= \""/bob\"" />"" ;</Code>
    <Justification>The code uses external input ($tainted) to construct an HTML tag name without proper neutralization, leading to a cross-site scripting (XSS) vulnerability. Even though the input is sanitized with FILTER_SANITIZE_EMAIL and validated with FILTER_VALIDATE_EMAIL, it is still possible to inject arbitrary HTML attributes or even other HTML tags.  The email filter is intended to sanitize email addresses, not general strings that will be used as tag names.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');</Code>
    <Justification>The code uses popen to execute a command to read a file. If the filename `/tmp/tainted.txt` is controllable by an attacker, it's possible to inject arbitrary commands. Even if not directly controllable, if the file contents are attacker-controlled, it could still lead to issues. While `cat` itself isn't inherently dangerous, the lack of input validation on the filename represents a command injection risk.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The code does not check the return value of `popen()`, `fread()`, and `pclose()`. If any of these functions fail, the program may continue execution with an invalid handle or corrupted data, leading to unpredictable behavior or a crash.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__proc_open__func_addslashes__userByMail-concatenation_simple_quote.php,"<?php







$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}

$tainted = addslashes($tainted);

$query = ""(&(objectCategory=person)(objectClass=user)(mail='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = addslashes($tainted);

$query = ""(&(objectCategory=person)(objectClass=user)(mail='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost"");","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = addslashes($tainted);

$query = ""(&(objectCategory=person)(objectClass=user)(mail='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost"");</Code>
    <Justification>The code constructs an LDAP query by directly embedding the $tainted variable, which is derived from a file and sanitized using addslashes(). However, addslashes is insufficient to prevent LDAP injection. An attacker can manipulate the file content in tainted.txt to inject arbitrary LDAP code, potentially bypassing authentication or gaining unauthorized access to information.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind, and ldap_search. If any of these functions fail, the subsequent operations might be performed on an invalid resource or with incorrect parameters, leading to unexpected behavior or vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-22</Weakness>
    <Description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);</Code>
    <Justification>The code directly reads from the file `/tmp/tainted.txt`. While the path is hardcoded, there's no validation on the content of `tainted.txt`, which is later used in an LDAP query.  If an attacker can control the content of `/tmp/tainted.txt` (e.g., through another vulnerability), they can influence the LDAP query.  Although it's not a direct path traversal in this code, the file read operation introduces an external input that isn't validated, contributing to a potential vulnerability.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__array-GET__func_preg_replace__not_name-sprintf_%s_simple_quote.php,"<?php







$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;

$tainted = preg_replace('/\'/', '', $tainted);

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $array[1] ;

$tainted = preg_replace('/\'/', '', $tainted);

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $array[1] ;

$tainted = preg_replace('/\'/', '', $tainted);

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code is vulnerable to LDAP injection. The $tainted variable, derived from user input ($_GET['userData']), is used to construct an LDAP query. Although the code attempts to sanitize the input by removing single quotes, this is insufficient to prevent injection attacks. An attacker could still inject arbitrary LDAP code, potentially bypassing authentication or accessing sensitive information. The use of sprintf to construct the query exacerbates the risk because it creates a direct path for user-controlled data to influence the LDAP query structure. The ldap_search function then executes this potentially malicious query, posing a significant security risk.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__GET__func_addslashes__Use_untrusted_data_propertyValue_CSS-quoted_Property_Value.php,"<!-- 
Unsafe sample
input : reads the field UserData from the variable $_GET
sanitize : use of the function addslashes
File : unsafe, use of untrusted data in a quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = $_GET['UserData'];

$tainted = addslashes($tainted);


echo ""body { color :\'"". $tainted .""\' ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\'"". $tainted .""\' ; }"" ;",True,True,"<style>
<?php
$tainted = $_GET['UserData'];

$tainted = addslashes($tainted);


echo ""body { color :\'"". $tainted .""\' ; }"" ;
?>
</style>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>&lt;style&gt;
&lt;?php
$tainted = $_GET['UserData'];

$tainted = addslashes($tainted);


echo ""body { color :\'"". $tainted .""\' ; }"" ;
?&gt;
&lt;/style&gt;</Code>
    <Justification>The code uses user-supplied input from $_GET['UserData'] to construct CSS styles. While addslashes() is used, it is insufficient to prevent XSS because it only escapes certain characters, not all characters that could be used to inject malicious CSS or break out of the CSS context.  An attacker could inject arbitrary CSS or HTML by manipulating the UserData parameter.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__fopen__func_mysql_real_escape_string__multiple_select-concatenation.php,"<?php







$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent="". $tainted . "")"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,True,"$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent="". $tainted . "")"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent="". $tainted . "")"";</Code>
    <Justification>Even after using mysql_real_escape_string, the code is still vulnerable to SQL injection.  While mysql_real_escape_string escapes special characters, it is insufficient to prevent all forms of SQL injection, especially when used in conjunction with subqueries.  The $tainted variable is directly concatenated into the SQL query string, allowing an attacker to potentially inject malicious SQL code, even if escaped.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""&lt;br /&gt;"" ;
} 
mysql_close($conn);</Code>
    <Justification>The code uses the `mysql_*` functions, which are deprecated. Using deprecated functions can lead to security vulnerabilities and compatibility issues as they are no longer maintained or updated with security patches. It is recommended to use `mysqli_*` or PDO instead.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}</Code>
    <Justification>The code does not check the return value of `fopen`. If `fopen` fails, `$handle` will be false and the subsequent code will throw an error. This can lead to unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;

$res = mysql_query($query); </Code>
    <Justification>The code does not check the return values of `mysql_connect` and `mysql_query`. If these functions fail, they will return `false`, and the subsequent code will throw an error. This can lead to unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-391</Weakness>
    <Description>Unchecked Error Condition</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""&lt;br /&gt;"" ;
} 
mysql_close($conn);</Code>
    <Justification>The code does not check if mysql_fetch_array returns a valid array or false. If the query fails or returns no rows, mysql_fetch_array will return false, and the code will attempt to print a boolean, which might cause unexpected behavior or warnings.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""&lt;br /&gt;"" ;
} 
mysql_close($conn);</Code>
    <Justification>The code does not check the return value of `mysql_close`. If `mysql_close` fails, it might not properly close the connection, which could lead to resource leaks.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); </Code>
    <Justification>The code uses hard-coded credentials (`mysql_user`, `mysql_password`) for the MySQL connection. Hard-coding credentials directly in the source code is a major security risk, as it makes them easily accessible to attackers. These credentials should be stored securely, such as in environment variables or a configuration file, and accessed through appropriate mechanisms.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-indexArray__func_htmlspecialchars__Use_untrusted_data_propertyValue_CSS-property_Value.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object, which store it in a array
sanitize : use of the function htmlspecialchars. Sanitizes the query but has a high chance to produce unexpected results
File : use of untrusted data in a property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input['realOne'];
  }

  public  function __construct(){
    $this->input = array();
    $this->input['test']= 'safe' ;
    $this->input['realOne']= $_GET['UserData'] ;
    $this->input['trap']= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = htmlspecialchars($tainted, ENT_QUOTES);


echo ""body { color :"". $tainted ."" ; }"" ;
?>
 </style> 
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :"". $tainted ."" ; }"" ;",True,True,"echo ""body { color :"". $tainted ."" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :"". $tainted ."" ; }"" ;</Code>
    <Justification>The code uses unsanitized user input `$tainted` directly in CSS style. While `htmlspecialchars` is used, it's primarily intended for HTML context and might not fully neutralize characters that are significant in CSS, potentially leading to CSS injection and, in some scenarios, XSS.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__GET__func_addslashes__userByMail-sprintf_%s_simple_quote.php,"<?php







$tainted = $_GET['UserData'];

$tainted = addslashes($tainted);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $_GET['UserData'];

$tainted = addslashes($tainted);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_GET['UserData'];

$tainted = addslashes($tainted);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);</Code>
    <Justification>The code constructs an LDAP query using unsanitized user input from $_GET['UserData']. Although addslashes() is used, it is insufficient to prevent LDAP injection attacks. Attackers can manipulate the query logic by injecting special characters or sequences, potentially bypassing authentication or accessing unauthorized information.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__object-directGet__func_mysql_real_escape_string__multiple_AS-concatenation.php,"<?php







class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();

$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT Trim(a.FirstName) & ' ' & Trim(a.LastName) AS employee_name, a.city, a.street & (' ' +a.housenum) AS address FROM Employees AS a  WHERE a.supervisor="". $tainted . """";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,True,"$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT Trim(a.FirstName) & ' ' & Trim(a.LastName) AS employee_name, a.city, a.street & (' ' +a.housenum) AS address FROM Employees AS a  WHERE a.supervisor="". $tainted . """";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT Trim(a.FirstName) & ' ' & Trim(a.LastName) AS employee_name, a.city, a.street & (' ' +a.housenum) AS address FROM Employees AS a  WHERE a.supervisor="". $tainted . """";</Code>
    <Justification>Even though `mysql_real_escape_string` is used, it is not sufficient to prevent SQL injection in all cases, especially when dealing with numeric contexts.  The `$tainted` variable is directly concatenated into the SQL query without proper sanitization for its intended use (numeric).  An attacker could bypass the escaping and still inject malicious SQL code.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;</Code>
    <Justification>The code does not check the return value of `mysql_connect()` and `mysql_select_db()`. If the connection fails or the database selection fails, the script will continue to execute, potentially leading to errors or unexpected behavior. The return value should be checked to ensure that the connection and database selection were successful.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res = mysql_query($query); </Code>
    <Justification>The `mysql_*` functions are deprecated and insecure. They should be replaced with `mysqli_*` or PDO to prevent vulnerabilities. The use of these functions suggests the code has not been actively reviewed or maintained, and is prone to security flaws.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-391</Weakness>
    <Description>Unchecked Error Condition</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""&lt;br /&gt;"" ;</Code>
    <Justification>The code does not check for errors after executing the `mysql_query()` function. If the query fails, `mysql_query()` will return `FALSE`, and the subsequent `mysql_fetch_array()` call will result in an error. The code should check the return value of `mysql_query()` and handle any errors appropriately.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-classicGet__ternary_white_list__Use_untrusted_data_script-doublequoted_String.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object
sanitize : use of ternary condition
File : use of untrusted data in a double quoted string in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input;
  }

  public  function __construct(){
   $this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo ""alert(\"""". $tainted .""\"")"" ;
?>
</script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""alert(\"""". $tainted .""\"")"" ;",True,True,"echo ""alert(\"""". $tainted .""\"")"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""alert(\"""". $tainted .""\"")"" ;</Code>
    <Justification>The code uses unsanitized user input directly within a JavaScript alert. Although a ternary condition is used, it only restricts the input to 'safe1' or 'safe2', which does not prevent XSS if those strings themselves contain malicious JavaScript. This allows an attacker to inject arbitrary JavaScript code into the web page, leading to Cross-Site Scripting (XSS).</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__unserialize__func_FILTER-VALIDATION-number_float_filter__Unsafe_use_untrusted_data-attribute_Name.php,"<!-- 
Unsafe sample
input : Get a serialize string in POST and unserialize it
Flushes content of $sanitized if the filter number_float_filter is not applied
File : unsafe, use of untrusted data in an attribute name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<body>
<?php
$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""<div "". $tainted .""= bob />"" ;
?>
<h1>Hello World!</h1>
</div>
</body>
</html>","echo ""<div "". $tainted .""= bob />"" ;",True,True,"echo ""<div "". $tainted .""= bob />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;div "". $tainted .""= bob />"" ;</Code>
    <Justification>The code directly uses the potentially tainted variable $tainted within an HTML attribute. If $tainted contains malicious code (e.g., JavaScript), it will be executed in the user's browser, leading to Cross-Site Scripting (XSS).</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses `unserialize()` on user-provided data from `$_POST['UserData']`. Deserializing untrusted data can lead to arbitrary code execution if the serialized data contains objects that trigger malicious code upon deserialization.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>filter_var($sanitized, FILTER_VALIDATE_FLOAT)</Code>
    <Justification>The return value of filter_var is not checked. Although unlikely, if filter_var fails for some reason, this will not be detected, and the code may proceed with unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-457</Weakness>
    <Description>Use of uninitialized variable</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The variable `$sanitized` is used within the `filter_var` function, but it is never initialized before this point. This means that the filter is operating on an unknown value, which may lead to unexpected behavior.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__array-GET__func_preg_replace__Use_untrusted_data_propertyValue_CSS-double_Quoted_Property_Value.php,"<!-- 
Unsafe sample
input : get the $_GET['userData'] in an array
SANITIZE : use of preg_replace
File : use of untrusted data in a double quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;

$tainted = preg_replace('/\'/', '', $tainted);


echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\"""". $tainted .""\"" ; }"" ;",True,True,"echo ""body { color :\"""". $tainted .""\"" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\"""". $tainted .""\"" ; }"" ;</Code>
    <Justification>The code outputs user-controlled data ($tainted) into a CSS property value within a double-quoted string. While single quotes are removed, other potentially malicious characters that could break out of the string context or inject arbitrary CSS code are not neutralized, leading to a potential XSS vulnerability. For example, injecting ""red\""; background: url(http://example.com/malicious.js); /*"" could lead to arbitrary code execution.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__system__func_htmlentities__not_name-sprintf_%s_simple_quote.php,"<?php







$tainted = system('ls', $retval);

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = system('ls', $retval);
$tainted = htmlentities($tainted, ENT_QUOTES);

$query = sprintf(""!name='%s'"", $tainted);

$sr=ldap_search($ds,""o=My Company, c=US"", $query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code uses the `system()` function with a hardcoded 'ls' command. While the command itself is not directly influenced by user input in this snippet, `system()` is inherently dangerous as it executes shell commands, potentially opening the door for command injection if user-controlled data were ever passed to it.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);
$tainted = htmlentities($tainted, ENT_QUOTES);

$query = sprintf(""!name='%s'"", $tainted);

$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code constructs an LDAP query using a value obtained from the `system()` call. Even though `htmlentities()` is used, it might not be sufficient to prevent LDAP injection. The output of `system('ls')` could contain characters that, even after HTML encoding, could be interpreted as special LDAP characters, allowing an attacker to modify the query's meaning and potentially access or modify sensitive data in the LDAP directory.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code does not check the return values of `ldap_connect`, `ldap_bind`, and `ldap_search`. If any of these functions fail, the subsequent code might operate on an invalid resource, leading to unpredictable behavior or security vulnerabilities. For example, if `ldap_connect` fails, `$ds` could be false, and `ldap_bind($ds)` would produce a warning and might not bind properly. Similarly, `ldap_search` might fail, but the code proceeds to `ldap_close` without knowing if the search was successful.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code does not check the return values of `ldap_connect`, `ldap_bind`, and `ldap_search`. Failure to check return values can lead to unexpected program behavior if these functions fail to perform their intended operations. For example, if `ldap_connect` fails, the program proceeds without a valid connection, potentially causing later operations to fail or produce incorrect results.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__proc_open__func_FILTER-CLEANING-email_filter__Unsafe_use_untrusted_data-comment.php,"<!-- 
Unsafe sample
input : use proc_open to read /tmp/tainted.txt
Uses an email_filter via filter_var function
File : unsafe, use of untrusted data in a comment
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<!--
<?php
$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo $tainted ;
?>
-->
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,echo $tainted ;,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo $tainted ;</Code>
    <Justification>The variable `$tainted` is echoed directly into the HTML comment without proper sanitization. If `$tainted` contains malicious script, it will be executed when the page is rendered, leading to a Cross-Site Scripting (XSS) vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);</Code>
    <Justification>The code uses `proc_open` to execute an OS command with a hardcoded path `/tmp/tainted.txt`. While the path is hardcoded, if the file `/tmp/tainted.txt` is controllable by an attacker, they could inject shell commands into the file, leading to OS Command Injection. Although the immediate code doesn't take user input, the dependency on an external file makes it vulnerable.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);</Code>
    <Justification>The code does not check the return values of `fclose`, `stream_get_contents` or `proc_close`. Failure of these functions can lead to unexpected behavior and potential resource leaks.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$tainted = stream_get_contents($pipes[1]);</Code>
    <Justification>`stream_get_contents` can have issues with large streams and may not be the most reliable way to read from a stream. While not strictly obsolete, it's often better to use `fread` with a defined length.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-434</Weakness>
    <Description>Unrestricted Upload of File with Dangerous Type</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);</Code>
    <Justification>The code reads from `/tmp/tainted.txt`. If there is an unrestricted file upload vulnerability elsewhere in the application, an attacker could upload a file with a dangerous type (e.g., a PHP script) to `/tmp/tainted.txt` and then the code would execute it.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__system__no_sanitizing__Use_untrusted_data_propertyValue_CSS-quoted_Property_Value.php,"<!-- 
Unsafe sample
input : execute a ls command using the function system, and put the last result in $tainted
sanitize : none
File : unsafe, use of untrusted data in a quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = system('ls', $retval);




echo ""body { color :\'"". $tainted .""\' ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\'"". $tainted .""\' ; }"" ;",True,True,"echo ""body { color :\'"". $tainted .""\' ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code uses the `system()` function to execute an external command ('ls'). While the output of this command is later used in a CSS style, the initial execution of the command itself could be influenced by external factors (e.g., if the script's environment variables are modifiable by an attacker), leading to command injection vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\'"". $tainted .""\' ; }"" ;</Code>
    <Justification>The code echoes the output of the `system()` command directly into a CSS style attribute. The output is not sanitized. This could allow an attacker to inject malicious CSS or even escape the CSS context and inject JavaScript (depending on browser behavior), leading to Cross-Site Scripting (XSS).</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__exec__func_preg_replace2__name-sprintf_%s_simple_quote.php,"<?php







$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];

$tainted = preg_replace('/\W/si','',$tainted);

$query = sprintf(""name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $result[0];

$tainted = preg_replace('/\W/si','',$tainted);

$query = sprintf(""name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$script = ""/tmp/tainted.php"";
exec($script, $result, $return);</Code>
    <Justification>The code executes an external script without sanitizing or validating its content. If the script's content is malicious or contains injected commands, it could lead to command injection vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $result[0];

$tainted = preg_replace('/\W/si','',$tainted);

$query = sprintf(""name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query using user-controlled input ($tainted) without proper sanitization. Even after using preg_replace to remove non-alphanumeric characters, the input might still contain characters or sequences that could be interpreted as special LDAP control characters, leading to LDAP injection vulnerabilities. The sprintf function is used to create the query string, which is then directly used in the ldap_search function.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__backticks__no_sanitizing__multiple_select-sprintf_%s_simple_quote.php,"<?php







$tainted = `cat /tmp/tainted.txt`;



$query = sprintf(""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent='%s')"", $tainted);


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = sprintf(""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent='%s')"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code uses backticks to execute an external command (cat /tmp/tainted.txt) without proper sanitization. An attacker could potentially inject malicious commands by modifying the content of the /tmp/tainted.txt file.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent='%s')"", $tainted);</Code>
    <Justification>The code uses sprintf to construct an SQL query with user-supplied data ($tainted) without proper sanitization. This allows an attacker to inject malicious SQL code by manipulating the $tainted variable, leading to SQL injection vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res = mysql_query($query); </Code>
    <Justification>The code uses the mysql_connect and mysql_query functions, which are deprecated.  Using deprecated functions can lead to compatibility issues and potential security vulnerabilities in the future.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__unserialize__ternary_white_list__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : Get a serialize string in POST and unserialize it
sanitize : use of ternary condition
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses unserialize() on user-controlled data ($_POST['UserData']). This can lead to arbitrary code execution if the serialized data is maliciously crafted.  Deserialization of untrusted data is a high-risk security vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""window.setInterval('"". $tainted .""');""</Code>
    <Justification>The code uses user-controlled data ($tainted) inside javascript's setInterval function. Even though a ternary operator is used, the $tainted variable could influence the javascript execution flow, leading to command injection.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__object-indexArray__func_FILTER-VALIDATION-email_filter__name-interpretation_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input['realOne'];
  }

  public  function __construct(){
    $this->input = array();
    $this->input['test']= 'safe' ;
    $this->input['realOne']= $_GET['UserData'] ;
    $this->input['trap']= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query by directly embedding user-controlled data ($tainted) into the query string. This can lead to LDAP injection vulnerabilities if the input is not properly sanitized, allowing attackers to modify the query's meaning and potentially gain unauthorized access to sensitive information. Although there is a filter_var, the $sanitized variable is not initialized, and thus, the code always goes to the else branch, making $tainted an empty string. Even with an empty string, an attacker can craft a malicious input.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-457</Weakness>
    <Description>Use of uninitialized variable</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The variable `$sanitized` is used within the `filter_var` function, but it is never initialized prior to this use. This can lead to unpredictable behavior, as the value of `$sanitized` will be whatever garbage value is present in memory. While the else statement assigns tainted to an empty string, an attacker can craft a malicious input</Justification>
  </Issue>
</Issues>
```"
CWE-78,src/CWE_78__object-directGet__func_FILTER-CLEANING-special_chars_filter__ls-sprintf_%s_simple_quote.php,"<?php







class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      

$query = sprintf(""ls '%s'"", $tainted);


$ret = system($query);


?>",$ret = system($query);,True,True,"$query = sprintf(""ls '%s'"", $tainted);


$ret = system($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""ls '%s'"", $tainted);


$ret = system($query);</Code>
    <Justification>The code constructs a shell command using user-provided data without proper neutralization. Although the input is sanitized using FILTER_SANITIZE_SPECIAL_CHARS, this is not sufficient to prevent command injection vulnerabilities.  The sanitized input is still placed within single quotes in the command, and it is possible to inject commands by escaping the single quotes and injecting arbitrary commands.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-22</Weakness>
    <Description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""ls '%s'"", $tainted);


$ret = system($query);</Code>
    <Justification>The 'ls' command is being executed on user-supplied input.  While the input is sanitized, a malicious user could still potentially craft an input that, when passed to 'ls', could cause it to list files outside of the intended directory.  This is especially true since the current working directory of the script is not explicitly controlled, meaning a path traversal attack is possible.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__object-Array__func_mysql_real_escape_string__select_from_where-interpretation.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT * FROM student where id= $tainted "";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = ""SELECT * FROM student where id= $tainted "";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""SELECT * FROM student where id= $tainted "";</Code>
    <Justification>The code constructs an SQL query by embedding user-controlled input ($tainted) directly into the query string. Although mysql_real_escape_string is used, it is deprecated and may not prevent all forms of SQL injection. Furthermore, the input is treated as numeric, but not validated as such, which could lead to SQL injection if the database expects a number but receives a string.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = mysql_real_escape_string($tainted);</Code>
    <Justification>The code uses the mysql_real_escape_string function, which is deprecated. This function is part of the old MySQL extension, which is no longer maintained and is considered insecure. It is recommended to use MySQLi or PDO with prepared statements instead.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The code does not check the return value of mysql_connect. If the connection fails, mysql_connect will return FALSE, and subsequent calls to mysql_select_db and mysql_query will result in errors. These errors are not handled, potentially leading to unexpected behavior or information disclosure.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$res = mysql_query($query);</Code>
    <Justification>The code does not check the return value of mysql_query. If the query fails, mysql_query will return FALSE, and subsequent calls to mysql_fetch_array will result in errors. These errors are not handled, potentially leading to unexpected behavior or information disclosure.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = mysql_real_escape_string($tainted);
$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
$res = mysql_query($query); 
while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""&lt;br /&gt;"" ;
} 
mysql_close($conn);</Code>
    <Justification>The code uses the old mysql_* functions, which are deprecated. Using deprecated functions makes the code harder to maintain as they are no longer supported and might be removed in future PHP versions. Migrating to mysqli or PDO is recommended.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The code does not check if the mysql_connect function successfully connected to the database. If the connection fails, subsequent database operations will also fail, leading to unpredictable application behavior. Checking the return value and handling potential errors improves the reliability of the application.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$res = mysql_query($query);</Code>
    <Justification>The code does not check if the mysql_query function successfully executed the SQL query. If the query fails, subsequent operations like mysql_fetch_array will lead to errors. Checking the return value of mysql_query and handling potential database errors enhances the application's reliability.</Justification>
  </Issue>
  <Issue>
    <Type>Performance Efficiency</Type>
    <Weakness>CWE-1072</Weakness>
    <Description>Data Resource Access without Use of Connection Pooling</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The code establishes a new database connection for each request without using connection pooling. Establishing a new connection is a resource-intensive operation. Using connection pooling can improve performance by reusing existing connections.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__GET__func_preg_match-no_filtering__username_at-sprintf_%s_simple_quote.php,"<?php







$tainted = $_GET['UserData'];

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = sprintf(""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-643</Weakness>
    <Description>Improper Neutralization of Data within XPath Expressions ('XPath Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code uses user-controlled data ($tainted) to construct an XPath query without proper neutralization, leading to XPath injection vulnerability. An attacker can manipulate the query to access or modify data they are not authorized to.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}</Code>
    <Justification>The code uses the return value of preg_match without checking for errors.  If preg_match fails (returns false), the code does not handle this, potentially leading to unexpected behavior.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__object-indexArray__func_FILTER-CLEANING-magic_quotes_filter__userByMail-sprintf_%s_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input['realOne'];
  }

  public  function __construct(){
    $this->input = array();
    $this->input['test']= 'safe' ;
    $this->input['realOne']= $_GET['UserData'] ;
    $this->input['trap']= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);</Code>
    <Justification>The code constructs an LDAP query using unsanitized user input. Even though magic quotes are applied, they are insufficient to prevent LDAP injection. Magic quotes are deprecated and may not be enabled, and they only escape a limited set of characters. An attacker could inject arbitrary LDAP code, potentially bypassing authentication or gaining unauthorized access to information.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);</Code>
    <Justification>The code uses FILTER_SANITIZE_MAGIC_QUOTES, which is related to magic quotes. Magic quotes are deprecated in PHP 5.3.0 and removed in PHP 5.4.0. Using deprecated features can lead to unpredictable behavior and potential security vulnerabilities as they are no longer maintained.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code does not check the return values of ldap_bind() and ldap_search(). If these functions fail, they return FALSE, and the program will continue to execute, potentially leading to unexpected behavior or incorrect results.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-404</Weakness>
    <Description>Improper Resource Shutdown or Release</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>Although ldap_close($ds) is called, there's no error handling for ldap_connect, ldap_bind, and ldap_search. If any of these functions fail and return FALSE, ldap_close($ds) might still be called, but any resources allocated before the failure might not be properly released if the script exits prematurely or encounters an unhandled exception. Consider wrapping the LDAP operations in a try-finally block to ensure ldap_close is always called.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__POST__func_http_build_query__Use_untrusted_data_propertyValue_CSS-quoted_Property_Value.php,"<!-- 
Unsafe sample
input : get the field UserData from the variable $_POST
SANITIZE : use of http_build_query
File : unsafe, use of untrusted data in a quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = $_POST['UserData'];

$tainted = http_build_query($tainted);


echo ""body { color :\'"". $tainted .""\' ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\'"". $tainted .""\' ; }"" ;",True,True,"<?php
$tainted = $_POST['UserData'];

$tainted = http_build_query($tainted);


echo ""body { color :\'"". $tainted .""\' ; }"" ;
?>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>&lt;?php
$tainted = $_POST['UserData'];

$tainted = http_build_query($tainted);


echo ""body { color :\'"". $tainted .""\' ; }"" ;
?&gt;</Code>
    <Justification>The code takes user input from $_POST['UserData'], sanitizes it with http_build_query, and then uses it to construct a CSS property value within a style tag. While http_build_query encodes the input, it doesn't prevent CSS injection. An attacker can still inject malicious CSS code via the UserData parameter, potentially leading to information disclosure or other attacks.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$tainted = $_POST['UserData'];

$tainted = http_build_query($tainted);</Code>
    <Justification>The code uses $_POST['UserData'] without checking if the 'UserData' key exists in the $_POST array. If the key does not exist, it will result in an undefined index warning. Although this doesn't directly lead to a critical failure, it indicates a lack of robustness in input handling.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__backticks__func_FILTER-CLEANING-full_special_chars_filter__Use_untrusted_data_propertyValue_CSS-double_Quoted_Property_Value.php,"<!-- 
Unsafe sample
input : backticks interpretation, reading the file /tmp/tainted.txt
Uses a full_special_chars_filter via filter_var function
File : use of untrusted data in a double quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = `cat /tmp/tainted.txt`;

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     


echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\"""". $tainted .""\"" ; }"" ;",True,True,"echo ""body { color :\"""". $tainted .""\"" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code uses backticks to execute a system command with user-controlled data. This is vulnerable to command injection attacks if the file /tmp/tainted.txt contains malicious commands.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\"""". $tainted .""\"" ; }"" ;</Code>
    <Justification>The code outputs user-controlled data directly into a CSS property value within double quotes without proper context-aware escaping. While filter_var with FILTER_SANITIZE_FULL_SPECIAL_CHARS is used, it might not be sufficient to prevent XSS in all contexts, especially if the output is interpreted as CSS. If the tainted data contains characters that can break out of the CSS property, it can lead to XSS.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__proc_open__func_htmlspecialchars__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : use proc_open to read /tmp/tainted.txt
sanitize : use of the function htmlspecialchars. Sanitizes the query but has a high chance to produce unexpected results
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}

$tainted = htmlspecialchars($tainted, ENT_QUOTES);


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",True,True,"$tainted = htmlspecialchars($tainted, ENT_QUOTES);


echo ""window.setInterval('"". $tainted .""');"" ;
?>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>

$tainted = htmlspecialchars($tainted, ENT_QUOTES);


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </Code>
    <Justification>The code uses htmlspecialchars to sanitize the input, which is intended to prevent XSS. However, this is used inside the setInterval function, which executes JavaScript. The htmlspecialchars function can be bypassed in certain cases with JavaScript, leading to XSS. The correct way would be to pass a function reference to setInterval instead of a string.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>  $return_value = proc_close($process);
}

$tainted = htmlspecialchars($tainted, ENT_QUOTES);</Code>
    <Justification>The return value of proc_close is not checked. If proc_close fails, the script will continue, potentially using an invalid resource and leading to unexpected behavior.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__GET__func_FILTER-CLEANING-special_chars_filter__join-concatenation_simple_quote.php,"<?php







$tainted = $_GET['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      

$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag='"". $tainted . ""'"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,True,"$tainted = $_GET['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      

$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag='"". $tainted . ""'"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_GET['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      

$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag='"". $tainted . ""'"";</Code>
    <Justification>The code is vulnerable to SQL injection. Even though the input is sanitized using FILTER_SANITIZE_SPECIAL_CHARS, this filter is not sufficient to prevent SQL injection attacks in all contexts. An attacker can still manipulate the query by injecting malicious SQL code through the UserData parameter.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;</Code>
    <Justification>The code does not check the return value of mysql_connect() and mysql_select_db(). If the connection fails or the database selection fails, these functions return FALSE. Without checking the return value, the code will proceed, potentially leading to errors or unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res = mysql_query($query); </Code>
    <Justification>The code uses the mysql_connect, mysql_select_db, and mysql_query functions, which are deprecated. Using deprecated functions can lead to security vulnerabilities as they may not be actively maintained and may contain known flaws.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-391</Weakness>
    <Description>Unchecked Error Condition</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""&lt;br /&gt;"" ;
} </Code>
    <Justification>The code does not check if the query execution with mysql_query was successful. If the query fails, mysql_query returns FALSE. The code proceeds to use the result without checking for failure, which can lead to errors. Also, it does not check if the mysql_fetch_array returns a valid result. If the query returns no results, it will lead to infinite loops, or unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-404</Weakness>
    <Description>Improper Resource Shutdown or Release</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>mysql_close($conn);</Code>
    <Justification>Although the code closes the MySQL connection using mysql_close($conn), there is no error handling or check to ensure that $conn is a valid resource before attempting to close it. If the connection fails to establish initially (e.g., due to invalid credentials), $conn might be FALSE, and attempting to close it could lead to an error. It is good practice to verify the connection before closing it.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__proc_open__func_FILTER-VALIDATION-email_filter__Use_untrusted_data_propertyValue_CSS-span_Style_Property_Value.php,"<!-- 
Unsafe sample
input : use proc_open to read /tmp/tainted.txt
Flushes content of $sanitized if the filter email_filter is not applied
File : unsafe, use of untrusted data in a property value in a span tag(CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;",True,True,"if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""&lt;span style=\""color :"". checked_data .""\""&gt;Hey&lt;/span&gt;"" ;</Code>
    <Justification>The code uses a variable 'checked_data' directly in the HTML output within a style attribute without proper sanitization. If 'checked_data' contains malicious code (e.g., JavaScript), it will be executed in the user's browser, leading to XSS.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}</Code>
    <Justification>The code uses proc_open to execute a command 'more /tmp/tainted.txt'. The content of '/tmp/tainted.txt' is read into the variable $tainted. Although the command itself is not directly influenced by user input, the reading of an external file whose contents are then used unsanitized in a later part of the script introduces a potential command injection vulnerability. If the content of /tmp/tainted.txt is controlled by an attacker, it could contain malicious commands.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}</Code>
    <Justification>The code calls proc_close() but does not check the return value. If proc_close() fails, the script will continue execution without knowing about the failure. If stream_get_contents fails and returns false, the code does not handle this condition. This can lead to unexpected behavior or errors later in the script.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>  $tainted = stream_get_contents($pipes[1]);</Code>
    <Justification>stream_get_contents has some known issues and might be considered obsolete in some contexts, depending on the PHP version and configuration. It's better to use fread with a specified length to avoid potential memory exhaustion issues.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__POST__func_FILTER-VALIDATION-number_int_filter__Use_untrusted_data_propertyValue_CSS-double_Quoted_Property_Value.php,"<!-- 
Unsafe sample
input : get the field UserData from the variable $_POST
Flushes content of $sanitized if the filter number_int_filter is not applied
File : use of untrusted data in a double quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = $_POST['UserData'];

if (filter_var($sanitized, FILTER_VALIDATE_INT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\"""". $tainted .""\"" ; }"" ;",True,True,"echo ""body { color :\"""". $tainted .""\"" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\"""". $tainted .""\"" ; }"" ;</Code>
    <Justification>The code uses untrusted data from $_POST['UserData'] directly within a CSS style attribute. Although there's an attempt to sanitize with FILTER_VALIDATE_INT, if validation fails, the variable $tainted is assigned an empty string, but this will not prevent XSS if the attacker provides a crafted string that is not an integer, but is still valid CSS.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__GET__ternary_white_list__Unsafe_use_untrusted_data-style.php,"<!-- 
Unsafe sample
input : reads the field UserData from the variable $_GET
sanitize : use of ternary condition
File : unsafe, use of untrusted data in CSS
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = $_GET['UserData'];

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo $tainted ;
?>
</style>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"<style>
<?php
$tainted = $_GET['UserData'];

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo $tainted ;
?>
</style>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>&lt;style&gt;
&lt;?php
$tainted = $_GET['UserData'];

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo $tainted ;
?&gt;
&lt;/style&gt;</Code>
    <Justification>The code takes user input from $_GET['UserData'] and echoes it directly into a &lt;style&gt; block. Although a ternary condition is used, it only allows 'safe1' or 'safe2' as valid values. However, this does not prevent an attacker from injecting malicious CSS code, which can lead to Cross-Site Scripting (XSS). For instance, an attacker could inject ""safe1; background:url('http://example.com/malicious.php')"" which would be a valid CSS statement and could exfiltrate data or perform other malicious actions.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__GET__func_pg_escape_string__not_name-sprintf_%s_simple_quote.php,"<?php







$tainted = $_GET['UserData'];

$tainted = pg_escape_string($tainted);

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $_GET['UserData'];

$tainted = pg_escape_string($tainted);

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_GET['UserData'];

$tainted = pg_escape_string($tainted);

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code is vulnerable to LDAP injection. Although pg_escape_string is used, it is intended for escaping strings for PostgreSQL, not LDAP. LDAP requires a different escaping mechanism, and using the wrong escaping function does not prevent injection attacks. An attacker could manipulate the 'UserData' GET parameter to inject malicious LDAP code into the query, potentially allowing them to bypass authentication, extract sensitive information, or modify the LDAP directory.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__fopen__func_FILTER-CLEANING-number_float_filter__Use_untrusted_data_attribute-unquoted_Attr.php,"<!-- 
Unsafe sample
input : use fopen to read /tmp/tainted.txt and put the first line in $tainted
Uses a number_float_filter via filter_var function
File : use of untrusted data in a unquoted attribute
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$sanitized = filter_var($tainted, FILTER_SANITIZE_NUMBER_FLOAT);
if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""<div id="". $tainted ."">content</div>"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<div id="". $tainted ."">content</div>"" ;",True,True,"echo ""<div id="". $tainted ."">content</div>"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;div id="". $tainted ."">content&lt;/div>"" ;</Code>
    <Justification>The code uses unsanitized input `$tainted` directly in an HTML attribute without proper escaping. This can lead to Cross-Site Scripting (XSS) vulnerabilities if the input contains malicious code. Even though there is number_float filter, it will not prevent XSS.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>  fclose($handle);
} else {
  $tainted = """";
}</Code>
    <Justification>The return value of `fclose()` is not checked. If `fclose()` fails, it could lead to resource leaks or data corruption if the file was not properly closed.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__unserialize__func_preg_replace__not_name-sprintf_%s_simple_quote.php,"<?php







$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$tainted = preg_replace('/\'/', '', $tainted);

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = preg_replace('/\'/', '', $tainted);

$query = sprintf(""!name='%s'"", $tainted);

$sr=ldap_search($ds,""o=My Company, c=US"", $query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses unserialize() on user-supplied data ($_POST['UserData']). This is extremely dangerous as it allows arbitrary code execution if the serialized data is maliciously crafted.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = preg_replace('/\'/', '', $tainted);

$query = sprintf(""!name='%s'"", $tainted);

$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code attempts to sanitize the input with preg_replace, but this is insufficient to prevent LDAP injection.  The sprintf function is then used to construct the LDAP query. Even with the attempt to remove single quotes, other LDAP special characters can still be injected to modify the query's meaning.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__exec__func_FILTER-CLEANING-email_filter__name-sprintf_%s_simple_quote.php,"<?php







$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = sprintf(""name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$query = sprintf(""name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$script = ""/tmp/tainted.php"";
exec($script, $result, $return);</Code>
    <Justification>The code executes an external script without proper sanitization of the script path. If an attacker can control the `$script` variable, they can inject arbitrary commands.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query using `sprintf` with a tainted variable `$tainted`. Although the code attempts to sanitize the input to be a valid email, an attacker could still craft a string that is a valid email but also contains malicious LDAP syntax, leading to LDAP injection.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__exec__func_FILTER-CLEANING-full_special_chars_filter__Unsafe_use_untrusted_data-script.php,"<!-- 
Unsafe sample
input : use exec to execute the script /tmp/tainted.php and store the output in $tainted
Uses a full_special_chars_filter via filter_var function
File : unsafe, use of untrusted data in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     


echo $tainted ;
?>
</script>
</head>
<body onload=""xss()"">
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"<script>
<?php
$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     


echo $tainted ;
?>
</script>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>&lt;script&gt;
&lt;?php
$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     


echo $tainted ;
?&gt;
&lt;/script&gt;</Code>
    <Justification>The code executes a script, stores the output in $tainted, sanitizes it using FILTER_SANITIZE_FULL_SPECIAL_CHARS, and then echoes it directly into the script section of the HTML. While the sanitization function is used, echoing directly into a &lt;script&gt; tag allows for XSS if the sanitized output contains characters that can break out of the PHP echo statement and introduce JavaScript code.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$script = ""/tmp/tainted.php"";
exec($script, $result, $return);</Code>
    <Justification>The code uses the `exec` function to execute the script `/tmp/tainted.php`. If the content of `/tmp/tainted.php` is controlled by an attacker, this allows for arbitrary OS command execution, leading to a command injection vulnerability.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__GET__func_FILTER-VALIDATION-email_filter__select_from-sprintf_%s_simple_quote.php,"<?php







$tainted = $_GET['UserData'];

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = sprintf(""SELECT * FROM '%s'"", $tainted);


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = sprintf(""SELECT * FROM '%s'"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""SELECT * FROM '%s'"", $tainted);</Code>
    <Justification>The code uses sprintf to construct a SQL query, but the input '$tainted' is not properly sanitized to prevent SQL injection attacks. The single quotes around '%s' do not prevent SQL injection in all cases. This allows an attacker to inject arbitrary SQL code by manipulating the '$tainted' variable.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
$res = mysql_query($query); 
mysql_close($conn);</Code>
    <Justification>The code uses the 'mysql_connect', 'mysql_select_db', 'mysql_query', and 'mysql_close' functions, which are deprecated. Using deprecated functions can lead to security vulnerabilities and is not recommended.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
$res = mysql_query($query); 
mysql_close($conn);</Code>
    <Justification>The code does not check the return values of 'mysql_connect', 'mysql_select_db', and 'mysql_query'. If these functions fail, they can return false or null, and the code will continue to execute, potentially leading to errors or unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-22</Weakness>
    <Description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = $_GET['UserData'];

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The code retrieves user data from $_GET['UserData'] and sanitizes it using FILTER_VALIDATE_EMAIL. While this is intended to validate an email format, it does not prevent path traversal attacks if the data is later used to construct file paths or other resource identifiers. The email validation provides a false sense of security since it is not relevant to preventing path traversal.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__object-classicGet__func_addslashes__name-concatenation_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input;
  }

  public  function __construct(){
   $this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = addslashes($tainted);

$query = ""name='"". $tainted . ""'"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = addslashes($tainted);

$query = ""name='"". $tainted . ""'"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = addslashes($tainted);

$query = ""name='"". $tainted . ""'"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code constructs an LDAP query by concatenating user-provided input ($tainted) into the query string. Although addslashes() is used, it's insufficient to prevent LDAP injection.  LDAP injection can allow an attacker to bypass authentication or execute arbitrary commands on the LDAP server.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);</Code>
    <Justification>The code uses ldap_bind without specifying username and password, which defaults to anonymous bind. If the LDAP server requires authentication, this will fail. If the LDAP server allows anonymous bind, this is effectively hard-coded credentials, allowing anyone to connect to the LDAP server and potentially gain access to sensitive information, depending on the server configuration.</Justification>
  </Issue>
</Issues>
```"
CWE-78,src/CWE_78__shell_exec__no_sanitizing__cat-concatenation_simple_quote.php,"<?php







$tainted = shell_exec('cat /tmp/tainted.txt');



$query = ""cat '"". $tainted . ""'"";


$ret = system($query);


?>",$ret = system($query);,True,True,"$tainted = shell_exec('cat /tmp/tainted.txt');

$query = ""cat '"". $tainted . ""'"";

$ret = system($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');

$query = ""cat '"". $tainted . ""'"";

$ret = system($query);</Code>
    <Justification>The code is vulnerable to OS command injection. The $tainted variable, which is populated with the contents of /tmp/tainted.txt, is directly concatenated into the $query string.  If /tmp/tainted.txt contains malicious OS commands, these commands will be executed by the system() function.  The shell_exec function itself can also be a source of command injection if the input to it is not carefully sanitized. In this case, the content of /tmp/tainted.txt is used to construct a command. An attacker could modify /tmp/tainted.txt to inject arbitrary commands.  The use of system() to execute the command further exacerbates the risk.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__shell_exec__func_urlencode__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : use shell_exec to cat /tmp/tainted.txt
SANITIZE : use of urlencode
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = urlencode($tainted);


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",True,True,"echo ""window.setInterval('"". $tainted .""');"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute a command based on a fixed string. While the command itself is not directly influenced by user input in this code, the shell_exec function can be dangerous if the command includes user-controlled data. It's still a potential weakness since the code is executing a system command.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-99</Weakness>
    <Description>Improper Control of Resource Identifiers (‘Resource injection’)</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code reads from a file '/tmp/tainted.txt' using shell_exec. If the contents of this file are attacker controlled, it can lead to resource injection. Even though urlencode is applied, the initial read is unsafe.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""window.setInterval('"". $tainted .""');"" ;</Code>
    <Justification>The code is using the output of shell_exec within a javascript setInterval function. Although urlencode is used, this is not sufficient to prevent XSS.  The urlencode function only encodes special characters in URLs, and does not prevent javascript injection. An attacker can inject malicious JavaScript code through the /tmp/tainted.txt file, which will then be executed in the victim's browser.</Justification>
  </Issue>
  <Issue>
    <Type>Performance Efficiency</Type>
    <Weakness>CWE-1050</Weakness>
    <Description>Excessive Platform Resource Consumption within a Loop</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>echo ""window.setInterval('"". $tainted .""');"" ;</Code>
    <Justification>Using setInterval, especially with potentially long or complex code injected via XSS, can lead to excessive consumption of browser resources, especially if the injected code is not well-optimized or contains resource-intensive operations.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__system__func_FILTER-VALIDATION-email_filter__data-sprintf_%s_simple_quote.php,"<?php







$tainted = system('ls', $retval);

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = sprintf(""'%s'"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$query = sprintf(""'%s'"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code uses the system() function, which executes an external command. The input to this function is not sanitized, leading to a command injection vulnerability. An attacker could inject malicious commands to be executed on the server.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""'%s'"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code constructs an XPath query using sprintf() with a tainted variable and executes it using $xml->xpath($query). This allows an attacker to inject malicious XPath expressions, potentially extracting sensitive data or manipulating the XML document.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code does not check the return value of the system() function. If the command execution fails, the script might proceed with an empty or incorrect $tainted variable, leading to unexpected behavior.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__shell_exec__no_sanitizing__name-concatenation_simple_quote.php,"<?php







$tainted = shell_exec('cat /tmp/tainted.txt');



$query = ""name='"". $tainted . ""'"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = shell_exec('cat /tmp/tainted.txt');

$query = ""name='"". $tainted . ""'"";

$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');

$query = ""name='"". $tainted . ""'"";

$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query by directly embedding the value of $tainted (obtained from shell_exec) into the query string. Since the input is not validated or sanitized, an attacker could inject malicious LDAP syntax into the input, leading to LDAP injection vulnerabilities. For example, the attacker could bypass authentication or retrieve sensitive information.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute the command 'cat /tmp/tainted.txt'. If the file '/tmp/tainted.txt' is controlled by an attacker, they could inject arbitrary OS commands into the file, leading to command injection when the script is executed. This can allow an attacker to execute arbitrary code on the server.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__unserialize__func_pg_escape_string__userByCN-interpretation_simple_quote.php,"<?php







$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$tainted = pg_escape_string($tainted);

$query = ""(&(objectCategory=person)(objectClass=user)(cn=' $tainted '))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = pg_escape_string($tainted);

$query = ""(&(objectCategory=person)(objectClass=user)(cn=' $tainted '))"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses unserialize() on user-supplied data ($_POST['UserData']), which can lead to arbitrary code execution if the serialized data is maliciously crafted. This is a critical security vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = pg_escape_string($tainted);

$query = ""(&(objectCategory=person)(objectClass=user)(cn=' $tainted '))"";</Code>
    <Justification>Although pg_escape_string is used, it's intended for PostgreSQL, not LDAP.  It will not prevent LDAP injection. The user-supplied data $tainted is incorporated into the LDAP query without proper sanitization for LDAP, allowing an attacker to inject arbitrary LDAP code.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__backticks__no_sanitizing__select_from_where-interpretation_simple_quote.php,"<?php







$tainted = `cat /tmp/tainted.txt`;



$query = ""SELECT * FROM student where id=' $tainted '"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = ""SELECT * FROM student where id=' $tainted '"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code uses backticks to execute a shell command (`cat /tmp/tainted.txt`). This is equivalent to using `shell_exec()` and is vulnerable to command injection if the input file `/tmp/tainted.txt` is controlled by an attacker. An attacker could insert arbitrary shell commands into the file, which would then be executed by the server.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$query = ""SELECT * FROM student where id=' $tainted '"";</Code>
    <Justification>The code directly embeds the `$tainted` variable into the SQL query without proper sanitization. If `$tainted` contains malicious SQL code, it could lead to SQL injection vulnerabilities, allowing an attacker to read, modify, or delete data in the database.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res = mysql_query($query); </Code>
    <Justification>The code uses the `mysql_connect` and `mysql_query` functions, which are deprecated. These functions are no longer maintained and have known security vulnerabilities. It's recommended to use `mysqli` or `PDO` instead.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__object-directGet__func_preg_replace2__userByMail-sprintf_%s_simple_quote.php,"<?php







class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();

$tainted = preg_replace('/\W/si','',$tainted);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,False,"$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);</Code>
    <Justification>The code constructs an LDAP query using user-provided data without proper sanitization. Although the code uses preg_replace to remove non-alphanumeric characters, this is insufficient to prevent LDAP injection attacks. Attackers could still manipulate the query logic.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-778</Weakness>
    <Description>Insufficient Logging</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>
$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);
</Code>
    <Justification>The code does not include any logging mechanisms to record significant security-related events, such as failed login attempts, LDAP injection attempts, or other unusual activities. Without logging, it's difficult to detect and respond to attacks.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>
$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);
</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind, and ldap_search. Failure to check these return values could lead to unexpected behavior or security vulnerabilities if any of these functions fail.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-Array__func_FILTER-CLEANING-number_float_filter__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object, which store it in a array
Uses a number_float_filter via filter_var function
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_NUMBER_FLOAT);
if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",True,True,"echo ""window.setInterval('"". $tainted .""');""","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""window.setInterval('"". $tainted .""');""</Code>
    <Justification>The code uses unsanitized user input ($tainted) directly within a JavaScript function (setInterval). This allows an attacker to inject malicious JavaScript code, leading to cross-site scripting (XSS). Even though the code attempts to sanitize the input using filter_var, it is still vulnerable if the input is not a number.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__fopen__func_FILTER-CLEANING-email_filter__Use_untrusted_data_script-side_Quoted_Expr.php,"<!-- 
Unsafe sample
input : use fopen to read /tmp/tainted.txt and put the first line in $tainted
Uses an email_filter via filter_var function
File : use of untrusted data in one side of a quoted expression in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""x='"". $tainted .""'"" ;
?>
</script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""x='"". $tainted .""'"" ;",True,True,"echo ""x='"". $tainted .""'"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""x='"". $tainted .""'"" ;</Code>
    <Justification>The code echoes the `$tainted` variable directly into the JavaScript code without proper neutralization. Although email sanitization is applied, it is not sufficient to prevent XSS, as a crafted email address can still contain malicious JavaScript code. This could lead to XSS vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }</Code>
    <Justification>The code checks if fgets returns false, but doesn't handle other possible errors during file reading. It is possible that fgets returns a string, but the file could not be read completely. It should be checked if the file pointer is at the end of the file or if there were other errors during file reading.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$handle = @fopen(""/tmp/tainted.txt"", ""r"");</Code>
    <Justification>The `@` symbol used to suppress errors can mask important security issues, making it harder to detect and handle errors properly. Error suppression should be avoided.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__shell_exec__func_FILTER-CLEANING-special_chars_filter__Use_untrusted_data_propertyValue_CSS-quoted_Property_Value.php,"<!-- 
Unsafe sample
input : use shell_exec to cat /tmp/tainted.txt
Uses a special_chars_filter via filter_var function
File : unsafe, use of untrusted data in a quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = shell_exec('cat /tmp/tainted.txt');

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      


echo ""body { color :\'"". $tainted .""\' ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\'"". $tainted .""\' ; }"" ;",True,True,"echo ""body { color :\'"". $tainted .""\' ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute a command. If an attacker can control any part of the command string, they can inject arbitrary commands that will be executed by the server.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\'"". $tainted .""\' ; }"" ;</Code>
    <Justification>The code echoes user-controlled input ($tainted) into the HTML output without proper output encoding in a CSS context. Although filter_var with FILTER_SANITIZE_SPECIAL_CHARS is used, it might not be sufficient to prevent CSS injection depending on the characters present in the input. This can lead to Cross-Site Scripting (XSS) vulnerabilities.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__GET__func_FILTER-CLEANING-full_special_chars_filter__Unsafe_use_untrusted_data-tag_Name.php,"<!-- 
Unsafe sample
input : reads the field UserData from the variable $_GET
Uses a full_special_chars_filter via filter_var function
File : unsafe, use of untrusted data in an tag name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$tainted = $_GET['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     


echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;",True,True,"echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;"".  $tainted ."" href= \""/bob\"" /&gt;"" ;</Code>
    <Justification>The code uses user-controlled input ($tainted) directly within an HTML tag name. While the input is sanitized using FILTER_SANITIZE_FULL_SPECIAL_CHARS, this filter primarily focuses on escaping or removing characters that are special in HTML *content*, not tag names.  An attacker can still inject arbitrary HTML attributes or even different tags by manipulating the tag name itself, leading to XSS.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__system__func_FILTER-CLEANING-number_int_filter__Use_untrusted_data_propertyValue_CSS-quoted_Property_Value.php,"<!-- 
Unsafe sample
input : execute a ls command using the function system, and put the last result in $tainted
Uses a number_int_filter via filter_var function
File : unsafe, use of untrusted data in a quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = system('ls', $retval);

$sanitized = filter_var($tainted, FILTER_SANITIZE_NUMBER_INT);
if (filter_var($sanitized, FILTER_VALIDATE_INT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""body { color :\'"". $tainted .""\' ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\'"". $tainted .""\' ; }"" ;",True,True,"echo ""body { color :\'"". $tainted .""\' ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code uses the `system()` function with a hardcoded command ""ls"". Although the command itself is not directly influenced by user input in this snippet, using `system()` is generally discouraged due to the potential for command injection if the command were to be constructed dynamically. In this instance, the output of the `ls` command could potentially contain characters that, when included in the CSS, might cause issues. While not directly exploitable in this example, the use of `system()` constitutes a security risk.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\'"". $tainted .""\' ; }"" ;</Code>
    <Justification>The code echoes the `$tainted` variable directly into the CSS style within the HTML body. Even after sanitization with `FILTER_SANITIZE_NUMBER_INT`, the output of the `ls` command, stored in `$tainted`, is used in the CSS. If the output of `ls` were to contain characters that are not properly escaped or filtered, it could lead to unexpected behavior or, potentially, CSS injection. While the `FILTER_SANITIZE_NUMBER_INT` filter is applied, this filter may not be sufficient to prevent all possible injection attacks, as it only allows integer values. If the output of `ls` contains characters other than integers, they will be removed, potentially altering the intended CSS or causing errors. Output encoding is missing.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code uses the `system()` function but doesn't check its return value for errors. If the `system()` call fails (e.g., due to insufficient permissions or the command not being found), the script will continue execution with the potentially incorrect or empty value in `$tainted`, leading to unexpected behavior. It's important to check the return value of system calls to handle errors gracefully.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__popen__func_FILTER-VALIDATION-number_float_filter__Use_untrusted_data_propertyValue_CSS-span_Style_Property_Value.php,"<!-- 
Unsafe sample
input : Uses popen to read the file /tmp/tainted.txt using cat command
Flushes content of $sanitized if the filter number_float_filter is not applied
File : unsafe, use of untrusted data in a property value in a span tag(CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;",True,True,"echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');</Code>
    <Justification>The code uses popen to execute a command. While the command itself is hardcoded in this instance, popen can be vulnerable to command injection if the command string is constructed using external input. Even though the command is static, the use of popen is generally discouraged due to its potential for misuse and the availability of safer alternatives.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;span style=\""color :"". checked_data .""\""&gt;Hey&lt;/span&gt;"" ;</Code>
    <Justification>The code directly outputs the value of `checked_data` into the HTML without proper sanitization or encoding. If `checked_data` contains malicious JavaScript or HTML, it could lead to cross-site scripting (XSS) vulnerabilities. Even though the variable name suggests some form of checking, it's not clear if it's actually sanitized. The code should use `htmlspecialchars()` or similar functions to encode the output before inserting it into the HTML.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The code does not check the return values of `popen`, `fread`, and `pclose`. If any of these functions fail, the program might continue execution with invalid data, leading to unexpected behavior or vulnerabilities. For example, if `popen` fails, `$handle` might be `false` which will cause issues when passed to `fread` and `pclose`. Each function should be checked for failure, and appropriate error handling should be implemented.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__fopen__func_FILTER-CLEANING-full_special_chars_filter__Unsafe_use_untrusted_data-comment.php,"<!-- 
Unsafe sample
input : use fopen to read /tmp/tainted.txt and put the first line in $tainted
Uses a full_special_chars_filter via filter_var function
File : unsafe, use of untrusted data in a comment
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<!--
<?php
$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     


echo $tainted ;
?>
-->
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,echo $tainted ;,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo $tainted ;</Code>
    <Justification>The code echoes the variable $tainted directly into the HTML output, inside an HTML comment. Even though it's within a comment, a carefully crafted input could potentially break out of the comment and inject malicious HTML or JavaScript, leading to Cross-Site Scripting (XSS). While less likely to be directly exploitable due to being in a comment, it's still a potential vulnerability if the comment block were to be moved or misinterpreted by future code changes.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-indexArray__func_FILTER-CLEANING-number_float_filter__Use_untrusted_data_propertyValue_CSS-quoted_Property_Value.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object, which store it in a array
Uses a number_float_filter via filter_var function
File : unsafe, use of untrusted data in a quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input['realOne'];
  }

  public  function __construct(){
    $this->input = array();
    $this->input['test']= 'safe' ;
    $this->input['realOne']= $_GET['UserData'] ;
    $this->input['trap']= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_NUMBER_FLOAT);
if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""body { color :\'"". $tainted .""\' ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\'"". $tainted .""\' ; }"" ;",True,True,"echo ""body { color :\'"". $tainted .""\' ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\'"". $tainted .""\' ; }"" ;</Code>
    <Justification>The code directly echoes the tainted variable $tainted into the CSS style without proper sanitization for CSS context. Although filter_var with FILTER_SANITIZE_NUMBER_FLOAT is used, it's intended for numerical values and not for general CSS sanitization. This can lead to CSS injection if $tainted contains malicious CSS code. Example: If UserData is ""';background:url(http://example.com/malicious.js);'"", the resulting CSS would be 'body { color :\'';background:url(http://example.com/malicious.js);'\'; }', which allows arbitrary CSS to be injected.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-Array__func_FILTER-CLEANING-number_int_filter__Use_untrusted_data_propertyValue_CSS-quoted_Property_Value.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object, which store it in a array
Uses a number_int_filter via filter_var function
File : unsafe, use of untrusted data in a quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_NUMBER_INT);
if (filter_var($sanitized, FILTER_VALIDATE_INT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""body { color :\'"". $tainted .""\' ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\'"". $tainted .""\' ; }"" ;",True,True,"echo ""body { color :\'"". $tainted .""\' ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\'"". $tainted .""\' ; }"" ;</Code>
    <Justification>The code takes user-controlled input ($tainted) and uses it to dynamically generate a CSS style. Even though the input is sanitized as an integer, it's still being directly embedded into the CSS.  An attacker could inject malicious CSS by providing a value that, while being an integer, still contains CSS syntax that can be interpreted by the browser.</Justification>
  </Issue>
</Issues>
```"
CWE-78,src/CWE_78__shell_exec__no_sanitizing__ls-interpretation_simple_quote.php,"<?php







$tainted = shell_exec('cat /tmp/tainted.txt');



$query = ""ls ' $tainted '"";


$ret = system($query);


?>",$ret = system($query);,True,True,"$tainted = shell_exec('cat /tmp/tainted.txt');

$query = ""ls ' $tainted '"";

$ret = system($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');

$query = ""ls ' $tainted '"";

$ret = system($query);</Code>
    <Justification>The code uses shell_exec to read data from a file, then uses this data to construct an OS command using system(). If the contents of the file /tmp/tainted.txt are controlled by an attacker, they can inject arbitrary commands into the system() call. The single quotes around $tainted in the ""ls"" command do not prevent command injection in all cases.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__unserialize__func_FILTER-VALIDATION-email_filter__data-interpretation_simple_quote.php,"<?php







$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""' $tainted '"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""' $tainted '"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""' $tainted '"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code takes user-controlled data from $_POST['UserData'], unserializes it, and then uses it in an XPath query without proper sanitization. This allows an attacker to inject malicious XPath expressions, potentially extracting sensitive information or manipulating the XML data.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses unserialize() on user-provided data ($_POST['UserData']). This is extremely dangerous because unserialize() can be exploited to execute arbitrary code if the serialized data is malicious. There's no validation of the data before deserialization.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$xml = simplexml_load_file(""users.xml"");</Code>
    <Justification>simplexml_load_file() can return false if it fails to load the XML file (e.g., if the file doesn't exist or is malformed). The code doesn't check the return value, which could lead to a NULL pointer dereference or other errors if the code proceeds assuming $xml is a valid SimpleXMLElement object.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-778</Weakness>
    <Description>Insufficient Logging</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""' $tainted '"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""&lt;br /&gt;"" ;</Code>
    <Justification>The code does not log any security-relevant events, such as failed authentication attempts or XML injection attempts. Insufficient logging can make it difficult to detect and respond to security incidents.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__popen__no_sanitizing__multiple_select-concatenation.php,"<?php







$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);



$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent="". $tainted . "")"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,True,"$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent="". $tainted . "")"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent="". $tainted . "")"";</Code>
    <Justification>The code reads data from a file, '/tmp/tainted.txt', and directly uses this data in an SQL query without sanitization. This allows for SQL injection attacks.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The code uses hard-coded MySQL credentials ('mysql_user', 'mysql_password'). This is a critical security vulnerability, as these credentials could be exposed, granting unauthorized access to the database.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__proc_open__func_FILTER-VALIDATION-email_filter__name-interpretation_simple_quote.php,"<?php







$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query by directly embedding the '$tainted' variable without proper sanitization. This allows an attacker to inject arbitrary LDAP code, potentially leading to unauthorized access or modification of data.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind and ldap_search. If these functions fail, they return FALSE, and continuing without checking the return value can lead to unpredictable behavior or security vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind, and ldap_search. A failure in any of these functions could lead to a security vulnerability if not properly handled.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-404</Weakness>
    <Description>Improper Resource Shutdown or Release</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}</Code>
    <Justification>The code checks if `$process` is a resource before attempting to close the pipes and the process. However, there is no error handling in case `stream_get_contents($pipes[1])` fails, which could leave the pipe open. It is better to wrap stream_get_contents in a try-catch block or to check the return value before closing the pipe.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-404</Weakness>
    <Description>Improper Resource Shutdown or Release</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}</Code>
    <Justification>If `stream_get_contents($pipes[1])` fails, `$pipes[1]` might not be closed, potentially leading to resource exhaustion, which can be exploited for denial of service.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);</Code>
    <Justification>The code uses `proc_open` to execute the `more` command on a file named `/tmp/tainted.txt`. If an attacker can control the content of `/tmp/tainted.txt`, they might be able to inject shell commands that will be executed by the `more` command, leading to command injection. While the example shows a static filename, if this filename was derived from user input, it would be a direct command injection vulnerability. Even with a static filename, the contents can be modified.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-703</Weakness>
    <Description>Improper Check or Handling of Exceptional Conditions</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}</Code>
    <Justification>The code checks if `$process` is a resource, but it does not handle potential errors during `proc_open`, `fclose`, `stream_get_contents`, or `proc_close`. These functions can fail, and the code should include error handling to ensure that resources are properly released and unexpected conditions are managed.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-703</Weakness>
    <Description>Improper Check or Handling of Exceptional Conditions</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}</Code>
    <Justification>The code does not handle potential errors during `proc_open`, `fclose`, `stream_get_contents`, or `proc_close`. These functions could fail due to resource exhaustion, permission issues, or other reasons. Without proper error handling, the application may not behave as expected, potentially leading to security vulnerabilities or denial of service.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__shell_exec__func_mysql_real_escape_string__Use_untrusted_data_propertyValue_CSS-span_Style_Property_Value.php,"<!-- 
Unsafe sample
input : use shell_exec to cat /tmp/tainted.txt
SANITIZE : use of mysql_real_escape string
File : unsafe, use of untrusted data in a property value in a span tag(CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = mysql_real_escape_string($tainted);


echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;",True,True,"echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute a command constructed from external input without proper neutralization, leading to command injection vulnerability. An attacker could manipulate the input to execute arbitrary commands on the system.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;span style=\""color :"". checked_data .""\""&gt;Hey&lt;/span&gt;"" ;</Code>
    <Justification>The code uses untrusted data in a property value in a span tag(CSS). The input is not properly neutralized before being used in the HTML output, leading to a potential XSS vulnerability.  Although mysql_real_escape_string is used, it's intended for SQL, not HTML escaping.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code does not check the return value of `shell_exec`. If the command fails, `$tainted` might be null or contain an error message. This could lead to unexpected behavior later in the script.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$tainted = mysql_real_escape_string($tainted);</Code>
    <Justification>The code uses the `mysql_real_escape_string` function, which is deprecated. It should be replaced with `mysqli_real_escape_string` or `PDO::quote` when working with MySQL. Although deprecated, it is still included as a weakness.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__SESSION__func_pg_escape_string__userByCN-sprintf_%s_simple_quote.php,"<?php







$tainted = $_SESSION['UserData'];

$tainted = pg_escape_string($tainted);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $_SESSION['UserData'];

$tainted = pg_escape_string($tainted);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_SESSION['UserData'];

$tainted = pg_escape_string($tainted);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);</Code>
    <Justification>The code constructs an LDAP query using unsanitized data from $_SESSION['UserData']. Although pg_escape_string() is used, it is intended for PostgreSQL and does not provide adequate protection against LDAP injection. An attacker could manipulate the input to inject arbitrary LDAP commands, potentially bypassing authentication or accessing sensitive information.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);</Code>
    <Justification>The code attempts to bind to the LDAP server without providing any credentials. This might work if the LDAP server is configured for anonymous access, but it represents a security risk. If the LDAP server requires authentication, the bind operation will likely fail, or it might use a default, hardcoded credential, which is a severe security vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code does not check the return values of ldap_connect(), ldap_bind(), and ldap_search(). If any of these functions fail, the subsequent code may operate on invalid resources, leading to unexpected behavior or errors. Checking the return values allows the program to handle errors gracefully and prevent potential issues.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__proc_open__func_FILTER-CLEANING-special_chars_filter__username_text-sprintf_%s_simple_quote.php,"<?php







$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      

$query = sprintf(""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$query = sprintf(""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);</Code>
    <Justification>The code uses proc_open to execute a command. Although the command itself ('more /tmp/tainted.txt') is hardcoded, the vulnerability lies in the potential for command injection if the intent was to process user-supplied data within the command.  Even with a hardcoded command, incorrect usage can still lead to unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code constructs an XPath query using sprintf and then executes it using simplexml_load_file and xpath. The $query variable is derived from $tainted after sanitization. While filter_var with FILTER_SANITIZE_SPECIAL_CHARS provides some protection, it might not be sufficient to prevent all forms of XPath injection. An attacker could potentially craft input that bypasses the sanitization and modifies the intended XPath query, leading to unauthorized data access from the XML file.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}</Code>
    <Justification>The code calls proc_open, stream_get_contents, and proc_close, but does not check the return values of these functions for errors.  If any of these functions fail, the program may continue to execute with incorrect or uninitialized data, leading to unpredictable behavior or a crash. For example, if proc_open fails, $process will not be a resource, but the code proceeds to use it anyway.</Justification>
  </Issue>
  <Issue>
    <Type>Performance Efficiency</Type>
    <Weakness>CWE-1050</Weakness>
    <Description>Excessive Platform Resource Consumption within a Loop</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>  $tainted = stream_get_contents($pipes[1]);</Code>
    <Justification>stream_get_contents reads the entire remaining stream into a string. If the stream is large, it could lead to excessive memory consumption.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-772</Weakness>
    <Description>Missing Release of Resource after Effective Lifetime</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}</Code>
    <Justification>The code closes the pipes and the process, but there's no error handling to ensure that these resources are always released, even if stream_get_contents fails or throws an exception. A try-finally block would be appropriate here.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__shell_exec__func_preg_replace2__userByCN-sprintf_%s_simple_quote.php,"<?php







$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = preg_replace('/\W/si','',$tainted);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = preg_replace('/\W/si','',$tainted);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = preg_replace('/\W/si','',$tainted);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);</Code>
    <Justification>The code constructs an LDAP query using unsanitized input from the $tainted variable. Although a preg_replace is used, it only removes non-alphanumeric characters. An attacker could still inject malicious LDAP syntax that bypasses this sanitization, leading to LDAP injection vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to read data from a file. If the filename is controllable by an attacker this can lead to command injection.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__GET__func_preg_match-no_filtering__select_from-concatenation_simple_quote.php,"<?php







$tainted = $_GET['UserData'];

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = ""SELECT * FROM '"". $tainted . ""'"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,True,"$tainted = $_GET['UserData'];

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = ""SELECT * FROM '"". $tainted . ""'"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$tainted = $_GET['UserData'];

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = ""SELECT * FROM '"". $tainted . ""'"";</Code>
    <Justification>The code is vulnerable to SQL injection because it directly incorporates user-supplied data ($tainted) into the SQL query without proper sanitization or escaping. An attacker could manipulate the $tainted variable (obtained from $_GET['UserData']) to inject malicious SQL code, potentially compromising the database.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;</Code>
    <Justification>The mysql_connect() and mysql_select_db() functions' return values are not checked for errors. If the connection fails or the database selection fails, the script will continue to execute, potentially leading to unexpected behavior or errors later on.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){</Code>
    <Justification>The code uses the mysql_connect, mysql_select_db and mysql_query functions, which are deprecated.  These functions are known to have security vulnerabilities and are no longer maintained, which increases the risk of security breaches.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__proc_open__whitelist_using_array__Use_untrusted_data_propertyValue_CSS-double_Quoted_Property_Value.php,"<!-- 
Unsafe sample
input : use proc_open to read /tmp/tainted.txt
SANITIZE : use in_array to check if $tainted is in the white list
File : use of untrusted data in a double quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}

$legal_table = array(""safe1"", ""safe2"");
if (in_array($tainted, $legal_table, true)) {
  $tainted = $tainted;
} else {
  $tainted = $legal_table[0];
}


echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\"""". $tainted .""\"" ; }"" ;",True,True,"echo ""body { color :\"""". $tainted .""\"" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}</Code>
    <Justification>The code uses proc_open to execute a command, but the command string includes a hardcoded path to a file that may contain untrusted data. This could allow an attacker to inject malicious commands by manipulating the contents of /tmp/tainted.txt.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\"""". $tainted .""\"" ; }"" ;</Code>
    <Justification>The code outputs the variable $tainted directly into CSS without proper sanitization. If $tainted contains malicious CSS code, it could lead to Cross-Site Scripting (XSS) vulnerabilities.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__exec__func_http_build_query__Unsafe_use_untrusted_data-tag_Name.php,"<!-- 
Unsafe sample
input : use exec to execute the script /tmp/tainted.php and store the output in $tainted
SANITIZE : use of http_build_query
File : unsafe, use of untrusted data in an tag name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];

$tainted = http_build_query($tainted);


echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;",True,True,"echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>exec($script, $result, $return);</Code>
    <Justification>The code uses the `exec` function to execute an external script (`/tmp/tainted.php`). If the script's content is controlled by an attacker, they can inject arbitrary commands into the system, leading to command injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;"".  $tainted ."" href= \""/bob\"" /&gt;"" ;</Code>
    <Justification>The code uses the `$tainted` variable, which is derived from an external script's output, directly in an HTML tag name. Even with `http_build_query` used, it doesn't prevent malicious HTML/JavaScript code from being injected and executed in the user's browser, leading to XSS.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__POST__func_FILTER-CLEANING-magic_quotes_filter__Unsafe_use_untrusted_data-tag_Name.php,"<!-- 
Unsafe sample
input : get the field UserData from the variable $_POST
Uses a magic_quotes_filter via filter_var function
File : unsafe, use of untrusted data in an tag name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$tainted = $_POST['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      


echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;",True,True,"<?php
$tainted = $_POST['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      


echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;
?>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>&lt;?php
$tainted = $_POST['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      


echo ""&lt;"".  $tainted ."" href= \&quot;/bob\&quot; />"" ;
?&gt;</Code>
    <Justification>The code takes user-controlled input from $_POST['UserData'] and uses it directly within an HTML tag name without proper sanitization. Even though magic quotes are applied using filter_var, they are insufficient to prevent XSS in tag names. An attacker could inject arbitrary HTML attributes or even script code by manipulating the tag name, leading to cross-site scripting vulnerabilities.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-directGet__no_sanitizing__Use_untrusted_data_script-side_Quoted_Expr.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object
sanitize : none
File : use of untrusted data in one side of a quoted expression in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();




echo ""x='"". $tainted .""'"" ;
?>
</script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""x='"". $tainted .""'"" ;",True,True,"echo ""x='"". $tainted .""'"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""x='"". $tainted .""'"" ;</Code>
    <Justification>The code directly echoes user-controlled input ($tainted) into a script without proper neutralization, leading to a cross-site scripting (XSS) vulnerability.  An attacker could inject malicious script that will be executed in the victim's browser.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-Array__func_FILTER-CLEANING-email_filter__Use_untrusted_data_propertyValue_CSS-property_Value.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object, which store it in a array
Uses an email_filter via filter_var function
File : use of untrusted data in a property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""body { color :"". $tainted ."" ; }"" ;
?>
 </style> 
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :"". $tainted ."" ; }"" ;",True,True,"echo ""body { color :"". $tainted ."" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :"". $tainted ."" ; }"" ;</Code>
    <Justification>The code echoes user-controlled input ($tainted) directly into the CSS style without proper neutralization. Although the input is sanitized using FILTER_SANITIZE_EMAIL and validated using FILTER_VALIDATE_EMAIL, this is insufficient to prevent all forms of CSS injection. An attacker could still inject valid CSS that alters the appearance of the page in unintended ways.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__GET__no_sanitizing__username-sprintf_%s_simple_quote.php,"<?php







$tainted = $_GET['UserData'];



$query = sprintf(""user[username='%s']"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$tainted = $_GET['UserData'];

$query = sprintf(""user[username='%s']"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_GET['UserData'];

$query = sprintf(""user[username='%s']"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code uses user-provided data ($_GET['UserData']) to construct an XPath query without proper sanitization. This makes the application vulnerable to XML injection attacks, allowing attackers to potentially extract sensitive information or manipulate the XML data.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__fopen__ternary_white_list__Use_untrusted_data-body.php,"<!-- 
Unsafe sample
input : use fopen to read /tmp/tainted.txt and put the first line in $tainted
sanitize : use of ternary condition
File : use of untrusted data in the body
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo $tainted ;
?>
<h1>Hello World!</h1>
</body>
</html>
",echo $tainted ;,True,True,echo $tainted ;,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo $tainted ;</Code>
    <Justification>The variable $tainted, which is read from a file, is directly outputted into the HTML body without any sanitization. This could lead to Cross-Site Scripting (XSS) vulnerabilities if the file contains malicious code.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }</Code>
    <Justification>The code checks if `fgets` returns `false`, but doesn't differentiate between an actual error and reaching the end of the file. While the code handles the `false` return by assigning an empty string, it doesn't handle the case where the end of file is reached before reading any data correctly.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-434</Weakness>
    <Description>Unrestricted Upload of File with Dangerous Type</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$handle = @fopen(""/tmp/tainted.txt"", ""r"");</Code>
    <Justification>The script reads data from `/tmp/tainted.txt`. If an attacker can control the content of this file (e.g., by uploading a file to `/tmp` with the name `tainted.txt`), they can inject arbitrary code into the script. This is essentially an unrestricted file upload vulnerability because the script trusts the content of the file without validation.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-22</Weakness>
    <Description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$handle = @fopen(""/tmp/tainted.txt"", ""r"");</Code>
    <Justification>The script directly uses a hardcoded path `/tmp/tainted.txt`. While not directly a path traversal, if an attacker can influence the file system such that `/tmp/tainted.txt` is a symbolic link to a sensitive file, it could lead to information disclosure or other security issues.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-classicGet__func_FILTER-CLEANING-special_chars_filter__Unsafe_use_untrusted_data-attribute_Name.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object
Uses a special_chars_filter via filter_var function
File : unsafe, use of untrusted data in an attribute name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<body>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input;
  }

  public  function __construct(){
   $this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      


echo ""<div "". $tainted .""= bob />"" ;
?>
<h1>Hello World!</h1>
</div>
</body>
</html>","echo ""<div "". $tainted .""= bob />"" ;",True,True,"$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      


echo ""<div "". $tainted .""= bob />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      


echo ""&lt;div "". $tainted .""= bob />"" ;
</Code>
    <Justification>The code retrieves user input from $_GET['UserData'], sanitizes it using filter_var with FILTER_SANITIZE_SPECIAL_CHARS, and then uses this sanitized input directly within an HTML attribute name. While the sanitization attempts to mitigate XSS, it's insufficient to prevent all forms of injection because attribute names can still introduce vulnerabilities if they contain certain characters or sequences.  Even if the attribute value (= bob) is constant, a crafted attribute name could still cause unexpected behavior or execute JavaScript.  Using untrusted data in attribute names is generally unsafe.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__system__no_sanitizing__Use_untrusted_data_script-side_Quoted_Expr.php,"<!-- 
Unsafe sample
input : execute a ls command using the function system, and put the last result in $tainted
sanitize : none
File : use of untrusted data in one side of a quoted expression in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$tainted = system('ls', $retval);




echo ""x='"". $tainted .""'"" ;
?>
</script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""x='"". $tainted .""'"" ;",True,True,"echo ""x='"". $tainted .""'"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code executes an OS command ('ls') using the system() function. While the output is not directly used in a vulnerable way, executing external commands can be a security risk if the command itself or its arguments are derived from untrusted sources.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""x='"". $tainted .""'"" ;</Code>
    <Justification>The code echoes the potentially tainted output of the system command into a Javascript variable without proper sanitization. This could lead to XSS if the output of the 'ls' command contains characters that can be interpreted as Javascript code.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__shell_exec__ternary_white_list__Use_untrusted_data_propertyValue_CSS-property_Value.php,"<!-- 
Unsafe sample
input : use shell_exec to cat /tmp/tainted.txt
sanitize : use of ternary condition
File : use of untrusted data in a property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo ""body { color :"". $tainted ."" ; }"" ;
?>
 </style> 
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :"". $tainted ."" ; }"" ;",True,True,"echo ""body { color :"". $tainted ."" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute a command constructed with external input. If the file /tmp/tainted.txt contains malicious commands, they will be executed by the system.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :"". $tainted ."" ; }"" ;</Code>
    <Justification>The code echoes user-controlled input ($tainted) directly into the CSS style without proper sanitization. While a ternary operator is used to check the value, it only allows 'safe1' or 'safe2', which can still be exploited if they contain malicious CSS code.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__exec__ternary_white_list__Use_untrusted_data_script-doublequoted_String.php,"<!-- 
Unsafe sample
input : use exec to execute the script /tmp/tainted.php and store the output in $tainted
sanitize : use of ternary condition
File : use of untrusted data in a double quoted string in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo ""alert(\"""". $tainted .""\"")"" ;
?>
</script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""alert(\"""". $tainted .""\"")"" ;",True,True,"$tainted = $result[0];

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo ""alert(\"""". $tainted .""\"")"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];</Code>
    <Justification>The code uses exec() to execute a script with a hardcoded path. Even though the path is hardcoded, the executed script /tmp/tainted.php is an external resource. Its content and behavior are not controlled by the current script, thus any data provided by this script could be considered untrusted and lead to command injection if handled improperly later.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = $result[0];

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo ""alert(\"""". $tainted .""\"")"" ;</Code>
    <Justification>The code echoes the variable $tainted into a JavaScript alert function without proper sanitization. Although a ternary operator is used to restrict the value of $tainted to either 'safe1' or 'safe2', this is insufficient context aware output encoding to prevent XSS if for example, the context is HTML attribute. If the script /tmp/tainted.php outputs a value other than ""safe1"" or ""safe2"", the ternary operator will ensure one of those two values is used, but the original output should be properly sanitized.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__fopen__func_mysql_real_escape_string__Use_untrusted_data_propertyValue_CSS-span_Style_Property_Value.php,"<!-- 
Unsafe sample
input : use fopen to read /tmp/tainted.txt and put the first line in $tainted
SANITIZE : use of mysql_real_escape string
File : unsafe, use of untrusted data in a property value in a span tag(CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$tainted = mysql_real_escape_string($tainted);


echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;",True,True,"echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;span style=\""color :"". checked_data .""\"">Hey&lt;/span&gt;"" ;</Code>
    <Justification>The code uses a variable `checked_data` (which is not defined in the code) directly in the style attribute of a span tag. If `checked_data` contains user-controlled input, it could be exploited to inject arbitrary CSS or JavaScript code, leading to a Cross-Site Scripting (XSS) vulnerability. It's crucial to sanitize or escape user-provided data before embedding it into HTML attributes.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-457</Weakness>
    <Description>Use of uninitialized variable</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;span style=\""color :"". checked_data .""\"">Hey&lt;/span&gt;"" ;</Code>
    <Justification>The code attempts to use the variable `checked_data` without initializing it. This can lead to unpredictable behavior, as the value of `checked_data` will be whatever happens to be in memory at that location. This is not reliable.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$tainted = mysql_real_escape_string($tainted);</Code>
    <Justification>The code uses the `mysql_real_escape_string` function, which is deprecated. Using deprecated functions can lead to security vulnerabilities, as they may not be actively maintained or patched for newly discovered exploits. It is recommended to use `mysqli_real_escape_string` or `PDO` with prepared statements instead.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__popen__func_preg_replace__Use_untrusted_data_attribute-Double_Quote_Attr.php,"<!-- 
Unsafe sample
input : Uses popen to read the file /tmp/tainted.txt using cat command
SANITIZE : use of preg_replace
File : use of untrusted data in a doubled quote attribute
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

$tainted = preg_replace('/\'/', '', $tainted);


echo ""<div id=\"""". $tainted .""\"">content</div>"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<div id=\"""". $tainted .""\"">content</div>"" ;",True,True,"echo ""<div id=\"""". $tainted .""\"">content</div>"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;div id=\"""". $tainted .""\"">content&lt;/div&gt;"" ;</Code>
    <Justification>The code is vulnerable to Cross-Site Scripting (XSS). Although single quotes are removed using preg_replace, the $tainted variable, read from /tmp/tainted.txt, is directly inserted into the HTML without proper encoding or escaping.  This allows an attacker to inject arbitrary HTML or JavaScript code via the /tmp/tainted.txt file, which will then be executed in the victim's browser.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-22</Weakness>
    <Description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');</Code>
    <Justification>The code reads data from `/tmp/tainted.txt`. While the path is hardcoded, the vulnerability lies in the assumption that the file's content is safe. If an attacker can control the content of `/tmp/tainted.txt`, they can potentially inject malicious data that could lead to other vulnerabilities, such as command injection if the data is later used in a system call.  This is a form of resource injection where the resource identifier (/tmp/tainted.txt) isn't directly controlled by the user, but the resource content is, which can lead to security issues.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The code utilizes `popen`, `fread`, and `pclose` functions to read the content of a file. While not inherently insecure, there are often more modern and secure alternatives (e.g., `file_get_contents`) that may provide better resource management and error handling. Using older functions can sometimes indicate a lack of active maintenance and review, potentially overlooking more secure approaches.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The code does not check the return values of `popen`, `fread`, or `pclose`. If any of these functions fail (e.g., due to file permissions, resource limits, or other errors), the program will continue to execute with potentially invalid data, which could lead to unexpected behavior or vulnerabilities. Checking the return values allows for proper error handling and prevents the program from operating on bad data.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-561</Weakness>
    <Description>Dead code</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>&lt;head/&gt;</Code>
    <Justification>The head tag is empty. While it isn't a security issue, it may indicate that the code is not actively maintained and can be improved.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__system__func_htmlspecialchars__userByCN-sprintf_%s_simple_quote.php,"<?php







$tainted = system('ls', $retval);

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code uses the `system()` function to execute an external command (`ls`). This is vulnerable to command injection if the command or its arguments are influenced by external input. Although the output of `ls` is later sanitized, the initial execution of the command itself poses a risk.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);</Code>
    <Justification>The code constructs an LDAP query using `sprintf()` and includes user-controlled input (`$tainted`) without proper sanitization. While `htmlspecialchars()` is used, it might not be sufficient to prevent LDAP injection attacks, as it primarily focuses on HTML-related characters and may not neutralize all characters that have special meaning in LDAP queries. Depending on the LDAP implementation, characters like `*` could still be used for malicious purposes.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code does not check the return values of `ldap_bind()` and `ldap_search()`. If these functions fail, they may return FALSE or an error code. Failing to check the return values can lead to subsequent operations using invalid resources or data, potentially causing unexpected behavior or security vulnerabilities.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__proc_open__no_sanitizing__multiple_AS-concatenation_simple_quote.php,"<?php







$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}



$query = ""SELECT Trim(a.FirstName) & ' ' & Trim(a.LastName) AS employee_name, a.city, a.street & (' ' +a.housenum) AS address FROM Employees AS a  WHERE a.supervisor='"". $tainted . ""'"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = ""SELECT Trim(a.FirstName) & ' ' & Trim(a.LastName) AS employee_name, a.city, a.street & (' ' +a.housenum) AS address FROM Employees AS a  WHERE a.supervisor='"". $tainted . ""'"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""SELECT Trim(a.FirstName) &amp; ' ' &amp; Trim(a.LastName) AS employee_name, a.city, a.street &amp; (' ' +a.housenum) AS address FROM Employees AS a  WHERE a.supervisor='"". $tainted . ""'"";</Code>
    <Justification>The code is vulnerable to SQL injection because it directly incorporates the `$tainted` variable (read from a file) into an SQL query without proper sanitization. An attacker could manipulate the contents of `/tmp/tainted.txt` to inject malicious SQL code, potentially compromising the database.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;

$res = mysql_query($query); </Code>
    <Justification>The code uses the `mysql_connect` and `mysql_query` functions, which are deprecated and known to have security vulnerabilities.  It is recommended to use `mysqli` or `PDO` instead.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;

$res = mysql_query($query); </Code>
    <Justification>The code does not check the return values of `mysql_connect`, `mysql_select_db`, and `mysql_query`. If any of these functions fail, the script will continue to execute, potentially leading to unexpected behavior or errors.  Error handling should be implemented to ensure the script gracefully handles database connection or query failures.</Justification>
  </Issue>
  <Issue>
    <Type>Performance Efficiency</Type>
    <Weakness>CWE-1072</Weakness>
    <Description>Data Resource Access without Use of Connection Pooling</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); </Code>
    <Justification>The code establishes a new database connection for each script execution.  Using connection pooling would improve performance by reusing existing connections, reducing the overhead of establishing new connections repeatedly.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__proc_open__func_FILTER-VALIDATION-email_filter__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : use proc_open to read /tmp/tainted.txt
Flushes content of $sanitized if the filter email_filter is not applied
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",True,True,"if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""window.setInterval('"". $tainted .""');""","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""window.setInterval('"". $tainted .""');""</Code>
    <Justification>The code uses user-controlled data ($tainted) to construct a JavaScript code snippet that is then embedded in the HTML page. If the $tainted variable contains malicious JavaScript code, it will be executed in the user's browser, leading to a Cross-Site Scripting (XSS) vulnerability. Even with the email validation, setting $tainted to """" in the else statement does not prevent XSS if the email validation fails but $sanitized still contains malicious code. Furthermore, the initial source of $tainted comes from a file, so it cannot be trusted.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}</Code>
    <Justification>The code uses `proc_open` to execute the `more` command on the file `/tmp/tainted.txt`. Although the command itself is hardcoded, the content of the file `/tmp/tainted.txt` is treated as input. If the file contains shell metacharacters, it could lead to command injection.</Justification>
  </Issue>
</Issues>
```"
CWE-78,src/CWE_78__shell_exec__func_preg_match-no_filtering__cat-sprintf_%s_simple_quote.php,"<?php







$tainted = shell_exec('cat /tmp/tainted.txt');

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = sprintf(""cat '%s'"", $tainted);


$ret = system($query);


?>",$ret = system($query);,True,False,$tainted = shell_exec('cat /tmp/tainted.txt');,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to read data from a file, which could be controlled by an attacker. This data is then used in a system call without proper sanitization, leading to a potential command injection vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""cat '%s'"", $tainted);


$ret = system($query);</Code>
    <Justification>The code constructs a command using sprintf with user-controlled input ($tainted) and executes it using system.  Even though the input is enclosed in single quotes, this is insufficient to prevent command injection in all cases, especially if the input contains single quotes themselves. This is a critical vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$ret = system($query);</Code>
    <Justification>The code does not check the return value of the system() function. If the command fails to execute, the script will not be aware of the failure, potentially leading to unexpected behavior or a denial of service.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__POST__func_urlencode__Use_untrusted_data_propertyValue_CSS-double_Quoted_Property_Value.php,"<!-- 
Unsafe sample
input : get the field UserData from the variable $_POST
SANITIZE : use of urlencode
File : use of untrusted data in a double quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = $_POST['UserData'];

$tainted = urlencode($tainted);


echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\"""". $tainted .""\"" ; }"" ;",True,True,"echo ""body { color :\"""". $tainted .""\"" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\"""". $tainted .""\"" ; }"" ;</Code>
    <Justification>The code uses user-controlled input ($tainted) in a CSS property value. While urlencode is used, it is not sufficient to prevent XSS because it does not neutralize characters that are special in CSS contexts.  An attacker could inject malicious CSS code.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__fopen__func_FILTER-CLEANING-email_filter__username-concatenation_simple_quote.php,"<?php







$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""user[username='"". $tainted . ""']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-643</Weakness>
    <Description>Improper Neutralization of Data within XPath Expressions ('XPath Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""user[username='"". $tainted . ""']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code constructs an XPath query using unsanitized input from the $tainted variable. Even though the code attempts to sanitize the input using FILTER_SANITIZE_EMAIL and FILTER_VALIDATE_EMAIL, these filters are insufficient to prevent XPath injection attacks. An attacker could craft a malicious email address that includes XPath metacharacters, allowing them to manipulate the query and potentially extract sensitive data or perform unauthorized actions. For example, an email like 'a\' or \'1\'=\'1' could be used to bypass authentication.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__system__func_rawurlencode__Unsafe_use_untrusted_data-comment.php,"<!-- 
Unsafe sample
input : execute a ls command using the function system, and put the last result in $tainted
SANITIZE : use of rawurlencode
File : unsafe, use of untrusted data in a comment
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<!--
<?php
$tainted = system('ls', $retval);

$tainted = rawurlencode($tainted);


echo $tainted ;
?>
-->
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"echo $tainted ;
?>
-->
</head>
<body>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code uses the `system()` function to execute the `ls` command. While the output of the command is not directly used in a vulnerable way in this snippet, the execution of an external command itself can be a security concern if the context or environment in which it's executed is not properly controlled. An attacker could potentially influence the environment or command execution in unexpected ways.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>
echo $tainted ;
?>
-->
</head>
<body></Code>
    <Justification>The output of the `rawurlencode` function is directly echoed into an HTML comment. While HTML comments are not directly rendered by the browser, an attacker might be able to extract the comment's content through other means (e.g., server-side code) and use it for malicious purposes.  The `rawurlencode` offers some protection, but isn't a complete XSS mitigation strategy.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__object-classicGet__func_htmlentities__not_name-interpretation_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input;
  }

  public  function __construct(){
   $this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = ""!name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = ""!name=' $tainted '"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = ""!name=' $tainted '"";</Code>
    <Justification>The code retrieves user input from $_GET['UserData'] and uses it in an LDAP query without proper sanitization. Although htmlentities is used, it may not be sufficient to prevent LDAP injection attacks. Special characters in the input could still be interpreted by the LDAP server, potentially allowing an attacker to modify the query's meaning or extract sensitive information.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind, and ldap_search. If any of these functions fail, the script will continue to execute, potentially leading to unexpected behavior or security vulnerabilities. For example, if ldap_connect fails, $ds will be false, and subsequent calls to ldap_bind, ldap_search, and ldap_close will result in errors.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-1051</Weakness>
    <Description>Initialization with Hard-Coded Network Resource Configuration Data</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost"");</Code>
    <Justification>The code uses a hard-coded value (""localhost"") for the LDAP server address. This makes the code less flexible and harder to maintain. If the LDAP server address changes, the code will need to be modified in multiple places. It would be better to store the LDAP server address in a configuration file or environment variable.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__GET__no_sanitizing__Unsafe_use_untrusted_data-style.php,"<!-- 
Unsafe sample
input : reads the field UserData from the variable $_GET
sanitize : none
File : unsafe, use of untrusted data in CSS
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = $_GET['UserData'];




echo $tainted ;
?>
</style>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"<style>
<?php
$tainted = $_GET['UserData'];




echo $tainted ;
?>
</style>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>
&lt;style&gt;
&lt;?php
$tainted = $_GET['UserData'];




echo $tainted ;
?&gt;
&lt;/style&gt;</Code>
    <Justification>The code directly echoes user-supplied input ($_GET['UserData']) into a &lt;style&gt; block without any sanitization. This allows an attacker to inject arbitrary CSS or even JavaScript (via CSS expressions in older browsers), leading to Cross-Site Scripting (XSS).</Justification>
  </Issue>
</Issues>
```"
