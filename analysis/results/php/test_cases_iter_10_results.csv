Test Case Weakness,Test Case File,Test Case Code,Test Case Line,LLM Hit CWE,LLM Hit Code,LLM Code,LLM Complete Response
CWE-89,src/CWE_89__backticks__no_sanitizing__multiple_select-interpretation.php,"<?php







$tainted = `cat /tmp/tainted.txt`;



$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent= $tainted )"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent= $tainted )"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code uses backticks to execute an external command ('cat /tmp/tainted.txt').  This is equivalent to shell_exec() and can lead to command injection if the filename or path is influenced by an attacker, even indirectly.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent= $tainted )"";</Code>
    <Justification>The code directly embeds the `$tainted` variable (which comes from an external source via command execution) into an SQL query without any sanitization. This makes the application vulnerable to SQL injection attacks.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The code does not check the return value of `mysql_connect`. If the connection fails, `$conn` will be false, and subsequent operations will lead to errors.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$res = mysql_query($query);</Code>
    <Justification>The code does not check the return value of `mysql_query`. If the query fails, `$res` will be false, and subsequent operations will lead to errors.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The `mysql_connect` function is deprecated and should not be used in new code. It's better to use `mysqli` or `PDO` for database connections.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>mysql_select_db('dbname') ;</Code>
    <Justification>The `mysql_select_db` function is deprecated and should not be used in new code. It's better to use `mysqli` or `PDO` for database operations.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$res = mysql_query($query);</Code>
    <Justification>The `mysql_query` function is deprecated and should not be used in new code. It's better to use `mysqli` or `PDO` for database queries.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>while($data =mysql_fetch_array($res)){</Code>
    <Justification>The `mysql_fetch_array` function is deprecated and should not be used in new code. It's better to use `mysqli` or `PDO` for fetching database results.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>mysql_close($conn);</Code>
    <Justification>The `mysql_close` function is deprecated and should not be used in new code. It's better to use `mysqli` or `PDO` for closing database connections.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__SESSION__no_sanitizing__multiple_select-interpretation.php,"<?php







$tainted = $_SESSION['UserData'];



$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent= $tainted )"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$tainted = $_SESSION['UserData'];\n\n\n\n$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent= $tainted )"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_SESSION['UserData'];\n\n\n\n$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent= $tainted )"";</Code>
    <Justification>The code directly embeds the value of $_SESSION['UserData'] into an SQL query without proper sanitization or escaping. If $_SESSION['UserData'] contains malicious SQL code, it could lead to SQL injection, allowing an attacker to potentially read, modify, or delete data in the database.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); \nmysql_select_db('dbname') ;</Code>
    <Justification>The code uses the mysql_connect and mysql_select_db functions, which are deprecated. These functions are no longer maintained and have known security vulnerabilities.  It is recommended to use MySQLi or PDO_MySQL instead.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); \nmysql_select_db('dbname') ;</Code>
    <Justification>The code does not check the return values of mysql_connect and mysql_select_db. If either of these functions fail, the script will continue to execute, potentially leading to errors or unexpected behavior. The return values should be checked to ensure that the database connection was successfully established and the database was successfully selected.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-391</Weakness>
    <Description>Unchecked Error Condition</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$res = mysql_query($query); </Code>
    <Justification>The code does not check the return value of mysql_query. If the query fails, mysql_query will return FALSE, but the script will continue to execute, potentially leading to errors or unexpected behavior. The return value should be checked to ensure that the query was successfully executed.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-1051</Weakness>
    <Description>Initialization with Hard-Coded Network Resource Configuration Data</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); </Code>
    <Justification>The database connection details (host, username, password) are hard-coded directly into the script. This makes it difficult to change the database configuration without modifying the code.  It is better to store these settings in a configuration file or environment variables.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__object-indexArray__no_sanitizing__username-interpretation_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input['realOne'];
  }

  public  function __construct(){
    $this->input = array();
    $this->input['test']= 'safe' ;
    $this->input['realOne']= $_GET['UserData'] ;
    $this->input['trap']= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();



$query = ""user[username=' $tainted ']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$query = ""user[username=' $tainted ']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""user[username=' $tainted ']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code is vulnerable to XML injection because it directly incorporates unsanitized user input ($tainted) into an XPath query. An attacker could manipulate the input to alter the query's logic and potentially extract sensitive information or cause denial of service.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__array-GET__func_addslashes__Use_untrusted_data_propertyValue_CSS-double_Quoted_Property_Value.php,"<!-- 
Unsafe sample
input : get the $_GET['userData'] in an array
sanitize : use of the function addslashes
File : use of untrusted data in a double quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;

$tainted = addslashes($tainted);


echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\"""". $tainted .""\"" ; }"" ;",True,True,"echo ""body { color :\"""". $tainted .""\"" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\"""". $tainted .""\"" ; }"" ;</Code>
    <Justification>The code echoes user-controlled input ($tainted) into the CSS style without proper output encoding, which could allow an attacker to inject malicious CSS or JavaScript code. While addslashes is used, it is not sufficient to prevent XSS in CSS context.  CSS Injection may lead to information disclosure or defacement of the website.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__array-GET__func_FILTER-CLEANING-email_filter__Use_untrusted_data_script-quoted_Event_Handler.php,"<!-- 
Unsafe sample
input : get the $_GET['userData'] in an array
Uses an email_filter via filter_var function
File : use of untrusted data in a quoted event handler in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""<div onmouseover=\""x='"". $tainted .""'\>"";
?>
<h1>Hello World!</h1>
</div>
</body>
</html>","echo ""<div onmouseover=\""x='"". $tainted .""'\>"";",True,True,"echo ""<div onmouseover=\""x='"". $tainted .""'\>"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;div onmouseover=\""x='"". $tainted .""'\&gt;"";</Code>
    <Justification>The code echoes user-controlled data ($tainted) into an HTML attribute (onmouseover) within a &lt;script&gt; tag. Even with email sanitization, an attacker could inject arbitrary JavaScript code via crafted input like 'alert(1)@'. This would lead to cross-site scripting (XSS) when the mouse hovers over the div.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__popen__func_htmlspecialchars__userByMail-interpretation_simple_quote.php,"<?php







$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""(&(objectCategory=person)(objectClass=user)(mail=' $tainted '))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,False,"$query = ""(&(objectCategory=person)(objectClass=user)(mail=' $tainted '))"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');</Code>
    <Justification>The code uses popen to execute a command. The file '/tmp/tainted.txt' may contain user-controlled data, leading to command injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""(&(objectCategory=person)(objectClass=user)(mail=' $tainted '))"";</Code>
    <Justification>The code constructs an LDAP query by embedding user-controlled data ($tainted) directly into the query string without proper sanitization. This makes the code vulnerable to LDAP injection attacks.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__POST__func_htmlentities__Unsafe_use_untrusted_data-tag_Name.php,"<!-- 
Unsafe sample
input : get the field UserData from the variable $_POST
sanitize : use of the function htmlentities. Sanitizes the query but has a high chance to produce unexpected results
File : unsafe, use of untrusted data in an tag name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$tainted = $_POST['UserData'];

$tainted = htmlentities($tainted, ENT_QUOTES);


echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;",True,True,"<body>
<?php
$tainted = $_POST['UserData'];

$tainted = htmlentities($tainted, ENT_QUOTES);


echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;
?>
<h1>Hello World!</h1>
</body>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code><body>
<?php
$tainted = $_POST['UserData'];

$tainted = htmlentities($tainted, ENT_QUOTES);


echo ""&lt;"".  $tainted ."" href= \&quot;/bob\&quot; /&gt;"" ;
?>
<h1>Hello World!</h1>
</body></Code>
    <Justification>The code takes user input from $_POST['UserData'], sanitizes it using htmlentities, and then uses it directly within an HTML tag name. While htmlentities helps prevent XSS in attribute values or element content, it's not sufficient to prevent XSS when the tainted data is used as a tag name.  An attacker could inject arbitrary HTML tags by manipulating the UserData parameter, potentially leading to XSS.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__popen__func_FILTER-VALIDATION-email_filter__not_name-sprintf_%s_simple_quote.php,"<?php







$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The code uses popen to execute a command to read a file, potentially injecting arbitrary commands if the file name is derived from an untrusted source.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query using user-controlled input ($tainted) without proper sanitization, leading to LDAP injection vulnerabilities.  The sprintf function is used, but it's not encoding the string for LDAP.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind, and ldap_search. Failure to check these return values could lead to unexpected behavior and potential vulnerabilities if these functions fail.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__backticks__func_FILTER-CLEANING-email_filter__select_from-interpretation_simple_quote.php,"<?php







$tainted = `cat /tmp/tainted.txt`;

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""SELECT * FROM ' $tainted '"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = ""SELECT * FROM ' $tainted '"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$query = ""SELECT * FROM ' $tainted '"";</Code>
    <Justification>The code directly incorporates a tainted variable ($tainted) into an SQL query without proper sanitization or parameterization, leading to SQL injection vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>
$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res = mysql_query($query); 
</Code>
    <Justification>The code uses the 'mysql_connect' and 'mysql_query' functions, which are deprecated.  Using these functions can create security vulnerabilities and is not recommended.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>
$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res = mysql_query($query); 
</Code>
    <Justification>The code does not check the return values of 'mysql_connect', 'mysql_select_db', and 'mysql_query'. Failure to check these return values can lead to unhandled errors and unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-22</Weakness>
    <Description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code retrieves the value of $tainted using the `cat` command, which could allow an attacker to read arbitrary files on the system if they can control the contents of `/tmp/tainted.txt`. Even though `filter_var` is called, there is still a security risk.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code uses backticks to execute a shell command (`cat /tmp/tainted.txt`). If an attacker can control any part of this string, they can inject arbitrary commands. Although `/tmp/tainted.txt` mitigates risk, it's not 100% secure.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-561</Weakness>
    <Description>Dead code</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""&lt;br /&gt;"" ;
} </Code>
    <Justification>The `while` loop might not execute if `$res` is false (e.g., due to an SQL error).  While not strictly ""dead code,"" if there are query errors, it makes this block unreachable. The `mysql_fetch_array()` function expects a resource, it may return null and potentially stop the program if the query is bad.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__unserialize__func_htmlspecialchars__userByMail-sprintf_%s_simple_quote.php,"<?php







$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses unserialize() on $_POST['UserData'], which allows for arbitrary code execution if the data is not carefully controlled, due to its capability to reconstruct objects. This is a major security vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);</Code>
    <Justification>Even after using htmlspecialchars, the $tainted variable is directly incorporated into the LDAP query using sprintf. htmlspecialchars is not sufficient to prevent LDAP injection because it primarily escapes characters relevant to HTML, not LDAP.  LDAP injection can allow attackers to bypass authentication or extract sensitive information.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind, and ldap_search. If any of these functions fail, the script will continue to execute, potentially leading to unexpected behavior or security vulnerabilities, as later operations might be performed on invalid resources.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-1051</Weakness>
    <Description>Initialization with Hard-Coded Network Resource Configuration Data</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost"");</Code>
    <Justification>The LDAP server address ""localhost"" is hard-coded. This reduces maintainability because any change to the LDAP server address requires modifying the code directly instead of using a configuration file or environment variable.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-1051</Weakness>
    <Description>Initialization with Hard-Coded Network Resource Configuration Data</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The LDAP base DN ""o=My Company, c=US"" is hard-coded. This reduces maintainability because any change to the base DN requires modifying the code directly instead of using a configuration file or environment variable.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__fopen__func_preg_replace__not_name-concatenation_simple_quote.php,"<?php







$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$tainted = preg_replace('/\'/', '', $tainted);

$query = ""!name='"". $tainted . ""'"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,False,"$query = ""!name='"". $tainted . ""'"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""!name='"". $tainted . ""'"";</Code>
    <Justification>The code constructs an LDAP query by directly concatenating user-controlled data ($tainted) into the query string. Although the code attempts to sanitize the input by removing single quotes, this is insufficient to prevent LDAP injection attacks. An attacker can manipulate the input to inject arbitrary LDAP commands, potentially leading to unauthorized access to sensitive information or modification of LDAP data.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code doesn't check the return values of ldap_connect, ldap_bind and ldap_search. If any of these functions fail, they return FALSE, and the script will continue execution with an invalid resource, leading to unpredictable results or errors, thus impacting the reliability of the software.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-1051</Weakness>
    <Description>Initialization with Hard-Coded Network Resource Configuration Data</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost"");</Code>
    <Justification>The code initializes the LDAP connection with a hard-coded hostname ""localhost"". This makes the code less flexible and harder to maintain, as any changes to the LDAP server address would require modifying the source code directly. Using a configuration file or environment variable would improve maintainability.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__object-indexArray__func_FILTER-CLEANING-email_filter__username-sprintf_%s_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input['realOne'];
  }

  public  function __construct(){
    $this->input = array();
    $this->input['test']= 'safe' ;
    $this->input['realOne']= $_GET['UserData'] ;
    $this->input['trap']= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = sprintf(""user[username='%s']"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-643</Weakness>
    <Description>Improper Neutralization of Data within XPath Expressions ('XPath Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""user[username='%s']"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code constructs an XPath query using user-controlled data ($tainted) without proper neutralization. This allows an attacker to inject malicious XPath expressions, potentially leading to data leakage or unauthorized access to information.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__SESSION__func_FILTER-VALIDATION-number_int_filter__Use_untrusted_data_propertyValue_CSS-quoted_Property_Value.php,"<!-- 
Unsafe sample
input : get the UserData field of $_SESSION
Flushes content of $sanitized if the filter number_int_filter is not applied
File : unsafe, use of untrusted data in a quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = $_SESSION['UserData'];

if (filter_var($sanitized, FILTER_VALIDATE_INT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""body { color :\'"". $tainted .""\' ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\'"". $tainted .""\' ; }"" ;",True,True,"echo ""body { color :\'"". $tainted .""\' ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\'"". $tainted .""\' ; }"" ;</Code>
    <Justification>The code takes user input from $_SESSION['UserData'] and uses it directly in the output without proper sanitization, leading to a cross-site scripting (XSS) vulnerability.  If an attacker can control the value of $_SESSION['UserData'], they can inject arbitrary HTML or JavaScript into the web page.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_INT))</Code>
    <Justification>The code uses filter_var without checking the result of the session variable, this is an unchecked return value. The code continues to use the variable value without knowing whether it has a valid state or not.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__SESSION__func_preg_replace__not_name-interpretation_simple_quote.php,"<?php







$tainted = $_SESSION['UserData'];

$tainted = preg_replace('/\'/', '', $tainted);

$query = ""!name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$query = ""!name=' $tainted '"";

$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""!name=' $tainted '"";

$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query using unsanitized user input ($tainted). Although the code attempts to remove single quotes using preg_replace, this is insufficient to prevent LDAP injection. An attacker could still inject arbitrary LDAP syntax by providing input that manipulates the query logic.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);</Code>
    <Justification>The code connects to the LDAP server without specifying any username or password for binding ($r=ldap_bind($ds);). It is unsafe because it is an anonymous authentication, which allows anyone to connect to the LDAP server without any credentials. Although not explicitly hardcoded, implicitly relying on default credentials or configurations can be considered a vulnerability.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__fopen__func_FILTER-CLEANING-full_special_chars_filter__Use_untrusted_data_propertyValue_CSS-double_Quoted_Property_Value.php,"<!-- 
Unsafe sample
input : use fopen to read /tmp/tainted.txt and put the first line in $tainted
Uses a full_special_chars_filter via filter_var function
File : use of untrusted data in a double quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     


echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\"""". $tainted .""\"" ; }"" ;",True,True,"echo ""body { color :\"""". $tainted .""\"" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\"""". $tainted .""\"" ; }"" ;</Code>
    <Justification>The code constructs a CSS style attribute with unsanitized data from $tainted. While the code uses FILTER_SANITIZE_FULL_SPECIAL_CHARS, which should provide some protection, it may not be sufficient in all contexts, especially considering the complexity of CSS parsing. An attacker might be able to inject malicious CSS or even JavaScript through CSS injection, depending on the browser and configuration.  Using the tainted data directly in a CSS context without proper escaping might lead to Cross-Site Scripting (XSS).</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if(($tainted = fgets($handle, 4096)) == false)</Code>
    <Justification>The code checks if fgets returns false (an error or end of file), but doesn't check if fopen fails to open the file. A failure in fopen could lead to unexpected behavior later in the script.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__shell_exec__func_http_build_query__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : use shell_exec to cat /tmp/tainted.txt
SANITIZE : use of http_build_query
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = http_build_query($tainted);


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",True,True,"echo ""window.setInterval('"". $tainted .""');""","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute a command based on user-controlled input, which can lead to command injection if the input is not properly sanitized.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""window.setInterval('"". $tainted .""');""</Code>
    <Justification>The code echoes tainted data into javascript code, inside setInterval which can lead to Cross-site Scripting.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-134</Weakness>
    <Description>Use of Externally-Controlled Format String</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$tainted = http_build_query($tainted);


echo ""window.setInterval('"". $tainted .""');""</Code>
    <Justification>Although http_build_query is used, the output is used as a parameter for setInterval, this can lead to format string vulnerability</Justification>
  </Issue>
</Issues>
```"
CWE-78,src/CWE_78__object-directGet__no_sanitizing__cat-interpretation_simple_quote.php,"<?php







class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();



$query = ""cat ' $tainted '"";


$ret = system($query);


?>",$ret = system($query);,True,True,"$query = ""cat ' $tainted '"";


$ret = system($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$query = ""cat ' $tainted '"";


$ret = system($query);</Code>
    <Justification>The code constructs an OS command using external input ($tainted) without proper neutralization of special elements. This allows an attacker to inject arbitrary OS commands by manipulating the UserData GET parameter. The system() function then executes this potentially malicious command, leading to command injection.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__POST__no_sanitizing__multiple_select-sprintf_%s_simple_quote.php,"<?php







$tainted = $_POST['UserData'];



$query = sprintf(""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent='%s')"", $tainted);


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,True,"$tainted = $_POST['UserData'];

$query = sprintf(""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent='%s')"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_POST['UserData'];

$query = sprintf(""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent='%s')"", $tainted);</Code>
    <Justification>The code is vulnerable to SQL injection because it uses sprintf to directly embed user-supplied data from $_POST['UserData'] into an SQL query without proper sanitization or escaping.  An attacker could inject malicious SQL code via the UserData POST parameter, potentially compromising the database.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res = mysql_query($query); </Code>
    <Justification>The code uses the `mysql_connect` and `mysql_query` functions, which are deprecated and considered obsolete. These functions are no longer maintained and have known security vulnerabilities. It is recommended to use mysqli or PDO instead.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__system__func_FILTER-CLEANING-magic_quotes_filter__Use_untrusted_data-body.php,"<!-- 
Unsafe sample
input : execute a ls command using the function system, and put the last result in $tainted
Uses a magic_quotes_filter via filter_var function
File : use of untrusted data in the body
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$tainted = system('ls', $retval);

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      


echo $tainted ;
?>
<h1>Hello World!</h1>
</body>
</html>
",echo $tainted ;,True,True,echo $tainted ;,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code uses the `system()` function to execute a command. While the command itself ('ls') is hardcoded, the output of this command is then used later in the script. If the environment or file system is compromised such that 'ls' returns malicious content, this could lead to a command injection vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;</Code>
    <Justification>The use of `FILTER_SANITIZE_MAGIC_QUOTES` with `filter_var` is an attempt to sanitize input. However, `magic_quotes_gpc` and related functions are deprecated and have been removed from PHP 7.4 onwards. This means this sanitation is ineffective and potentially gives a false sense of security.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo $tainted ;</Code>
    <Justification>The code directly echoes the `$tainted` variable to the output without proper encoding. If the `system('ls')` command returns data containing HTML or JavaScript, it could be executed in the user's browser, leading to Cross-Site Scripting (XSS).</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__popen__no_sanitizing__userByCN-sprintf_%s_simple_quote.php,"<?php







$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);



$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,False,"$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The code uses popen to execute a command constructed with hardcoded parts and a file path. While the command itself is hardcoded, popen can still be dangerous if the path to the file is controllable by an attacker. There are no checks to ensure it is safe.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);</Code>
    <Justification>The code constructs an LDAP query using sprintf and incorporates data read from a file. If the file contains malicious characters, it is vulnerable to LDAP injection.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__SESSION__func_addslashes__Use_untrusted_data_attribute-unquoted_Attr.php,"<!-- 
Unsafe sample
input : get the UserData field of $_SESSION
sanitize : use of the function addslashes
File : use of untrusted data in a unquoted attribute
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$tainted = $_SESSION['UserData'];

$tainted = addslashes($tainted);


echo ""<div id="". $tainted ."">content</div>"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<div id="". $tainted ."">content</div>"" ;",True,True,"echo ""<div id="". $tainted ."">content</div>"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;div id="". $tainted ."">content&lt;/div>"" ;</Code>
    <Justification>The code uses unsanitized session data directly in HTML output within an unquoted attribute, leading to a potential XSS vulnerability. While addslashes is used, it only escapes certain characters and doesn't prevent XSS in this context.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-22</Weakness>
    <Description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;div id="". $tainted ."">content&lt;/div>"" ;</Code>
    <Justification>Although less likely, if the session data contains characters allowing directory traversal (e.g., ""..""), it could potentially be exploited to manipulate the HTML structure or possibly server-side file access (though highly dependent on the server configuration and context where the HTML is used).</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-directGet__func_FILTER-CLEANING-number_float_filter__Use_untrusted_data_propertyValue_CSS-quoted_Property_Value.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object
Uses a number_float_filter via filter_var function
File : unsafe, use of untrusted data in a quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_NUMBER_FLOAT);
if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""body { color :\'"". $tainted .""\' ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\'"". $tainted .""\' ; }"" ;",True,True,"echo ""body { color :\'"". $tainted .""\' ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\'"". $tainted .""\' ; }"" ;</Code>
    <Justification>The code uses unfiltered input $tainted within a CSS style, which is output directly to the browser. This allows for potential CSS injection and cross-site scripting (XSS) if the input contains malicious code.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-23</Weakness>
    <Description>Relative Path Traversal</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>return $_GET['UserData'] ;</Code>
    <Justification>The application is taking user-supplied data from the GET parameter 'UserData'.  While this specific example sanitizes for number_float, other parts of the application could use this same, raw input unsafely. Even with sanitization later, it is better to sanitize as close to input as possible.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__object-directGet__func_mysql_real_escape_string__multiple_select-interpretation.php,"<?php







class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();

$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent= $tainted )"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,True,"$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent= $tainted )"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent= $tainted )"";</Code>
    <Justification>Even after using mysql_real_escape_string, the code is still vulnerable to SQL Injection because the entire query is not properly parameterized. mysql_real_escape_string escapes potentially harmful characters, but it does not prevent all types of SQL injection, especially when used directly within a numerical context or complex query structures.  The $tainted variable is directly embedded into the SQL query, allowing for potential manipulation by a malicious user.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;

$res = mysql_query($query); </Code>
    <Justification>The code uses the `mysql_connect` and `mysql_query` functions, which are part of the deprecated `mysql` extension. This extension is no longer maintained and has been removed in newer versions of PHP. Using deprecated functions can lead to security vulnerabilities and is not recommended.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;

$res = mysql_query($query); </Code>
    <Justification>The code does not check the return values of `mysql_connect`, `mysql_select_db`, or `mysql_query`. If any of these functions fail, they will return `false`, but the code will continue to execute, potentially leading to errors or unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-1051</Weakness>
    <Description>Initialization with Hard-Coded Network Resource Configuration Data</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); </Code>
    <Justification>The code initializes the database connection with hard-coded credentials ('localhost', 'mysql_user', 'mysql_password'). Hard-coding credentials directly in the code makes it difficult to manage and update them, and increases the risk of exposing sensitive information. These should be stored in configuration files or environment variables.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__exec__no_sanitizing__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : use exec to execute the script /tmp/tainted.php and store the output in $tainted
sanitize : none
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];




echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",True,True,"echo ""window.setInterval('"". $tainted .""');"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""window.setInterval('"". $tainted .""');"" ;</Code>
    <Justification>The code injects unsanitized data from $tainted into JavaScript code within a web page. The value of $tainted is derived from the output of an external script, which is completely untrusted and attacker-controlled. The injected code is then executed in the user's browser, making the application vulnerable to Cross-Site Scripting (XSS). An attacker could inject malicious JavaScript code into the $tainted variable, which would then be executed when the page is loaded in a victim's browser. This can lead to session hijacking, defacement, or redirection to malicious websites.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$script = ""/tmp/tainted.php"";
exec($script, $result, $return);</Code>
    <Justification>The code executes an external PHP script located at /tmp/tainted.php using the exec() function. If the content of /tmp/tainted.php is controlled by an attacker, they can inject arbitrary OS commands that will be executed with the privileges of the web server. This makes the application highly vulnerable to command injection attacks. The vulnerability could allow an attacker to compromise the entire server.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-directGet__no_sanitizing__Use_untrusted_data_propertyValue_CSS-span_Style_Property_Value.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object
sanitize : none
File : unsafe, use of untrusted data in a property value in a span tag(CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();




echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;",True,True,"echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;span style=\""color :"". checked_data .""\"">Hey&lt;/span&gt;"" ;</Code>
    <Justification>The code uses unsanitized user input (from $_GET['UserData']) within a HTML context (style attribute). This allows an attacker to inject arbitrary HTML or Javascript code into the web page, leading to Cross-Site Scripting (XSS).</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-457</Weakness>
    <Description>Use of Uninitialized Variable</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;span style=\""color :"". checked_data .""\"">Hey&lt;/span&gt;"" ;</Code>
    <Justification>The variable 'checked_data' is used without being initialized. This could lead to unpredictable behavior.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__shell_exec__no_sanitizing__multiple_AS-interpretation.php,"<?php







$tainted = shell_exec('cat /tmp/tainted.txt');



$query = ""SELECT Trim(a.FirstName) & ' ' & Trim(a.LastName) AS employee_name, a.city, a.street & (' ' +a.housenum) AS address FROM Employees AS a  WHERE a.supervisor= $tainted "";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = ""SELECT Trim(a.FirstName) & ' ' & Trim(a.LastName) AS employee_name, a.city, a.street & (' ' +a.housenum) AS address FROM Employees AS a  WHERE a.supervisor= $tainted "";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute a command based on user-controlled input, which can lead to command injection if the input is not properly neutralized.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""SELECT Trim(a.FirstName) & ' ' & Trim(a.LastName) AS employee_name, a.city, a.street & (' ' +a.housenum) AS address FROM Employees AS a  WHERE a.supervisor= $tainted "";</Code>
    <Justification>The code constructs an SQL query by directly embedding the value of $tainted, which is derived from external input, without any sanitization. This makes the application vulnerable to SQL injection attacks.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');
mysql_select_db('dbname') ;</Code>
    <Justification>The code does not check the return value of `mysql_connect` and `mysql_select_db`. If the connection fails or the database selection fails, the script will continue to execute, potentially leading to errors or security vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res = mysql_query($query); </Code>
    <Justification>The code uses the `mysql_connect` and `mysql_query` functions, which are deprecated. This means they are no longer maintained and might contain security vulnerabilities or lack important features. Using deprecated functions can also lead to compatibility issues in the future.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__SESSION__func_urlencode__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : get the UserData field of $_SESSION
SANITIZE : use of urlencode
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$tainted = $_SESSION['UserData'];

$tainted = urlencode($tainted);


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",True,True,"echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>
echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head></Code>
    <Justification>The code uses user-controlled data ($tainted) within the setInterval function without proper neutralization, leading to a cross-site scripting (XSS) vulnerability. Although urlencode is used, it's insufficient to prevent XSS as it doesn't neutralize all characters that can be used to inject malicious code within the context of setInterval.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__shell_exec__no_sanitizing__username_text-sprintf_%s_simple_quote.php,"<?php







$tainted = shell_exec('cat /tmp/tainted.txt');



$query = sprintf(""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$query = sprintf(""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute a command. The input to the command is taken from a file, which is an external source. This could lead to command injection if the contents of the file are not properly sanitized or validated.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code uses sprintf to construct an XPath query.  The XPath query is then executed using simplexml_load_file(""users.xml"") and $xml->xpath($query);  If $tainted is not properly sanitized, it could be possible to inject malicious XPath code, leading to information disclosure or other vulnerabilities.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__popen__func_FILTER-CLEANING-email_filter__Use_untrusted_data_propertyValue_CSS-property_Value.php,"<!-- 
Unsafe sample
input : Uses popen to read the file /tmp/tainted.txt using cat command
Uses an email_filter via filter_var function
File : use of untrusted data in a property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""body { color :"". $tainted ."" ; }"" ;
?>
 </style> 
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :"". $tainted ."" ; }"" ;",True,True,"echo ""body { color :"". $tainted ."" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');</Code>
    <Justification>The code uses popen to execute a command. If /tmp/tainted.txt contains shell metacharacters, it could lead to command injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :"". $tainted ."" ; }"" ;</Code>
    <Justification>The code echoes unsanitized data, $tainted, directly into the CSS style. If $tainted contains malicious CSS code, it could lead to Cross-Site Scripting (XSS).</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The code does not check the return values of popen, fread, and pclose. Failure of these functions could lead to unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');</Code>
    <Justification>The function popen may be considered obsolete or dangerous. It's better to utilize more secure alternatives.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-Array__func_FILTER-CLEANING-full_special_chars_filter__Unsafe_use_untrusted_data-script.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object, which store it in a array
Uses a full_special_chars_filter via filter_var function
File : unsafe, use of untrusted data in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     


echo $tainted ;
?>
</script>
</head>
<body onload=""xss()"">
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"<![CDATA[<!DOCTYPE html>
<html>
<head>
<script>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     


echo $tainted ;
?>
</script>
</head>]]>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code><![CDATA[<!DOCTYPE html>
<html>
<head>
<script>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     


echo $tainted ;
?>
</script>
</head>]]></Code>
    <Justification>The code retrieves user input from $_GET['UserData'], sanitizes it with FILTER_SANITIZE_FULL_SPECIAL_CHARS, and then echoes it directly into a &lt;script&gt; tag. Although FILTER_SANITIZE_FULL_SPECIAL_CHARS encodes special characters, it's still possible to introduce XSS if the encoded data is interpreted as code, especially within a script context. For example, the sanitized input could still contain encoded characters that, when interpreted by the browser, result in valid JavaScript syntax. It is unsafe to use the user data inside a script tag even after sanitization because the sanitization is not sufficient to prevent XSS in all contexts.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__backticks__func_mysql_real_escape_string__Use_untrusted_data_propertyValue_CSS-quoted_Property_Value.php,"<!-- 
Unsafe sample
input : backticks interpretation, reading the file /tmp/tainted.txt
SANITIZE : use of mysql_real_escape string
File : unsafe, use of untrusted data in a quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = `cat /tmp/tainted.txt`;

$tainted = mysql_real_escape_string($tainted);


echo ""body { color :\'"". $tainted .""\' ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\'"". $tainted .""\' ; }"" ;",True,True,"echo ""body { color :\'"". $tainted .""\' ; }"" ;
?>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code uses backticks to execute an external command (cat /tmp/tainted.txt). This is equivalent to shell_exec and can lead to command injection if the input to the command is not properly sanitized. While the output of the command is later escaped using mysql_real_escape_string, this escaping is irrelevant at this stage, as the command itself can be manipulated before its output is captured.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>
echo ""body { color :\'"". $tainted .""\' ; }"" ;
?&gt;
</Code>
    <Justification>The code is using untrusted data ($tainted) directly in a CSS style definition. Although the tainted variable has been sanitized with mysql_real_escape_string, this is inadequate for preventing CSS injection. CSS injection can lead to XSS if the attacker can inject JavaScript via CSS expressions or other CSS features, depending on the browser.  Using mysql_real_escape_string to sanitize a CSS property is inappropriate. This function is designed to sanitize strings for MySQL queries, not for CSS contexts. The correct approach would be to use a CSS-specific escaping function or avoid direct insertion of user-controlled data into CSS properties.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$tainted = mysql_real_escape_string($tainted);</Code>
    <Justification>The code uses the function mysql_real_escape_string, which is deprecated. Using deprecated functions can lead to security vulnerabilities if the functions have known weaknesses or are no longer maintained.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__SESSION__func_addslashes__userByCN-sprintf_%s_simple_quote.php,"<?php







$tainted = $_SESSION['UserData'];

$tainted = addslashes($tainted);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $_SESSION['UserData'];

$tainted = addslashes($tainted);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_SESSION['UserData'];

$tainted = addslashes($tainted);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);

</Code>
    <Justification>The code retrieves user-controlled data from $_SESSION['UserData'] and uses it to construct an LDAP query without proper sanitization. While addslashes() provides some protection, it's insufficient to prevent LDAP injection.  Attackers could still manipulate the query to bypass authentication or retrieve sensitive information.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);</Code>
    <Justification>The code does not specify username or password parameters when it calls ldap_bind().
    This function attempts an anonymous bind if no credentials are provided, and such behavior may allow an attacher to glean information about the system from it.
    This issue can also be related to the reliability of the software.
    </Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__array-GET__func_FILTER-CLEANING-special_chars_filter__select_from-interpretation_simple_quote.php,"<?php







$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      

$query = ""SELECT * FROM ' $tainted '"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,True,"$array[] = $_GET['userData'] ;
$tainted = $array[1] ;

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      

$query = ""SELECT * FROM ' $tainted '""","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$array[] = $_GET['userData'] ;
$tainted = $array[1] ;

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      

$query = ""SELECT * FROM ' $tainted '""</Code>
    <Justification>The code is vulnerable to SQL injection.  Even though the userData parameter is sanitized using filter_var, it is used as table name. Table names cannot be sanitized using this filter. An attacker could inject malicious SQL code by manipulating the 'userData' GET parameter to alter the SQL query.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res = mysql_query($query); </Code>
    <Justification>The code does not check the return value of `mysql_connect` and `mysql_select_db` calls. If the connection fails or the database selection fails, `mysql_connect` or `mysql_select_db` will return false, but the code proceeds to use the potentially invalid connection, which could lead to errors or unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res = mysql_query($query); </Code>
    <Justification>The code uses the `mysql_connect`, `mysql_select_db`, and `mysql_query` functions, which are deprecated.  These functions are no longer maintained and are known to have security vulnerabilities.  It's recommended to use `mysqli` or `PDO` instead.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-561</Weakness>
    <Description>Dead code</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>
$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;</Code>
    <Justification>The code assigns the sanitized variable immediately back to the tainted variable. This makes the sanitized variable redundant.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__object-classicGet__func_preg_replace2__userByMail-concatenation_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input;
  }

  public  function __construct(){
   $this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = preg_replace('/\W/si','',$tainted);

$query = ""(&(objectCategory=person)(objectClass=user)(mail='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,False,"$query = ""(&(objectCategory=person)(objectClass=user)(mail='"". $tainted . ""'))"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""(&(objectCategory=person)(objectClass=user)(mail='"". $tainted . ""'))"";</Code>
    <Justification>The code constructs an LDAP query by directly embedding a variable, $tainted, derived from user input ($_GET['UserData']).  Even with the preg_replace() call, it's possible to craft inputs that bypass the intended sanitization and inject malicious LDAP syntax, leading to unauthorized data access or modification.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind, and ldap_search. Failure of any of these functions can lead to a variety of issues including denial of service or use of uninitialized resources. The program should check for boolean FALSE return values.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind, and ldap_search. If these functions fail, it can lead to reliability issues, like the program not functioning correctly or crashing.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__exec__func_FILTER-VALIDATION-email_filter__Use_untrusted_data_propertyValue_CSS-double_Quoted_Property_Value.php,"<!-- 
Unsafe sample
input : use exec to execute the script /tmp/tainted.php and store the output in $tainted
Flushes content of $sanitized if the filter email_filter is not applied
File : use of untrusted data in a double quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\"""". $tainted .""\"" ; }"" ;",True,True,"if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""body { color :\"""". $tainted .""\"" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];</Code>
    <Justification>The code uses the exec() function to execute an external script. This can lead to command injection if the script path is derived from an untrusted source.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""body { color :\"""". $tainted .""\"" ; }"" ;</Code>
    <Justification>The code outputs the value of $tainted directly into the CSS style without proper sanitization. If $tainted contains malicious code, it could lead to cross-site scripting (XSS).</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>exec($script, $result, $return);</Code>
    <Justification>The code does not check the return value of the exec() function, which indicates whether the command execution was successful. Failing to check the return value can lead to unexpected behavior if the command fails to execute properly.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__proc_open__func_rawurlencode__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : use proc_open to read /tmp/tainted.txt
SANITIZE : use of rawurlencode
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}

$tainted = rawurlencode($tainted);


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",True,True,"echo ""window.setInterval('"". $tainted .""');"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>
echo ""window.setInterval('"". $tainted .""');"" ;</Code>
    <Justification>The code uses rawurlencode which is insufficient to prevent XSS, as certain characters can still be used to inject malicious JavaScript code. The tainted data, read from a file, is directly inserted into the setInterval function without proper sanitization.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}</Code>
    <Justification>The code does not check the return value of `proc_open`, `fclose` and `stream_get_contents` functions which could lead to unexpected behavior if these functions fail.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>  $tainted = stream_get_contents($pipes[1]);</Code>
    <Justification>The function stream_get_contents() reads all remaining bytes from a stream.  The function might be problematic in case of large files.  Using other functions might increase the software's security.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-732</Weakness>
    <Description>Incorrect Permission Assignment for Critical Resource</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")</Code>
    <Justification>The code creates or appends to the file /tmp/error-output.txt.  This file might contain sensitive information. By default, files created in /tmp are world-readable, which means any user on the system can potentially read the error messages, leading to information disclosure.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__system__func_htmlentities__not_name-interpretation_simple_quote.php,"<?php







$tainted = system('ls', $retval);

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = ""!name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = system('ls', $retval);

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = ""!name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code uses the `system` function with the `'ls'` command. Although the command itself is hardcoded, the potential exists for command injection if the `$retval` argument could somehow be influenced by user input.  While the second argument of system() is not directly injectable it does point to the fact system is being used, which could be used with user supplied input elsewhere.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = ""!name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query using a variable `$tainted` that is derived from the output of the `system` command. Even though `htmlentities` is applied, it may not be sufficient to neutralize all special characters that could lead to LDAP injection. The LDAP search filter `!name=' $tainted '` is vulnerable if `$tainted` contains LDAP control characters, allowing attackers to modify the query's meaning.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code uses `ldap_connect`, `ldap_bind`, `ldap_search`, and `ldap_close`. While not inherently obsolete, these functions could be superseded by newer APIs or methods that offer improved security, performance, or maintainability, depending on the specific LDAP library being used and the context of the application.  It's good to verify that these are the best functions to use.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__shell_exec__func_FILTER-VALIDATION-number_float_filter__Use_untrusted_data_propertyValue_CSS-quoted_Property_Value.php,"<!-- 
Unsafe sample
input : use shell_exec to cat /tmp/tainted.txt
Flushes content of $sanitized if the filter number_float_filter is not applied
File : unsafe, use of untrusted data in a quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = shell_exec('cat /tmp/tainted.txt');

if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""body { color :\'"". $tainted .""\' ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\'"". $tainted .""\' ; }"" ;",True,True,"echo ""body { color :\'"". $tainted .""\' ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute a command based on hardcoded values. If an attacker can modify the contents of /tmp/tainted.txt, they can inject arbitrary commands to be executed by the system. This constitutes a command injection vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\'"". $tainted .""\' ; }"" ;</Code>
    <Justification>The code directly echoes unsanitized input into the CSS style, allowing for potential Cross-Site Scripting (XSS) attacks. If the $tainted variable contains malicious JavaScript or other executable code, it will be executed in the user's browser, potentially leading to unauthorized actions or information disclosure.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code does not check the return value of `shell_exec`. If the execution of the command fails (e.g., due to insufficient permissions, file not found), `shell_exec` will return NULL. The code proceeds without handling this potential error, which can lead to unexpected behavior or vulnerabilities later in the script if `$tainted` is used without validation.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__object-classicGet__no_sanitizing__name-sprintf_%s_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input;
  }

  public  function __construct(){
   $this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();



$query = sprintf(""name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();



$query = sprintf(""name='%s'"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();



$query = sprintf(""name='%s'"", $tainted);</Code>
    <Justification>The code retrieves user input from $_GET['UserData'] and uses it in an LDAP query without proper sanitization. This allows an attacker to inject malicious code into the query, potentially gaining unauthorized access to sensitive information or manipulating the LDAP directory.  The sprintf function doesn't offer sufficient protection against LDAP injection.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__SESSION__func_preg_match-no_filtering__username-sprintf_%s_simple_quote.php,"<?php







$tainted = $_SESSION['UserData'];

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = sprintf(""user[username='%s']"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-643</Weakness>
    <Description>Improper Neutralization of Data within XPath Expressions ('XPath Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""user[username='%s']"", $tainted);</Code>
    <Justification>The code uses user-controlled data ($tainted) directly within an XPath query. This allows an attacker to inject malicious XPath expressions by manipulating the $tainted variable, potentially gaining unauthorized access to data or modifying the XML structure. The sprintf function doesn't provide sufficient sanitization to prevent XPath injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>simplexml_load_file(""users.xml"");</Code>
    <Justification>The code uses a hardcoded file path ""users.xml"". This may contain sensitive information. An attacker may be able to access or manipulate this file by finding it in the file system. Therefore, the location should not be hardcoded.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-22</Weakness>
    <Description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>simplexml_load_file(""users.xml"");</Code>
    <Justification>The code directly uses a hardcoded path to the ""users.xml"" file, opening the possibility of path traversal if the application's configuration allows an attacker to influence the base directory or the way the file path is interpreted. If an attacker can somehow control parts of the filename, it could lead to reading arbitrary files.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>simplexml_load_file(""users.xml"");</Code>
    <Justification>The code does not check the return value of simplexml_load_file(). If the file fails to load (e.g., file not found, invalid XML), simplexml_load_file() will return false, and the subsequent call to $xml->xpath($query) will result in an error and potentially crash the application.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-611</Weakness>
    <Description>Improper Restriction of XML External Entity Reference ('XXE')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>simplexml_load_file(""users.xml"");</Code>
    <Justification>The code uses simplexml_load_file() to parse the XML file. If the XML file contains external entity references (XXE), it can lead to arbitrary file disclosure, denial of service, or even remote code execution. SimpleXML does not disable external entity resolution by default, which makes it vulnerable to XXE attacks.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-129</Weakness>
    <Description>Improper Validation of Array Index</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>print_r($res);</Code>
    <Justification>The code prints the XML results. If the array is accessible from the Internet, an attacker may try to use array indexes to crash or corrupt the system.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-703</Weakness>
    <Description>Improper Check or Handling of Exceptional Conditions</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}</Code>
    <Justification>The code attempts to validate the input using preg_match but always allow the input through. While it is good the application is attempting input validation, in this scenario there is not practical use since any input is accepted. If the validation fails (preg_match returns something other than 1), the value of $tainted will be an empty string. This could be an issue if downstream code depends on the input satisfying certain criteria.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-434</Weakness>
    <Description>Unrestricted Upload of File with Dangerous Type</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_SESSION['UserData'];</Code>
    <Justification>The code obtains tainted data from the session. Session variables are user-controlled, similar to file uploads. While this code doesn't directly handle uploads, if the session value is derived from an uploaded file name, that file could be dangerous and trigger a vulnerability elsewhere.</Justification>
  </Issue>
</Issues>
```"
CWE-78,src/CWE_78__unserialize__func_preg_match-no_filtering__cat-interpretation_simple_quote.php,"<?php







$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = ""cat ' $tainted '"";


$ret = system($query);


?>",$ret = system($query);,True,True,"$query = ""cat ' $tainted '"";


$ret = system($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code deserializes user-provided data without proper validation. This can lead to arbitrary code execution if the serialized data is malicious.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""cat ' $tainted '"";


$ret = system($query);</Code>
    <Justification>The code constructs an OS command using unsanitized user input, making it vulnerable to command injection. An attacker can inject arbitrary commands by manipulating the $tainted variable.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__array-GET__no_sanitizing__username_at-concatenation_simple_quote.php,"<?php







$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;



$query = ""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;



$query = ""","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;



$query = ""</Code>
    <Justification>The code constructs an XPath query using user-controlled input ($_GET['userData']) without proper sanitization. This allows an attacker to inject malicious XPath expressions, potentially extracting sensitive information or manipulating the XML data.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__proc_open__func_FILTER-CLEANING-email_filter__username-sprintf_%s_simple_quote.php,"<?php







$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = sprintf(""user[username='%s']"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);</Code>
    <Justification>The proc_open function executes a command. In this code, the command 'more /tmp/tainted.txt' is hardcoded, posing a low risk. However, if the first argument to proc_open was constructed using external input, it would be vulnerable to command injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);</Code>
    <Justification>The proc_open function executes a command. In this code, the command 'more /tmp/tainted.txt' is hardcoded, posing a low risk. However, if the first argument to proc_open was constructed using external input, it would be vulnerable to OS command injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-643</Weakness>
    <Description>Improper Neutralization of Data within XPath Expressions ('XPath Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""user[username='%s']"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code constructs an XPath query using user-controlled data ($tainted) without proper sanitization. This makes the application vulnerable to XPath injection. An attacker could inject malicious XPath syntax into the $tainted variable, potentially gaining unauthorized access to data or manipulating the XML structure.  While the code attempts to sanitize the input using FILTER_SANITIZE_EMAIL and FILTER_VALIDATE_EMAIL, this is insufficient to prevent XPath injection.  An attacker could still provide a valid email address that also contains characters that are special in XPath, such as quotes or brackets.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__popen__func_FILTER-CLEANING-email_filter__join-sprintf_%s_simple_quote.php,"<?php







$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = sprintf(""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag='%s'"", $tainted);


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = sprintf(""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag='%s'"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');</Code>
    <Justification>The popen function executes a shell command. While the command itself is hardcoded, any system configuration impacting the /bin/cat utility could introduce a command injection vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag='%s'"", $tainted);</Code>
    <Justification>The code uses sprintf to construct a SQL query with unsanitized input $tainted, making it vulnerable to SQL injection. Although there is email validation and sanitization, this does not guarantee SQL safety.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The return value of mysql_connect is not checked. If the connection fails, $conn will be false, and later code will attempt to use it, leading to an error.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$res = mysql_query($query);</Code>
    <Justification>The return value of mysql_query is not checked. If the query fails, $res will be false, and later code will attempt to use it in mysql_fetch_array, leading to an error.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The mysql_connect function is deprecated and should not be used.  It is better to use mysqli or PDO.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$res = mysql_query($query);</Code>
    <Justification>The mysql_query function is deprecated and should not be used. It is better to use mysqli or PDO.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>mysql_select_db('dbname') ;</Code>
    <Justification>The mysql_select_db function is deprecated and should not be used. It is better to use mysqli or PDO.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""&lt;br />"" ;
}</Code>
    <Justification>The mysql_fetch_array function is deprecated and should not be used. It is better to use mysqli or PDO.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>mysql_close($conn);</Code>
    <Justification>The mysql_close function is deprecated and should not be used. It is better to use mysqli or PDO.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__exec__func_FILTER-CLEANING-email_filter__join-interpretation_simple_quote.php,"<?php







$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,True,"$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$script = ""/tmp/tainted.php"";
exec($script, $result, $return);</Code>
    <Justification>The code executes a script without proper sanitization of its path. If an attacker can control the script path, they can execute arbitrary commands on the system.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;</Code>
    <Justification>The code constructs a SQL query by directly embedding user-provided data ($tainted) without proper sanitization, which makes it vulnerable to SQL injection attacks.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;</Code>
    <Justification>The code does not check the return value of mysql_connect() and mysql_select_db(). If the connection fails or the database selection fails, the script will continue to execute, potentially leading to unexpected behavior or errors.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The function `mysql_connect` is deprecated and should not be used in new code. It is better to use `mysqli_connect` or `PDO`.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The code uses hard-coded credentials ('mysql_user', 'mysql_password') for database connection, which can be easily exposed and lead to unauthorized access to the database.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__unserialize__no_sanitizing__multiple_AS-concatenation.php,"<?php







$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    



$query = ""SELECT Trim(a.FirstName) & ' ' & Trim(a.LastName) AS employee_name, a.city, a.street & (' ' +a.housenum) AS address FROM Employees AS a  WHERE a.supervisor="". $tainted . """";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,True,"$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    



$query = ""SELECT Trim(a.FirstName) & ' ' & Trim(a.LastName) AS employee_name, a.city, a.street & (' ' +a.housenum) AS address FROM Employees AS a  WHERE a.supervisor="". $tainted . """";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    



$query = ""SELECT Trim(a.FirstName) &amp; ' ' &amp; Trim(a.LastName) AS employee_name, a.city, a.street &amp; (' ' +a.housenum) AS address FROM Employees AS a  WHERE a.supervisor="". $tainted . """";</Code>
    <Justification>The code is vulnerable to SQL injection because it directly incorporates user-supplied data from the unserialized $_POST['UserData'] into the SQL query without proper sanitization or parameterization. An attacker could manipulate the $_POST['UserData'] to inject malicious SQL code, potentially compromising the database.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;</Code>
    <Justification>The code uses the `mysql_connect` and `mysql_select_db` functions, which are deprecated. These functions are no longer maintained and using them can lead to security vulnerabilities and compatibility issues.  It is recommended to use MySQLi or PDO_MySQL instead.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses `unserialize()` on user-supplied data (`$_POST['UserData']`).  This is extremely dangerous because it allows an attacker to inject arbitrary PHP objects, leading to remote code execution vulnerabilities. The attacker can manipulate the serialized string to instantiate any class available in the application with attacker-controlled properties.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__object-Array__func_htmlentities__name-interpretation_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code constructs an LDAP query using user-supplied data from $_GET['UserData'] without proper neutralization. This can lead to LDAP injection vulnerabilities, where an attacker could manipulate the query to retrieve or modify sensitive information or perform unauthorized actions.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = htmlentities($tainted, ENT_QUOTES);</Code>
    <Justification>While htmlentities is used, it might not be sufficient to prevent all XSS vectors depending on the context where $tainted is used later in the application. The application is vulnerable to XSS if $tainted is displayed back to the user without further sanitization after being retrieved from $_GET['UserData'].  This is because LDAP is not the only injection sink possible. An attacker could inject malicious script into the LDAP server, and when that data is retrieved and displayed to other users, the script would be executed.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__SESSION__func_htmlspecialchars__userByCN-sprintf_%s_simple_quote.php,"<?php







$tainted = $_SESSION['UserData'];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $_SESSION['UserData'];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_SESSION['UserData'];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);</Code>
    <Justification>The code constructs an LDAP query using user-supplied data from $_SESSION['UserData'] without proper sanitization. Although htmlspecialchars is used, it may not be sufficient to prevent LDAP injection attacks, as it primarily targets HTML escaping and does not neutralize LDAP-specific injection characters. This can allow an attacker to inject arbitrary LDAP queries.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__shell_exec__func_FILTER-CLEANING-number_float_filter__Use_untrusted_data_propertyValue_CSS-span_Style_Property_Value.php,"<!-- 
Unsafe sample
input : use shell_exec to cat /tmp/tainted.txt
Uses a number_float_filter via filter_var function
File : unsafe, use of untrusted data in a property value in a span tag(CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$tainted = shell_exec('cat /tmp/tainted.txt');

$sanitized = filter_var($tainted, FILTER_SANITIZE_NUMBER_FLOAT);
if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;",True,True,"echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute a command, potentially leading to command injection if the input file '/tmp/tainted.txt' contains malicious commands.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;span style=\""color :"". checked_data .""\""&gt;Hey&lt;/span&gt;"" ;</Code>
    <Justification>The code uses a variable `checked_data` within a CSS style attribute in an HTML span tag without proper sanitization, which could lead to cross-site scripting (XSS) if the variable contains malicious code. The fix using filter_var is not correctly implemented. `$sanitized` is validated to be a float, but the result is stored in `$tainted` and `$checked_data` is never assigned a value.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-457</Weakness>
    <Description>Use of uninitialized variable</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;span style=\""color :"". checked_data .""\""&gt;Hey&lt;/span&gt;"" ;</Code>
    <Justification>The code uses a variable `checked_data` without initializing it first, which can lead to unpredictable behavior or errors. It appears the intent was to assign sanitized, float validated, value to `checked_data` but this was not done in code.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-indexArray__func_FILTER-CLEANING-special_chars_filter__Unsafe_use_untrusted_data-script.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object, which store it in a array
Uses a special_chars_filter via filter_var function
File : unsafe, use of untrusted data in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input['realOne'];
  }

  public  function __construct(){
    $this->input = array();
    $this->input['test']= 'safe' ;
    $this->input['realOne']= $_GET['UserData'] ;
    $this->input['trap']= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      


echo $tainted ;
?>
</script>
</head>
<body onload=""xss()"">
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"echo $tainted ;
?>
</script>
</head>
<body onload=""xss()"">","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>
echo $tainted ;
?>
</script>
</head>
<body onload=""xss()""></Code>
    <Justification>The code echoes user-controlled input ($tainted), which has been sanitized with FILTER_SANITIZE_SPECIAL_CHARS, directly into the HTML document within a &lt;script&gt; tag. While the special characters are encoded the context is still Javascript. An attacker might inject javascript code. e.g., &lt;script&gt;alert('XSS')&lt;/script&gt; The onload=""xss()"" also allows for javascript injection.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-Array__func_FILTER-CLEANING-email_filter__Use_untrusted_data-body.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object, which store it in a array
Uses an email_filter via filter_var function
File : use of untrusted data in the body
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo $tainted ;
?>
<h1>Hello World!</h1>
</body>
</html>
",echo $tainted ;,True,True,echo $tainted ;,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo $tainted ;</Code>
    <Justification>The variable $tainted, which contains user-supplied data from $_GET['UserData'], is directly echoed into the HTML output without proper encoding. Even though the input is sanitized with FILTER_SANITIZE_EMAIL and validated with FILTER_VALIDATE_EMAIL, it's still possible to inject malicious content (e.g., HTML tags) that could lead to XSS vulnerabilities if the email is crafted in such a way.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__POST__func_preg_replace__not_name-interpretation_simple_quote.php,"<?php







$tainted = $_POST['UserData'];

$tainted = preg_replace('/\'/', '', $tainted);

$query = ""!name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $_POST['UserData'];

$tainted = preg_replace('/\'/', '', $tainted);

$query = ""!name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_POST['UserData'];

$tainted = preg_replace('/\'/', '', $tainted);

$query = ""!name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query by directly embedding user-controlled data ($tainted) into the query string. Although the code attempts to remove single quotes with preg_replace, it is insufficient to prevent LDAP injection attacks. An attacker could still inject malicious LDAP syntax to bypass authentication or retrieve sensitive information.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__array-GET__func_FILTER-VALIDATION-number_float_filter__Unsafe_use_untrusted_data-tag_Name.php,"<!-- 
Unsafe sample
input : get the $_GET['userData'] in an array
Flushes content of $sanitized if the filter number_float_filter is not applied
File : unsafe, use of untrusted data in an tag name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;

if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;",True,True,"echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;"".  $tainted ."" href= \""/bob\"" />"" ;</Code>
    <Justification>The code uses untrusted data, from the $_GET['userData'] parameter, as a tag name without proper sanitization. If $tainted contains special characters or script, it could lead to cross-site scripting (XSS) vulnerability if the condition to validate $sanitized as a FLOAT fails.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__object-indexArray__func_FILTER-VALIDATION-email_filter__username-interpretation_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input['realOne'];
  }

  public  function __construct(){
    $this->input = array();
    $this->input['test']= 'safe' ;
    $this->input['realOne']= $_GET['UserData'] ;
    $this->input['trap']= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""user[username=' $tainted ']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$tainted =  $temp->getInput();

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""user[username=' $tainted ']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted =  $temp->getInput();

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""user[username=' $tainted ']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code constructs an XPath query using unsanitized user input ($tainted). If $tainted contains malicious XPath syntax, it could lead to XML Injection, allowing an attacker to extract sensitive information or manipulate the XML structure. The filter_var with FILTER_VALIDATE_EMAIL is only executed when $sanitized is defined and available, which is not guaranteed. Also if the validation fails, the value of $tainted is """" which is not sanitization at all. It is an empty string.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The return value of simplexml_load_file() is not checked. If the file fails to load (e.g., file not found, invalid XML), it returns FALSE. Dereferencing FALSE as an object in the subsequent xpath() call will result in a fatal error. This could lead to a denial-of-service or unexpected application behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-703</Weakness>
    <Description>Improper Check or Handling of Exceptional Conditions</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The code attempts to validate $sanitized as an email, but it doesn't handle the case where $sanitized is not defined or available. If $sanitized isn't set, using it in filter_var() will throw a Notice, which can disrupt the application's normal flow.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__backticks__func_FILTER-CLEANING-email_filter__userByCN-interpretation_simple_quote.php,"<?php







$tainted = `cat /tmp/tainted.txt`;

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""(&(objectCategory=person)(objectClass=user)(cn=' $tainted '))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,False,"$query = ""(&(objectCategory=person)(objectClass=user)(cn=' $tainted '))"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code uses backticks to execute an external command (`cat /tmp/tainted.txt`).  This can lead to command injection if the filename `/tmp/tainted.txt` is attacker-controlled.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""(&(objectCategory=person)(objectClass=user)(cn=' $tainted '))"";</Code>
    <Justification>The code constructs an LDAP query by directly embedding the `$tainted` variable, which comes from an external source (`cat /tmp/tainted.txt`). Even though the input is sanitized, there's still a possibility of LDAP injection if the sanitization is insufficient or flawed, allowing an attacker to manipulate the query's logic.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost"");
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code does not check the return values of `ldap_connect`, `ldap_bind`, and `ldap_search`. If any of these functions fail, the script will continue to execute, potentially leading to errors or unexpected behavior. For example, if `ldap_connect` fails, `$ds` will be false and using it in subsequent calls will raise an error.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__system__func_preg_replace__name-interpretation_simple_quote.php,"<?php







$tainted = system('ls', $retval);

$tainted = preg_replace('/\'/', '', $tainted);

$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = system('ls', $retval);

$tainted = preg_replace('/\'/', '', $tainted);

$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The `system()` function executes an external program. If the executed command is constructed using external inputs, it becomes vulnerable to command injection attacks (CWE-78). In this case, 'ls' is a fixed command so it does not directly depend on user input, therefore the risk is low unless the environment where the script executes is configured to execute arbitrary commands when executing `ls`.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);

$tainted = preg_replace('/\'/', '', $tainted);

$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query using a variable $tainted that comes from the system() call. Even though the code attempts to neutralize single quotes, it's insufficient to prevent LDAP injection. An attacker could still manipulate the $tainted variable to inject arbitrary LDAP code, potentially allowing them to bypass authentication or access sensitive information (CWE-90).</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__POST__func_htmlspecialchars__Unsafe_use_untrusted_data-attribute_Name.php,"<!-- 
Unsafe sample
input : get the field UserData from the variable $_POST
sanitize : use of the function htmlspecialchars. Sanitizes the query but has a high chance to produce unexpected results
File : unsafe, use of untrusted data in an attribute name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<body>
<?php
$tainted = $_POST['UserData'];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);


echo ""<div "". $tainted .""= bob />"" ;
?>
<h1>Hello World!</h1>
</div>
</body>
</html>","echo ""<div "". $tainted .""= bob />"" ;",True,True,"echo ""<div "". $tainted .""= bob />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;div "". $tainted .""= bob />"" ;</Code>
    <Justification>The code uses unsanitized user input ($tainted) to construct an HTML attribute. Although htmlspecialchars is used, it might not be sufficient to prevent XSS in all contexts, especially when used in attribute names. An attacker could inject arbitrary HTML attributes and potentially execute JavaScript.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__fopen__func_urlencode__Unsafe_use_untrusted_data-tag_Name.php,"<!-- 
Unsafe sample
input : use fopen to read /tmp/tainted.txt and put the first line in $tainted
SANITIZE : use of urlencode
File : unsafe, use of untrusted data in an tag name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$tainted = urlencode($tainted);


echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;",True,True,"echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;"".  $tainted ."" href= \""/bob\"" /&gt;"" ;</Code>
    <Justification>The code echoes user-controlled input ($tainted) directly into an HTML tag name. Even though urlencode is used, it's insufficient to prevent XSS because urlencode does not encode all characters that are dangerous in HTML contexts. An attacker can still inject arbitrary HTML or script by crafting a malicious input that exploits the tag name context, potentially leading to XSS.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);</Code>
    <Justification>The code checks if fgets returns false, but the fclose function is not checked for errors. If fclose fails, it could lead to resource leaks or other unexpected behavior. While less severe, it's still good practice to check return values for potential errors.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-391</Weakness>
    <Description>Unchecked Error Condition</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>  $handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}</Code>
    <Justification>The fopen function is prepended with the '@' symbol, which suppresses any error messages. If fopen fails (e.g., file not found, permissions issue), the script proceeds as if fopen was successful, potentially leading to unexpected behavior. While the else block handles the file opening failure by setting the tainted value to empty, the core issue is to not properly report the error condition. </Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__system__func_FILTER-VALIDATION-email_filter__Use_untrusted_data_propertyValue_CSS-double_Quoted_Property_Value.php,"<!-- 
Unsafe sample
input : execute a ls command using the function system, and put the last result in $tainted
Flushes content of $sanitized if the filter email_filter is not applied
File : use of untrusted data in a double quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = system('ls', $retval);

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\"""". $tainted .""\"" ; }"" ;",True,True,"echo ""body { color :\"""". $tainted .""\"" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The `system()` function executes an external command (`ls`) without sanitizing input, which could lead to OS command injection if the command or arguments are influenced by an attacker.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\"""". $tainted .""\"" ; }"" ;</Code>
    <Justification>The code outputs the `$tainted` variable directly into the CSS style without proper encoding or sanitization. If `$tainted` contains malicious code (e.g., JavaScript), it could lead to Cross-Site Scripting (XSS) vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-571</Weakness>
    <Description>Expression is Always True</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The code conditionally assigns a value to `$tainted` based on the email validation of `$sanitized`. However, in the `else` branch, if the email is not valid, `$tainted` is assigned an empty string. The vulnerability would still exist because the $tainted value is used to generate the CSS rule with the echo statement.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code calls the `system()` function but does not check the return value for errors. The `system()` function can fail, and the code should handle the error appropriately to ensure the application's reliability.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__object-Array__func_FILTER-VALIDATION-email_filter__userByCN-concatenation_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  </Code>
    <Justification>The code constructs an LDAP query by directly embedding user-supplied data ($tainted) into the query string. This can lead to LDAP injection attacks, where an attacker can manipulate the LDAP query to bypass security restrictions or access sensitive information.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind, and ldap_search functions. If any of these functions fail (e.g., connection refused, invalid credentials, or search error), the program will continue execution without handling the error, potentially leading to unexpected behavior or security vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-424</Weakness>
    <Description>Improper Protection of Alternate Path</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;</Code>
    <Justification>The application is directly fetching value from the superglobal variable $_GET without validation. if there is any access control based on a path which is obtained using  $_GET, it may lead to bypass the intended sphere of control.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__SESSION__func_FILTER-CLEANING-magic_quotes_filter__userByCN-concatenation_simple_quote.php,"<?php







$tainted = $_SESSION['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      

$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $_SESSION['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      

$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_SESSION['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      

$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";</Code>
    <Justification>The code constructs an LDAP query by directly embedding unsanitized user input from $_SESSION['UserData'] into the query string. Although the code uses `filter_var` with `FILTER_SANITIZE_MAGIC_QUOTES`, this is insufficient to prevent LDAP injection attacks as it only escapes single quotes, double quotes, backslashes and NUL bytes. An attacker could manipulate the input to inject arbitrary LDAP commands, potentially bypassing authentication or retrieving sensitive information.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__fopen__func_preg_match-no_filtering__username-interpretation_simple_quote.php,"<?php







$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = ""user[username=' $tainted ']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-643</Weakness>
    <Description>Improper Neutralization of Data within XPath Expressions ('XPath Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""user[username=' $tainted ']"";\n\n\n$xml = simplexml_load_file(""users.xml"");\necho ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;\n\n$res=$xml-&gt;xpath($query);</Code>
    <Justification>The code constructs an XPath query using user-controlled input ($tainted) without proper sanitization. This allows an attacker to inject malicious XPath expressions, potentially gaining unauthorized access to sensitive data or manipulating the XML structure. This is a direct violation of CWE-643.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if(($tainted = fgets($handle, 4096)) == false) {</Code>
    <Justification>The code uses the return value of fgets() to check for failure, but it does not handle the case where fgets() returns an empty string which is different from false. fgets() can return an empty string on EOF, which should be checked. This could lead to unexpected behavior if the program assumes that $tainted will always contain valid data after this check.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-391</Weakness>
    <Description>Unchecked Error Condition</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$xml = simplexml_load_file(""users.xml"");</Code>
    <Justification>The code does not check for errors when loading the XML file using simplexml_load_file(). If the file does not exist or is malformed, simplexml_load_file() will return false or generate an error/warning. Ignoring this error condition can lead to unexpected behavior, a crash, or the program proceeding with invalid data. A proper check using `if ($xml === false)` is recommended.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-778</Weakness>
    <Description>Insufficient Logging</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$handle = @fopen(""/tmp/tainted.txt"", ""r"");</Code>
    <Justification>The code attempts to open a file, and suppresses errors using the `@` operator. While this prevents the error message from being displayed to the user, the code does not log the error. If the file cannot be opened, the application proceeds without any logging information. This makes it difficult to diagnose problems that may arise due to file access issues.  Logging such failures would improve the diagnosability of the application.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-424</Weakness>
    <Description>Improper Protection of Alternate Path</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$handle = @fopen(""/tmp/tainted.txt"", ""r"");</Code>
    <Justification>The code reads data from a file ""/tmp/tainted.txt"". There is no validation on what is in this file, making the application vulnerable. If an attacker has the ability to modify this file, they could inject malicious data that gets used in the XPath query. There should be validation on what can be inside /tmp/tainted.txt</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__object-Array__func_preg_replace__not_name-sprintf_%s_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = preg_replace('/\'/', '', $tainted);

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query using unsanitized user input from $_GET['UserData']. Even after using preg_replace to remove single quotes, the $tainted variable can still contain other special characters that, when included in the LDAP query, can lead to LDAP injection vulnerabilities. This allows attackers to potentially modify the LDAP query and access or modify sensitive information or perform unauthorized operations.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind, and ldap_search. If any of these functions fail, they will return FALSE, and the subsequent code may operate on a non-resource or produce unexpected results, potentially leading to application errors or unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind, and ldap_search. If ldap_connect or ldap_bind fail, it can expose the application to using unauthenticated connections to the LDAP server which can be exploited by attackers.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-778</Weakness>
    <Description>Insufficient Logging</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code lacks logging for security-relevant events, such as failed login attempts or suspicious queries. Insufficient logging can hinder incident response and forensic analysis in the event of a security breach.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__system__ternary_white_list__Use_untrusted_data_propertyValue_CSS-span_Style_Property_Value.php,"<!-- 
Unsafe sample
input : execute a ls command using the function system, and put the last result in $tainted
sanitize : use of ternary condition
File : unsafe, use of untrusted data in a property value in a span tag(CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$tainted = system('ls', $retval);

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;",True,True,"$tainted = system('ls', $retval);

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code uses the system() function to execute an OS command. The 'ls' command itself is not directly user-controlled in this snippet, but the broader context suggests the potential for user-controlled input to influence the command being executed, which is an instance of command injection. Even if the command is hardcoded here, the broader context where this snippet might be used could introduce user-controlled elements. If external, untrusted data were to be incorporated into the command passed to system(), this would constitute a command injection vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>
$tainted = system('ls', $retval);

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo ""&lt;span style=\""color :"". checked_data .""\""&gt;Hey&lt;/span&gt;"" ;
</Code>
    <Justification>The output ""&lt;span style=\""color :"". checked_data .""\""&gt;Hey&lt;/span&gt;"" directly embeds a variable named 'checked_data' within the HTML tag as part of style attribute's color property. While the immediate code snippet does not show how checked_data is populated or its source, this presents a vulnerability because it can inject arbitrary CSS and JavaScript into the page, which could lead to Cross-Site Scripting (XSS).  Regardless of how checked_data is set, it represents a point where user-supplied data or other untrusted data might be inserted into the HTML without proper neutralization.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__object-indexArray__no_sanitizing__not_name-sprintf_%s_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input['realOne'];
  }

  public  function __construct(){
    $this->input = array();
    $this->input['test']= 'safe' ;
    $this->input['realOne']= $_GET['UserData'] ;
    $this->input['trap']= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();



$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  </Code>
    <Justification>The code constructs an LDAP query using unsanitized user input ($tainted). An attacker could inject malicious LDAP syntax into the UserData GET parameter, potentially gaining unauthorized access to or control over the LDAP directory. This is a classic LDAP injection vulnerability.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__unserialize__func_FILTER-CLEANING-full_special_chars_filter__select_from-concatenation_simple_quote.php,"<?php







$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     

$query = ""SELECT * FROM '"". $tainted . ""'"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = ""SELECT * FROM '"". $tainted . ""'"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses unserialize() on user-supplied data from $_POST['UserData']. This is extremely dangerous because unserialize() can lead to arbitrary code execution if the serialized data is maliciously crafted.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$query = ""SELECT * FROM '"". $tainted . ""'"";</Code>
    <Justification>The code directly incorporates a tainted variable $tainted into the SQL query without proper sanitization. Although filter_var with FILTER_SANITIZE_FULL_SPECIAL_CHARS is used, it's being used *before* the tainted data is properly handled after deserialization and will not protect against SQL Injection in this context because the table name is user-controlled.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;</Code>
    <Justification>The code does not check the return value of mysql_connect() and mysql_select_db(). If these functions fail, they will return FALSE, and the script will continue to execute, leading to potential errors and unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
...
$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""&lt;br /&gt;"" ;
} 
mysql_close($conn);</Code>
    <Justification>The code uses the mysql_* functions, which are deprecated and have been removed in PHP 7. This makes the code less maintainable and potentially insecure, as these functions are no longer actively supported.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-424</Weakness>
    <Description>Improper Protection of Alternate Path</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;</Code>
    <Justification>The code attempts to sanitize the user input with filter_var using FILTER_SANITIZE_FULL_SPECIAL_CHARS. However, this sanitization might not be sufficient to prevent all possible attacks, especially after the unserialize operation. The application should have more robust input validation and sanitization mechanisms to protect against various types of attacks. The table name being sanitized might not prevent all SQL injection scenarios.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__shell_exec__func_addslashes__not_name-concatenation_simple_quote.php,"<?php







$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = addslashes($tainted);

$query = ""!name='"". $tainted . ""'"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = addslashes($tainted);

$query = ""!name='"". $tainted . ""'"";

$sr=ldap_search($ds,""o=My Company, c=US"", $query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute a command with external input, which can lead to command injection if the input is not properly sanitized. While the result is later used in an LDAP query, the initial command execution is a vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = addslashes($tainted);

$query = ""!name='"". $tainted . ""'"";

$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code constructs an LDAP query with user-controlled input (`$tainted`) that is only sanitized using `addslashes`. This function is insufficient to prevent LDAP injection vulnerabilities as it does not escape all characters that have special meaning in LDAP queries.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-22</Weakness>
    <Description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code reads the content of an arbitrary file specified by the user using `cat /tmp/tainted.txt`. Although the filename is hardcoded, a malicious user might modify the system or application to alter the /tmp/tainted.txt file or the command executed to cause path traversal.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__shell_exec__func_addslashes__Unsafe_use_untrusted_data-tag_Name.php,"<!-- 
Unsafe sample
input : use shell_exec to cat /tmp/tainted.txt
sanitize : use of the function addslashes
File : unsafe, use of untrusted data in an tag name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = addslashes($tainted);


echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;",True,True,"echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute a command, which can lead to command injection if the input file /tmp/tainted.txt contains malicious commands. Even though addslashes is used later, it does not prevent command injection in the shell_exec call itself.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;"".  $tainted ."" href= \""/bob\"" /&gt;"" ;</Code>
    <Justification>The code echoes user-controlled input ($tainted) directly into the HTML output. While addslashes() is used, it's insufficient to prevent XSS because it only escapes single quotes, double quotes, backslashes, and NULL bytes.  An attacker can inject arbitrary HTML or JavaScript code.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__GET__func_mysql_real_escape_string__multiple_select-concatenation.php,"<?php







$tainted = $_GET['UserData'];

$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent="". $tainted . "")"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,True,"$tainted = $_GET['UserData'];

$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent="". $tainted . "")"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_GET['UserData'];

$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent="". $tainted . "")"";</Code>
    <Justification>Even after escaping the string with mysql_real_escape_string, the application is vulnerable to SQL injection because the $tainted variable is directly concatenated into the SQL query.  mysql_real_escape_string is deprecated and insufficient for robust protection against SQL injection, especially with complex injection techniques or different character sets. Using prepared statements with parameterized queries is the recommended approach to prevent SQL injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""&lt;br /&gt;"" ;
} 
mysql_close($conn);</Code>
    <Justification>The code uses the `mysql_*` functions, which are deprecated and have been removed in newer versions of PHP. These functions are no longer maintained and can introduce security vulnerabilities. The code should be updated to use `mysqli_*` or `PDO` instead.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__array-GET__func_htmlentities__Unsafe_use_untrusted_data-attribute_Name.php,"<!-- 
Unsafe sample
input : get the $_GET['userData'] in an array
sanitize : use of the function htmlentities. Sanitizes the query but has a high chance to produce unexpected results
File : unsafe, use of untrusted data in an attribute name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<body>
<?php
$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;

$tainted = htmlentities($tainted, ENT_QUOTES);


echo ""<div "". $tainted .""= bob />"" ;
?>
<h1>Hello World!</h1>
</div>
</body>
</html>","echo ""<div "". $tainted .""= bob />"" ;",True,True,"$tainted = $_GET['userData'] ;

$tainted = htmlentities($tainted, ENT_QUOTES);


echo ""<div "". $tainted .""= bob />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_GET['userData'] ;

$tainted = htmlentities($tainted, ENT_QUOTES);


echo ""&lt;div "". $tainted .""= bob />"" ;</Code>
    <Justification>The code retrieves user input from $_GET['userData'], sanitizes it with htmlentities, and then uses it to construct an HTML attribute. Even though htmlentities is used, this is still vulnerable to cross-site scripting (XSS) attacks because attribute names can contain injected code, especially when using dynamic attribute names.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__SESSION__func_htmlspecialchars__Use_untrusted_data_propertyValue_CSS-property_Value.php,"<!-- 
Unsafe sample
input : get the UserData field of $_SESSION
sanitize : use of the function htmlspecialchars. Sanitizes the query but has a high chance to produce unexpected results
File : use of untrusted data in a property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = $_SESSION['UserData'];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);


echo ""body { color :"". $tainted ."" ; }"" ;
?>
 </style> 
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :"". $tainted ."" ; }"" ;",True,True,"<?php
$tainted = $_SESSION['UserData'];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);


echo ""body { color :"". $tainted ."" ; }"" ;
?>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>&lt;?php
$tainted = $_SESSION['UserData'];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);


echo ""body { color :"". $tainted ."" ; }"" ;
?&gt;</Code>
    <Justification>The code retrieves user data from the $_SESSION['UserData'] variable and uses it to define the 'color' property of the 'body' CSS style. While htmlspecialchars is used to sanitize the input, it is not sufficient to prevent CSS injection. An attacker could inject malicious CSS code. For example, setting $_SESSION['UserData'] to '""; background-image:url(""http://example.com/malicious.js""); /*' would allow arbitrary JavaScript execution in some browsers.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__system__func_http_build_query__Unsafe_use_untrusted_data-style.php,"<!-- 
Unsafe sample
input : execute a ls command using the function system, and put the last result in $tainted
SANITIZE : use of http_build_query
File : unsafe, use of untrusted data in CSS
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = system('ls', $retval);

$tainted = http_build_query($tainted);


echo $tainted ;
?>
</style>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"$tainted = system('ls', $retval);

$tainted = http_build_query($tainted);


echo $tainted ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code uses the `system()` function to execute the 'ls' command. While the command itself is not directly influenced by user input in this specific example, `system()` executes shell commands, which can be dangerous if the input were to come from an untrusted source. Because this is presented as an unsafe sample, it's important to highlight this potential for exploitation if the command's arguments were derived from user input.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>
$tainted = system('ls', $retval);

$tainted = http_build_query($tainted);


echo $tainted ;
</Code>
    <Justification>The output of the `ls` command, after being processed by `http_build_query`, is directly echoed into the CSS style block. While `http_build_query` might sanitize for URL parameters, it doesn't inherently sanitize for CSS context. If the output of `ls` contains characters that have special meaning in CSS (e.g., quotes, semicolons, or angle brackets due to file names), it could potentially break the CSS or introduce XSS if attacker-controlled filenames could be listed.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__unserialize__func_FILTER-CLEANING-full_special_chars_filter__join-interpretation_simple_quote.php,"<?php







$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     

$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses unserialize() on user-supplied data ($_POST['UserData']), which can lead to arbitrary code execution if the serialized data is malicious.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";</Code>
    <Justification>The code directly incorporates the `$tainted` variable into an SQL query without proper sanitization, leading to a SQL injection vulnerability. Even though the code attempts to sanitize, it uses FILTER_SANITIZE_FULL_SPECIAL_CHARS, but it is still vulnerable.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;

$res = mysql_query($query); </Code>
    <Justification>The code uses the mysql_* functions, which are deprecated. This makes the code harder to maintain and less secure.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__exec__func_FILTER-VALIDATION-email_filter__Unsafe_use_untrusted_data-attribute_Name.php,"<!-- 
Unsafe sample
input : use exec to execute the script /tmp/tainted.php and store the output in $tainted
Flushes content of $sanitized if the filter email_filter is not applied
File : unsafe, use of untrusted data in an attribute name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<body>
<?php
$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""<div "". $tainted .""= bob />"" ;
?>
<h1>Hello World!</h1>
</div>
</body>
</html>","echo ""<div "". $tainted .""= bob />"" ;",True,True,"echo ""<div "". $tainted .""= bob />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The code uses exec() to execute an external script without proper sanitization. This allows for command injection if the script's content is malicious or controllable by an attacker.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;div "". $tainted .""= bob />"" ;</Code>
    <Justification>The code uses unsanitized input ($tainted) directly within an HTML attribute name. This allows for XSS if $tainted contains malicious JavaScript code, which will be executed when the page is rendered.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>exec($script, $result, $return);</Code>
    <Justification>The code does not check the return value ($return) of the exec() function. If the execution fails, the program might proceed with an empty or incorrect $result, leading to unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>exec($script, $result, $return);</Code>
    <Justification>The use of the 'exec' function is discouraged due to potential security risks if not handled carefully, as it can execute arbitrary commands on the system. Modern alternatives with better control and sanitization options exist.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-703</Weakness>
    <Description>Improper Check or Handling of Exceptional Conditions</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>exec($script, $result, $return);
$tainted = $result[0];</Code>
    <Justification>The code assumes that $result[0] will always contain a value after exec() is called. If the executed script produces no output, accessing $result[0] will result in an undefined index error. There is no check to ensure the $result array is not empty.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-434</Weakness>
    <Description>Unrestricted Upload of File with Dangerous Type</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$script = ""/tmp/tainted.php"";
exec($script, $result, $return);</Code>
    <Justification>While not directly uploading, the code executes a PHP script located at /tmp/tainted.php. If an attacker can upload a malicious PHP script to /tmp/tainted.php, they can achieve arbitrary code execution on the server when this code is run.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__object-Array__func_addslashes__not_name-sprintf_%s_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = addslashes($tainted);

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query using user-controlled input ($_GET['UserData']). While addslashes() is used, it's not sufficient to prevent LDAP injection because it primarily escapes characters for database queries, not LDAP queries.  An attacker could manipulate the input to inject arbitrary LDAP commands.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);</Code>
    <Justification>The code uses a hardcoded LDAP server address (""localhost""). While ""localhost"" itself isn't a credential, hardcoding server addresses can limit deployment flexibility and increase the risk if the application needs to be moved to a different environment, potentially exposing the internal network structure.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code does not check the return values of `ldap_connect`, `ldap_bind`, and `ldap_search`. If any of these functions fail, the script will continue execution, potentially leading to errors or unexpected behavior. For example, if `ldap_connect` fails, `ldap_bind` will operate on a null resource, causing a fatal error. Similarly, an unsuccessful `ldap_search` could return false, leading to further issues if the result is not checked.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-1051</Weakness>
    <Description>Initialization with Hard-Coded Network Resource Configuration Data</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); </Code>
    <Justification>The LDAP server address (""localhost"") is hard-coded.  This makes it difficult to change the server address without modifying the code.  Configuration should be externalized.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-1052</Weakness>
    <Description>Excessive Use of Hard-Coded Literals in Initialization</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The LDAP base DN (""o=My Company, c=US"") is hard-coded directly into the `ldap_search` call.  This reduces maintainability as changes to the directory structure require code modifications.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__proc_open__func_htmlentities__Unsafe_use_untrusted_data-comment.php,"<!-- 
Unsafe sample
input : use proc_open to read /tmp/tainted.txt
sanitize : use of the function htmlentities. Sanitizes the query but has a high chance to produce unexpected results
File : unsafe, use of untrusted data in a comment
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<!--
<?php
$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}

$tainted = htmlentities($tainted, ENT_QUOTES);


echo $tainted ;
?>
-->
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,echo $tainted ;,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo $tainted ;</Code>
    <Justification>The tainted data, even after htmlentities, is echoed into the HTML page.  While htmlentities attempts to sanitize, it may not be sufficient to prevent all XSS attacks, depending on the context. If the output context expects a specific type of data that htmlentities does not fully sanitize, XSS is possible. Therefore, proper output encoding based on the output context is recommended.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);</Code>
    <Justification>The code uses proc_open to execute a command. Even though the command itself is hardcoded ('more /tmp/tainted.txt'), the vulnerability exists because proc_open takes user-controlled input indirectly through the contents of /tmp/tainted.txt.  If the contents of /tmp/tainted.txt are attacker-controlled, the attacker could inject shell commands via the filename.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);</Code>
    <Justification>The code does not check the return values of fclose, stream_get_contents, and proc_close. Failure of these operations could lead to unexpected behavior, such as incomplete data being read or resources not being released correctly.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-directGet__func_preg_replace__Unsafe_use_untrusted_data-tag_Name.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object
SANITIZE : use of preg_replace
File : unsafe, use of untrusted data in an tag name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();

$tainted = preg_replace('/\'/', '', $tainted);


echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;",True,True,"echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;"".  $tainted ."" href= \""/bob\"" /&gt;"" ;</Code>
    <Justification>The code takes user-controlled input ($tainted) and uses it directly within an HTML tag name without sufficient sanitization beyond stripping single quotes. This could allow an attacker to inject arbitrary HTML/JavaScript code by manipulating the tag name itself or inserting attributes, leading to Cross-Site Scripting (XSS). Even with the preg_replace, an attacker can still inject code since the tag name is directly constructed from the tainted input.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-Array__func_addslashes__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object, which store it in a array
sanitize : use of the function addslashes
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = addslashes($tainted);


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",True,True,"echo ""window.setInterval('"". $tainted .""');""","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""window.setInterval('"". $tainted .""');""</Code>
    <Justification>The code uses user-controlled input ($tainted) within the setInterval function without proper neutralization for the context of JavaScript. While addslashes is used, it's not sufficient to prevent XSS because it only escapes certain characters, and the single quotes used to delimit the string allow for injection of arbitrary JavaScript code. This leads to a cross-site scripting vulnerability.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__popen__func_FILTER-VALIDATION-email_filter__username-concatenation_simple_quote.php,"<?php







$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""user[username='"". $tainted . ""']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The code uses popen to execute a command. If the file /tmp/tainted.txt is controlled by an attacker, they can inject arbitrary commands.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-643</Weakness>
    <Description>Improper Neutralization of Data within XPath Expressions ('XPath Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""user[username='"". $tainted . ""']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code constructs an XPath query using unsanitized data from $tainted. An attacker could inject malicious XPath code to extract or manipulate data from the XML file.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The code does not check the return value of popen, fread, or pclose. If any of these functions fail, the program may continue to execute with invalid data or resources, leading to unpredictable behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-703</Weakness>
    <Description>Improper Check or Handling of Exceptional Conditions</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The code attempts to validate an email address but sets $tainted to an empty string if validation fails.  This might be an inadequate error handling strategy if $tainted is later used without proper checks, potentially causing unexpected behavior elsewhere in the application.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__unserialize__func_mysql_real_escape_string__multiple_select-concatenation.php,"<?php







$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent="". $tainted . "")"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,True,"$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent="". $tainted . "")"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT * FROM COURSE c WHERE c.id IN (SELECT idcourse FROM REGISTRATION WHERE idstudent="". $tainted . "")"";</Code>
    <Justification>The code is vulnerable to SQL injection. Even though `mysql_real_escape_string` is used, the value is unserialized beforehand, opening a window for object injection attacks or bypasses.  Furthermore, `mysql_real_escape_string` is deprecated, increasing the risk of future vulnerabilities. The untrusted data from $_POST['UserData'] is unserialized and directly incorporated into the SQL query without proper sanitization or using parameterized queries.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses `unserialize` on user-supplied data (`$_POST['UserData']`). This is extremely dangerous because it allows an attacker to instantiate arbitrary objects, potentially leading to remote code execution or other severe security breaches.  Even if the serialized data is later escaped with `mysql_real_escape_string`, the object instantiation itself can have malicious side effects before the escaping occurs.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;

$res = mysql_query($query);</Code>
    <Justification>The code uses the `mysql_connect` and `mysql_query` functions, which are deprecated. This means they are no longer actively maintained and may contain security vulnerabilities that will not be fixed. The use of deprecated functions can introduce security risks and should be replaced with mysqli or PDO.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query);</Code>
    <Justification>The code does not check the return values of `mysql_connect`, `mysql_select_db` and `mysql_query`. If these functions fail (e.g., due to incorrect credentials or database unavailable), the script will continue to execute, potentially leading to unpredictable behavior or errors later on. The code needs to add error checking after each of these calls to make sure the operations were successful.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The code contains hard-coded database credentials (`mysql_user`, `mysql_password`). This is a major security risk, as anyone who can view the source code can gain access to the database. These credentials should be stored securely, such as in environment variables or a configuration file with restricted access.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__object-directGet__func_preg_match-no_filtering__data-interpretation_simple_quote.php,"<?php







class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = ""' $tainted '"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$query = ""' $tainted '"";\n\n\n$xml = simplexml_load_file(""users.xml"");\necho ""query : "". $query .""<br /><br />"" ;\n\n$res=$xml->xpath($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""' $tainted '"";\n\n\n$xml = simplexml_load_file(""users.xml"");\necho ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;\n\n$res=$xml->xpath($query);</Code>
    <Justification>The code constructs an XPath query using unsanitized user input ($tainted). An attacker can inject malicious XPath expressions to extract sensitive information or manipulate the XML data. Even though a regular expression is used, it allows any character, making it ineffective against XPath injection.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__fopen__no_sanitizing__select_from_where-sprintf_%s_simple_quote.php,"<?php







$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}



$query = sprintf(""SELECT * FROM student where id='%s'"", $tainted);


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = sprintf(""SELECT * FROM student where id='%s'"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""SELECT * FROM student where id='%s'"", $tainted);</Code>
    <Justification>The code uses sprintf to construct a SQL query with unsanitized input from $tainted, which is read from a file. This allows for SQL injection vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>mysql_select_db('dbname') ;</Code>
    <Justification>The return value of mysql_select_db is not checked. If the database selection fails, the subsequent query will operate on the default database or fail, leading to unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The return value of mysql_connect is not checked. If the connection fails, the script will proceed to use a null connection, leading to errors.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$res = mysql_query($query);</Code>
    <Justification>The return value of mysql_query is not checked. If the query fails, the script will continue to process a potentially null result, leading to errors.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""&lt;br /&gt;"" ;
} 
mysql_close($conn);</Code>
    <Justification>The code uses the `mysql_*` functions, which are deprecated and insecure. These functions are vulnerable to SQL injection and other attacks.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-703</Weakness>
    <Description>Improper Check or Handling of Exceptional Conditions</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }</Code>
    <Justification>While the code checks if fgets returns false, it simply assigns an empty string to $tainted. A more robust error handling mechanism, such as logging the error or terminating the script, could improve reliability.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__POST__func_FILTER-CLEANING-email_filter__Use_untrusted_data_script-side_Quoted_Expr.php,"<!-- 
Unsafe sample
input : get the field UserData from the variable $_POST
Uses an email_filter via filter_var function
File : use of untrusted data in one side of a quoted expression in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$tainted = $_POST['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""x='"". $tainted .""'"" ;
?>
</script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""x='"". $tainted .""'"" ;",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-95</Weakness>
    <Description>Improper Neutralization of Directives in Statically Defined Script ('Static Code Injection')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""x='"". $tainted .""'"" ;</Code>
    <Justification>The code echoes user-controlled data ($tainted) directly into a JavaScript string literal without proper neutralization. This could allow an attacker to inject arbitrary JavaScript code by manipulating the input to include malicious code, potentially leading to cross-site scripting (XSS) vulnerabilities.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__SESSION__no_sanitizing__Use_untrusted_data_propertyValue_CSS-double_Quoted_Property_Value.php,"<!-- 
Unsafe sample
input : get the UserData field of $_SESSION
sanitize : none
File : use of untrusted data in a double quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = $_SESSION['UserData'];




echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\"""". $tainted .""\"" ; }"" ;",True,True,"echo ""body { color :\"""". $tainted .""\"" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\"""". $tainted .""\"" ; }"" ;</Code>
    <Justification>The code directly embeds user-controlled data from $_SESSION['UserData'] into the CSS style within double quotes, without proper sanitization. This allows an attacker to inject arbitrary CSS or even escape the style context and inject HTML/JavaScript, leading to XSS.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__fopen__func_FILTER-CLEANING-full_special_chars_filter__Unsafe_use_untrusted_data-tag_Name.php,"<!-- 
Unsafe sample
input : use fopen to read /tmp/tainted.txt and put the first line in $tainted
Uses a full_special_chars_filter via filter_var function
File : unsafe, use of untrusted data in an tag name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     


echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;",True,True,"echo ""<"".  $tainted ."" href= \""/bob\"" />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;"".  $tainted ."" href= \""/bob\"" /&gt;"" ;</Code>
    <Justification>The code uses external input to construct a tag name, but it does not neutralize or incorrectly neutralizes user-controllable input before it is placed in output that is used as a web page that is served to other users. This can lead to cross-site scripting.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-22</Weakness>
    <Description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$handle = @fopen(""/tmp/tainted.txt"", ""r"");</Code>
    <Justification>The code opens a file using a hardcoded path. If an attacker can control the contents of /tmp/tainted.txt, they can potentially perform path traversal by injecting ""../"" sequences into the file content, leading to reading of arbitrary files.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }</Code>
    <Justification>The code reads a line from a file, but only checks if `fgets` returns `false`. `fgets` can also return a string, including an empty string, if it reads something from the file. The code does not handle the case when an empty string is read, potentially leading to unexpected behavior if the rest of the code relies on the assumption that `$tainted` should not be empty in certain scenarios.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-391</Weakness>
    <Description>Unchecked Error Condition</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$handle = @fopen(""/tmp/tainted.txt"", ""r"");</Code>
    <Justification>The code uses the `@` operator to suppress errors from `fopen`. This means that if `fopen` fails, the code will not be notified of the error, and will continue execution as if the file was opened successfully. This could lead to unexpected behavior or security vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);</Code>
    <Justification>Using `FILTER_SANITIZE_FULL_SPECIAL_CHARS` may not provide complete protection against all possible XSS vectors depending on the context where the data is used. It might be considered an obsolete approach if newer, more comprehensive sanitization techniques are available.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-703</Weakness>
    <Description>Improper Check or Handling of Exceptional Conditions</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}</Code>
    <Justification>The code checks if the file handle is valid, but it does not handle potential errors that may occur during `fgets` or `fclose`. For example, `fclose` could fail, and the code would not be aware of this.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__unserialize__func_FILTER-CLEANING-number_float_filter__Use_untrusted_data_propertyValue_CSS-double_Quoted_Property_Value.php,"<!-- 
Unsafe sample
input : Get a serialize string in POST and unserialize it
Uses a number_float_filter via filter_var function
File : use of untrusted data in a double quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$sanitized = filter_var($tainted, FILTER_SANITIZE_NUMBER_FLOAT);
if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\"""". $tainted .""\"" ; }"" ;",True,True,"echo ""body { color :\"""". $tainted .""\"" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code directly unserializes data from user input ($_POST['UserData']) without any validation. This can lead to arbitrary code execution if the serialized data is malicious.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\"""". $tainted .""\"" ; }"" ;</Code>
    <Justification>The code echoes user-controlled data ($tainted) directly into a CSS property within a double-quoted string, which may lead to XSS vulnerabilities if the input contains malicious characters or code that bypasses the sanitization and validation. Even with sanitization, it's safer to properly encode the output to prevent unexpected behavior.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__shell_exec__func_htmlentities__Unsafe_use_untrusted_data-comment.php,"<!-- 
Unsafe sample
input : use shell_exec to cat /tmp/tainted.txt
sanitize : use of the function htmlentities. Sanitizes the query but has a high chance to produce unexpected results
File : unsafe, use of untrusted data in a comment
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<!--
<?php
$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = htmlentities($tainted, ENT_QUOTES);


echo $tainted ;
?>
-->
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"$tainted = htmlentities($tainted, ENT_QUOTES);


echo $tainted ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute a command constructed with external input, without proper neutralization of special elements, leading to command injection vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = htmlentities($tainted, ENT_QUOTES);


echo $tainted ;</Code>
    <Justification>The code sanitizes user input with htmlentities, then prints it within HTML comments. Even though HTML comments aren't directly rendered, vulnerabilities can arise if a system processes or extracts data from these comments, or if the comments are inadvertently exposed.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__fopen__func_htmlspecialchars__userByCN-interpretation_simple_quote.php,"<?php







$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""(&(objectCategory=person)(objectClass=user)(cn=' $tainted '))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,False,"$query = ""(&(objectCategory=person)(objectClass=user)(cn=' $tainted '))"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""(&(objectCategory=person)(objectClass=user)(cn=' $tainted '))"";</Code>
    <Justification>The code constructs an LDAP query by directly embedding user-controlled data (`$tainted`) without proper sanitization or escaping. This can lead to LDAP injection vulnerabilities, allowing an attacker to modify the query and potentially access or modify sensitive information.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__backticks__no_sanitizing__select_from_where-interpretation.php,"<?php







$tainted = `cat /tmp/tainted.txt`;



$query = ""SELECT * FROM student where id= $tainted "";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = ""SELECT * FROM student where id= $tainted "";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code uses backticks to execute a shell command with user-controlled input. This is vulnerable to command injection, as an attacker can inject arbitrary commands into the executed string.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""SELECT * FROM student where id= $tainted "";</Code>
    <Justification>The code directly incorporates the `$tainted` variable into the SQL query without proper sanitization, leading to a SQL injection vulnerability.  An attacker could manipulate the `$tainted` variable to inject arbitrary SQL code.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The code does not check the return value of `mysql_connect()`. If the connection fails, $conn will be false, and the subsequent mysql_select_db() call will result in an error.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>mysql_select_db('dbname') ;</Code>
    <Justification>The code does not check the return value of `mysql_select_db()`. If the database selection fails, subsequent queries will also fail.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$res = mysql_query($query);</Code>
    <Justification>The code does not check the return value of `mysql_query()`. If the query fails, `$res` will be false and `mysql_fetch_array()` will result in an error.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');
mysql_select_db('dbname') ;
$res = mysql_query($query);
while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""&lt;br /&gt;"" ;
}
mysql_close($conn);</Code>
    <Justification>The code uses the `mysql_*` functions, which are deprecated and have been removed in PHP 7 and later. Using deprecated functions makes the code harder to maintain and potentially less secure as these functions may no longer receive security updates.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__system__func_FILTER-VALIDATION-email_filter__Use_untrusted_data_attribute-unquoted_Attr.php,"<!-- 
Unsafe sample
input : execute a ls command using the function system, and put the last result in $tainted
Flushes content of $sanitized if the filter email_filter is not applied
File : use of untrusted data in a unquoted attribute
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$tainted = system('ls', $retval);

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""<div id="". $tainted ."">content</div>"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<div id="". $tainted ."">content</div>"" ;",True,True,"echo ""<div id="". $tainted ."">content</div>"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code uses the `system()` function to execute the `ls` command. The output of this command is then used later in the code. While the command itself is hardcoded, the function `system()` is often a source of security vulnerabilities if the arguments are influenced by user input, since this could allow command injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;div id="". $tainted .""&gt;content&lt;/div&gt;"" ;</Code>
    <Justification>The code echoes the variable `$tainted` directly into the HTML output as an attribute value within a div tag. If `$tainted` contains HTML metacharacters, script, or other malicious content, it will be rendered in the user's browser, leading to Cross-Site Scripting (XSS).</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The return value of the `system()` call is not checked.  If the command fails, `$tainted` might not be properly initialized. Depending on the system, a failure might return NULL or an error code, which is then directly used in HTML. This lack of error handling can lead to unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-571</Weakness>
    <Description>Expression is Always True</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The variable `$sanitized` is not initialized before being used in the `filter_var` function. Therefore, it's likely to be `null` or undefined, which might lead to unexpected behavior. This expression might always evaluate to false if `$sanitized` is null, leading to `$tainted` always being assigned an empty string, regardless of intended logic.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__unserialize__func_htmlentities__Unsafe_use_untrusted_data-attribute_Name.php,"<!-- 
Unsafe sample
input : Get a serialize string in POST and unserialize it
sanitize : use of the function htmlentities. Sanitizes the query but has a high chance to produce unexpected results
File : unsafe, use of untrusted data in an attribute name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<body>
<?php
$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$tainted = htmlentities($tainted, ENT_QUOTES);


echo ""<div "". $tainted .""= bob />"" ;
?>
<h1>Hello World!</h1>
</div>
</body>
</html>","echo ""<div "". $tainted .""= bob />"" ;",True,True,"$tainted = htmlentities($tainted, ENT_QUOTES);


echo ""<div "". $tainted .""= bob />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses unserialize() on user-provided data from $_POST['UserData']. This can lead to arbitrary code execution if the serialized data is maliciously crafted.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = htmlentities($tainted, ENT_QUOTES);


echo ""&lt;div "". $tainted .""= bob />"" ;</Code>
    <Justification>The code sanitizes the tainted data using htmlentities() but then uses it within an HTML attribute name.  While htmlentities() escapes characters to prevent direct script injection, it doesn't prevent all forms of XSS when used in an attribute name, as certain characters can still be used to break out of the attribute and inject malicious code.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__popen__whitelist_using_array__Use_untrusted_data_attribute-Double_Quote_Attr.php,"<!-- 
Unsafe sample
input : Uses popen to read the file /tmp/tainted.txt using cat command
SANITIZE : use in_array to check if $tainted is in the white list
File : use of untrusted data in a doubled quote attribute
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

$legal_table = array(""safe1"", ""safe2"");
if (in_array($tainted, $legal_table, true)) {
  $tainted = $tainted;
} else {
  $tainted = $legal_table[0];
}


echo ""<div id=\"""". $tainted .""\"">content</div>"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<div id=\"""". $tainted .""\"">content</div>"" ;",True,True,"echo ""<div id=\"""". $tainted .""\"">content</div>"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;div id=\"""". $tainted .""\"">content&lt;/div&gt;"" ;</Code>
    <Justification>The code echoes user-controlled input ($tainted) into an HTML attribute without proper neutralization. Although the $tainted variable is sanitized by checking if it's in the whitelist, it's still outputted into an HTML attribute which may allow for Cross-Site Scripting (XSS) if the 'safe' values themselves contain characters that are special in HTML attributes (e.g., quotation marks, greater-than/less-than signs). Because the id is in double quotes, a crafted safe value could escape the attribute context and inject arbitrary HTML/JavaScript.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');</Code>
    <Justification>The code uses popen to execute a command to read the contents of '/tmp/tainted.txt'. While the command itself is hardcoded, the existence of '/tmp/tainted.txt' and its contents is not controlled. This introduces a command injection vulnerability where a malicious actor could modify the content of the file and influence the execution of the code. While not directly injecting commands, controlling the file's content is an indirect injection. It's better to use file_get_contents if just reading the file, or sanitize the file path if user controlled.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The code does not check the return value of `popen()`, `fread()`, or `pclose()`. If `popen()` fails to open the process, `$handle` will be false. `fread()` might fail and return false if there is an issue reading from the file handle. If `pclose()` fails, it could indicate issues closing the pipe to the command. Failing to check these return values can lead to unexpected behavior if any of these functions fail, and could impact the reliability of the software.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-480</Weakness>
    <Description>Use of Incorrect Operator</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if (in_array($tainted, $legal_table, true)) {
  $tainted = $tainted;
} else {
  $tainted = $legal_table[0];
}</Code>
    <Justification>While likely intentional, the assignment `$tainted = $tainted;` inside the `if` block serves no purpose and makes the code harder to read. It should be removed to improve clarity and maintainability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>While not strictly obsolete, `popen` is a lower-level function that is generally discouraged in favor of more modern alternatives like `proc_open` or `file_get_contents` (for reading a file). `popen` can be more difficult to manage and introduces a potential security risk if the command being executed is not carefully controlled.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__SESSION__func_FILTER-VALIDATION-number_float_filter__Unsafe_use_untrusted_data-script.php,"<!-- 
Unsafe sample
input : get the UserData field of $_SESSION
Flushes content of $sanitized if the filter number_float_filter is not applied
File : unsafe, use of untrusted data in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$tainted = $_SESSION['UserData'];

if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo $tainted ;
?>
</script>
</head>
<body onload=""xss()"">
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"$tainted = $_SESSION['UserData'];

if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo $tainted ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>  $tainted = $_SESSION['UserData'];

if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo $tainted ;</Code>
    <Justification>The code retrieves the UserData field from the $_SESSION array and assigns it to the $tainted variable. If the $sanitized variable is not a valid float, $tainted is set to an empty string. However, there is no sanitization of the $tainted variable before echoing it directly into the script block. This allows for a Cross-Site Scripting (XSS) vulnerability, where an attacker could inject malicious JavaScript code into the UserData session variable, which would then be executed by the victim's browser.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__GET__func_addslashes__Unsafe_use_untrusted_data-script.php,"<!-- 
Unsafe sample
input : reads the field UserData from the variable $_GET
sanitize : use of the function addslashes
File : unsafe, use of untrusted data in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$tainted = $_GET['UserData'];

$tainted = addslashes($tainted);


echo $tainted ;
?>
</script>
</head>
<body onload=""xss()"">
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"<?php
$tainted = $_GET['UserData'];

$tainted = addslashes($tainted);


echo $tainted ;
?>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>
&lt;?php
$tainted = $_GET['UserData'];

$tainted = addslashes($tainted);


echo $tainted ;
?&gt;
    </Code>
    <Justification>The code retrieves user input from $_GET['UserData'], uses addslashes() which is not sufficient to prevent XSS and then outputs it directly into the &lt;script&gt; tag. This allows an attacker to inject arbitrary JavaScript code, leading to Cross-Site Scripting (XSS).</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__system__func_htmlspecialchars__name-sprintf_%s_simple_quote.php,"<?php







$tainted = system('ls', $retval);

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = sprintf(""name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = system('ls', $retval);
$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = sprintf(""name='%s'"", $tainted);

$sr=ldap_search($ds,""o=My Company, c=US"", $query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The `system()` function executes an external program. The input to this function comes directly from the system without any sanitization. An attacker could potentially inject arbitrary commands into the system if the `ls` command or its environment is modifiable.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);
$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = sprintf(""name='%s'"", $tainted);

$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code constructs an LDAP query using unsanitized input `$tainted`. Although `htmlspecialchars` is used, it doesn't prevent LDAP injection vulnerabilities. Special characters in LDAP queries (e.g., *, (, )) can be used to inject malicious code or modify the intended query, potentially allowing unauthorized access or information disclosure. Specifically, the output from system is passed into the ldap query. Even though htmlspecialchars is used to sanitize, it is not an appropriate measure for ldap queries.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-classicGet__func_FILTER-CLEANING-email_filter__Use_untrusted_data_script-side_Quoted_Expr.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object
Uses an email_filter via filter_var function
File : use of untrusted data in one side of a quoted expression in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input;
  }

  public  function __construct(){
   $this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""x='"". $tainted .""'"" ;
?>
</script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""x='"". $tainted .""'"" ;",True,True,"echo ""x='"". $tainted .""'"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""x='"". $tainted .""'"" ;</Code>
    <Justification>The code echoes unsanitized data from $tainted into a Javascript variable x, which is vulnerable to Cross-Site Scripting (XSS). Even though email sanitization is applied, XSS can still occur if the input contains characters that, while valid in email addresses, can break out of the string context in JavaScript. For example, an email like '\""-alert(1)-\""@example.com' would still be considered a valid email but inject arbitrary JavaScript. The use of single quotes around the php echo statement can be bypassed.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__object-directGet__func_FILTER-CLEANING-email_filter__userByCN-concatenation_simple_quote.php,"<?php







class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,False,"$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";</Code>
    <Justification>The code constructs an LDAP query by directly embedding user-provided data ($tainted) into the query string. This can lead to LDAP injection vulnerabilities if the input is not properly sanitized, allowing attackers to bypass authentication, extract sensitive information, or modify directory contents.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind, and ldap_search. If any of these functions fail (e.g., due to network issues, invalid credentials, or an invalid query), the script will continue to execute, potentially leading to unexpected behavior or security vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind, and ldap_search. A failure in ldap_bind could allow anonymous access. A failure in ldap_search could allow unintended access. These failures could be exploited for unauthorized access or information disclosure.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-1051</Weakness>
    <Description>Initialization with Hard-Coded Network Resource Configuration Data</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost"");</Code>
    <Justification>The LDAP server address (""localhost"") is hard-coded into the script. This makes it difficult to change the LDAP server without modifying the code. Externalizing configuration data improves maintainability.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__shell_exec__func_mysql_real_escape_string__select_from_where-interpretation.php,"<?php







$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT * FROM student where id= $tainted "";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,True,"$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT * FROM student where id= $tainted "";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = mysql_real_escape_string($tainted);

$query = ""SELECT * FROM student where id= $tainted "";</Code>
    <Justification>Even after using mysql_real_escape_string, an SQL injection vulnerability remains because the tainted data is directly embedded into the SQL query. While mysql_real_escape_string escapes characters that could be used to inject SQL, it doesn't prevent all forms of SQL injection, particularly if the database character set is different from the application's.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;

$res = mysql_query($query); </Code>
    <Justification>The mysql_* functions are deprecated and should not be used. They are inherently insecure and have been removed in PHP 7.  mysqli or PDO should be used instead.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;

$res = mysql_query($query); </Code>
    <Justification>The code does not check the return values of `mysql_connect`, `mysql_select_db`, and `mysql_query`. If any of these functions fail, the script will continue to execute, potentially leading to unexpected behavior or errors.  It's crucial to check the return values to ensure the database connection and query execution were successful.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); </Code>
    <Justification>The code uses hard-coded database credentials (`mysql_user`, `mysql_password`). This is a critical security vulnerability because anyone with access to the source code can gain access to the database.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-404</Weakness>
    <Description>Improper Resource Shutdown or Release</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>mysql_close($conn);</Code>
    <Justification>While the code does close the database connection, failure to do so in all possible code paths (e.g., if an earlier operation fails) can lead to resource exhaustion. It is best to use try...finally to ensure the connection is closed.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses `shell_exec` to execute a command based on a file's contents. If the file `/tmp/tainted.txt` is controllable by an attacker, they can inject arbitrary commands, leading to command injection. There is no sanitization of the input to prevent this.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__SESSION__ternary_white_list__Unsafe_use_untrusted_data-script.php,"<!-- 
Unsafe sample
input : get the UserData field of $_SESSION
sanitize : use of ternary condition
File : unsafe, use of untrusted data in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$tainted = $_SESSION['UserData'];

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo $tainted ;
?>
</script>
</head>
<body onload=""xss()"">
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"<script>
<?php
$tainted = $_SESSION['UserData'];

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo $tainted ;
?>
</script>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>&lt;script&gt;
&lt;?php
$tainted = $_SESSION['UserData'];

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo $tainted ;
?&gt;
&lt;/script&gt;</Code>
    <Justification>The code retrieves user data from $_SESSION['UserData'] and echoes it directly into a script tag without proper sanitization. While a ternary operator is used, it only limits the value to 'safe1' or 'safe2', which still allows for potentially malicious script execution. This lack of proper neutralization can lead to Cross-Site Scripting (XSS) vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_SESSION['UserData'];</Code>
    <Justification>The code retrieves data directly from the $_SESSION['UserData'] variable. If the session data contains serialized objects, it might be vulnerable to deserialization attacks if the application doesn't properly validate the data, potentially leading to arbitrary code execution.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__fopen__func_FILTER-VALIDATION-email_filter__username-sprintf_%s_simple_quote.php,"<?php







$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = sprintf(""user[username='%s']"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$query = sprintf(""user[username='%s']"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""user[username='%s']"", $tainted);</Code>
    <Justification>The code uses sprintf to construct an XPath query using a tainted variable $tainted. If $tainted contains special characters, it can lead to XPath injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""user[username='%s']"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code constructs an XPath query using user-provided input ($tainted) without proper sanitization, leading to potential XML/XPath injection vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }</Code>
    <Justification>The code does not handle the case where fgets returns false (an error occurred) other than to assign an empty string. The specific error is not handled.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-391</Weakness>
    <Description>Unchecked Error Condition</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$handle = @fopen(""/tmp/tainted.txt"", ""r"");</Code>
    <Justification>The code uses the error suppression operator '@' when opening the file.  This hides any potential errors that might occur, such as the file not existing or the script not having the correct permissions to read the file. These errors should be handled gracefully.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-424</Weakness>
    <Description>Improper Protection of Alternate Path</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The code attempts to validate the email, but if validation fails it assignes an empty string to $tainted. If there is no default case or alternate protection in place, a malicious user may be able to bypass this validation and inject arbitrary code through another path</Justification>
  </Issue>
</Issues>
```"
