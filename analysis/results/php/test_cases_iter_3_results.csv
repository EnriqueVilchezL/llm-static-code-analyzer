Test Case Weakness,Test Case File,Test Case Code,Test Case Line,LLM Hit CWE,LLM Hit Code,LLM Code,LLM Complete Response
CWE-90,src/CWE_90__array-GET__func_preg_replace2__userByCN-sprintf_%s_simple_quote.php,"<?php







$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;

$tainted = preg_replace('/\W/si','',$tainted);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,False,"$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);</Code>
    <Justification>The code constructs an LDAP query using user-supplied data ($tainted) without proper neutralization of special elements. Although the code uses preg_replace to remove non-alphanumeric characters from $tainted, this is insufficient to prevent LDAP injection attacks. Attackers can still manipulate the query logic by using escaped characters or other LDAP-specific syntax.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);</Code>
    <Justification>The ldap_bind function is called without any credentials. This can be seen as a hardcoded anonymous authentication, which might allow unauthorized access depending on the LDAP server configuration.  If the LDAP server requires authentication but the code attempts to bind anonymously, it could lead to unexpected behavior or denial of service.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__unserialize__func_addslashes__not_name-interpretation_simple_quote.php,"<?php







$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$tainted = addslashes($tainted);

$query = ""!name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = addslashes($tainted);

$query = ""!name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses unserialize() on user-supplied data ($_POST['UserData']). This can lead to arbitrary code execution if the serialized data contains objects of classes that have ""magic methods"" (e.g., __wakeup, __destruct) or if the application uses autoloading in conjunction with class names present in the serialized data. An attacker could craft a malicious serialized payload that, when unserialized, triggers the execution of arbitrary code. This is a high-severity vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = addslashes($tainted);

$query = ""!name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query by concatenating a user-controlled value ($tainted) directly into the query string. While addslashes() is used, it is insufficient to prevent LDAP injection attacks in all cases. Attackers could still manipulate the query logic, bypass authentication, or retrieve sensitive information. The severity is high because successful exploitation can lead to unauthorized access and data compromise.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__unserialize__func_FILTER-CLEANING-magic_quotes_filter__userByCN-interpretation_simple_quote.php,"<?php







$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      

$query = ""(&(objectCategory=person)(objectClass=user)(cn=' $tainted '))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,False,"$query = ""(&(objectCategory=person)(objectClass=user)(cn=' $tainted '))"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses unserialize() on user-supplied data from $_POST['UserData'], which can lead to arbitrary code execution if the serialized data is malicious.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""(&(objectCategory=person)(objectClass=user)(cn=' $tainted '))"";</Code>
    <Justification>The code constructs an LDAP query by directly embedding user-controlled data ($tainted) into the query string without proper sanitization. This can lead to LDAP injection vulnerabilities, allowing attackers to modify the query and potentially access sensitive information or perform unauthorized actions.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code does not check the return values of ldap_connect(), ldap_bind(), and ldap_search(). Failure to check these return values can lead to unexpected behavior if the LDAP connection fails, the bind operation fails, or the search operation fails. This could lead to denial of service or other security vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code does not check the return values of ldap_connect(), ldap_bind(), and ldap_search(). If any of these functions fail, the script will continue to execute, potentially leading to unexpected behavior or errors.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__proc_open__func_htmlentities__userByCN-sprintf_%s_simple_quote.php,"<?php







$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = htmlentities($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}</Code>
    <Justification>The code executes an external command ('more /tmp/tainted.txt') using proc_open. While the command itself is static, the potential for command injection exists if 'more' or other system utilities are configured in a way that allows command execution via arguments or configuration files.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = htmlentities($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query using sprintf with user-controlled input ($tainted). While htmlentities is used, it might not be sufficient to neutralize all characters that could be used to inject malicious LDAP syntax, leading to LDAP injection vulnerabilities.  ENT_QUOTES might mitigate some XSS, but is insufficient for LDAP injection.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind, and ldap_search. If any of these functions fail, the script will continue to execute, potentially leading to unexpected behavior or errors.  ldap_close return value is also not checked.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__SESSION__func_FILTER-VALIDATION-email_filter__Use_untrusted_data-div.php,"<!-- 
Unsafe sample
input : get the UserData field of $_SESSION
Flushes content of $sanitized if the filter email_filter is not applied
File : use of untrusted data in a div tag
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<div>
<?php
$tainted = $_SESSION['UserData'];

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo $tainted ;
?>
</div>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,echo $tainted ;,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo $tainted ;</Code>
    <Justification>The code directly echoes the `$tainted` variable, which is derived from `$_SESSION['UserData']`, into the HTML output without proper sanitization or encoding. If `$_SESSION['UserData']` contains malicious script, it will be executed in the user's browser, leading to a Cross-Site Scripting (XSS) vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))</Code>
    <Justification>The code uses filter_var with FILTER_VALIDATE_EMAIL on `$sanitized` when `$sanitized` is not initialized. This might lead to unexpected behaviour.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-457</Weakness>
    <Description>Use of uninitialized variable</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The code uses the variable `$sanitized` within the `filter_var` function before it has been initialized. This can lead to unpredictable behavior and potentially expose the application to vulnerabilities if the uninitialized variable contains unexpected data.</Justification>
  </Issue>
</Issues>
```"
CWE-78,src/CWE_78__object-Array__no_sanitizing__find_size-sprintf_%s_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();



$query = sprintf(""find / size '%d'"", $tainted);


$ret = system($query);


?>",$ret = system($query);,True,False,"$query = sprintf(""find / size '%d'"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""find / size '%d'"", $tainted);</Code>
    <Justification>The code uses sprintf to construct a shell command using user-controlled data from $_GET['UserData'] without proper sanitization. This allows an attacker to inject arbitrary commands into the system call.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-22</Weakness>
    <Description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""find / size '%d'"", $tainted);</Code>
    <Justification>The code uses ""find /"" which means it will search in all directories. Even though it is not directly related to user input, it is still an issue since the search starts at the root directory.</Justification>
  </Issue>
</Issues>
```"
CWE-78,src/CWE_78__system__func_FILTER-CLEANING-full_special_chars_filter__cat-interpretation_simple_quote.php,"<?php







$tainted = system('ls', $retval);

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     

$query = ""cat ' $tainted '"";


$ret = system($query);


?>",$ret = system($query);,True,False,"$tainted = system('ls', $retval);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code uses system() to execute the 'ls' command. While the output of 'ls' is captured, there's no sanitization of the command itself, but the output is later used in another system call.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     
$query = ""cat ' $tainted '"";


$ret = system($query);</Code>
    <Justification>Even after sanitizing the output of the 'ls' command with FILTER_SANITIZE_FULL_SPECIAL_CHARS, it is used in the construction of the 'cat' command.  While the sanitization attempts to neutralize special characters, it might not be sufficient to prevent command injection if the output of 'ls' contains malicious characters or sequences that bypass the sanitization. Specifically, the single quotes around $tainted may not prevent command injection in all scenarios.  The system() function should be avoided or inputs to it should be very carefully validated.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__object-directGet__func_FILTER-CLEANING-full_special_chars_filter__username_at-interpretation_simple_quote.php,"<?php







class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     

$query = ""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-643</Weakness>
    <Description>Improper Neutralization of Data within XPath Expressions ('XPath Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""

$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml-&gt;xpath($query);</Code>
    <Justification>The code constructs an XPath query using unsanitized user input ($query), making it vulnerable to XPath injection. An attacker could manipulate the query to extract or modify data from the XML file.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;</Code>
    <Justification>The code echoes the value of $query directly into the HTML output without proper sanitization after the variable has been tainted by user input. This can lead to Cross-Site Scripting (XSS) vulnerabilities, where malicious scripts can be injected into the web page.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>print_r($res);</Code>
    <Justification>The code uses print_r to display the result of the xpath query directly into the HTML output without proper sanitization. This can lead to Cross-Site Scripting (XSS) vulnerabilities, where malicious scripts can be injected into the web page.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__POST__func_htmlentities__userByCN-sprintf_%s_simple_quote.php,"<?php







$tainted = $_POST['UserData'];

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $_POST['UserData'];

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_POST['UserData'];

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);</Code>
    <Justification>The code constructs an LDAP query using unsanitized user input ($tainted), making it vulnerable to LDAP injection attacks. Although htmlentities is used, it might not be sufficient to neutralize all characters that are special in LDAP queries. An attacker could inject malicious LDAP syntax to bypass authentication or retrieve sensitive information.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__backticks__func_preg_match-no_filtering__name-interpretation_simple_quote.php,"<?php







$tainted = `cat /tmp/tainted.txt`;

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$query = ""name=' $tainted '"";

$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code uses backticks to execute an external command (`cat /tmp/tainted.txt`) without proper sanitization. An attacker could modify the contents of `/tmp/tainted.txt` to inject arbitrary commands.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""name=' $tainted '"";

$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  </Code>
    <Justification>The code constructs an LDAP query by directly embedding the `$tainted` variable, which is derived from an external source, into the query string.  This makes the application vulnerable to LDAP injection attacks. An attacker could inject special characters or LDAP syntax into the `$tainted` input to manipulate the query logic, potentially bypassing authentication or accessing unauthorized data.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  </Code>
    <Justification>The code does not check the return values of `ldap_bind` and `ldap_search`. If these functions fail, the script will continue to execute, potentially leading to unexpected behavior or security vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-480</Weakness>
    <Description>Use of Incorrect Operator</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}</Code>
    <Justification>The `if` statement's logic is redundant. Assigning `$tainted = $tainted` when the condition is true doesn't change the value. This can be simplified or removed entirely, improving code clarity.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__proc_open__func_preg_match-no_filtering__name-sprintf_%s_simple_quote.php,"<?php







$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = sprintf(""name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$query = sprintf(""name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);</Code>
    <Justification>The proc_open function executes a command. While the command itself is hardcoded in this example, there is a risk of command injection if the arguments were constructed using external input.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  </Code>
    <Justification>The code constructs an LDAP query using sprintf with user-controlled input ($tainted).  Even with the regex, it is vulnerable to LDAP injection because special characters in LDAP queries are not neutralized.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The return values of ldap_bind and ldap_search are not checked for errors. If these functions fail, the program might continue with invalid data or resources, leading to unpredictable behavior or crashes.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-772</Weakness>
    <Description>Missing Release of Resource after Effective Lifetime</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}</Code>
    <Justification>If proc_open fails and doesn't return a resource, the code proceeds without closing the pipes, leading to a resource leak.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-424</Weakness>
    <Description>Improper Protection of Alternate Path</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );</Code>
    <Justification>The program writes to a file ""/tmp/error-output.txt"".  If the program is running with elevated privileges, this could lead to an attacker overwriting system files by creating symlinks to those files in /tmp.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__popen__func_FILTER-VALIDATION-email_filter__Unsafe_use_untrusted_data-comment.php,"<!-- 
Unsafe sample
input : Uses popen to read the file /tmp/tainted.txt using cat command
Flushes content of $sanitized if the filter email_filter is not applied
File : unsafe, use of untrusted data in a comment
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<!--
<?php
$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo $tainted ;
?>
-->
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,echo $tainted ;,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');</Code>
    <Justification>The code uses popen to execute a command. The command includes a hardcoded path to a file, making it vulnerable to command injection if the file path is influenced by an external source. While the file path is currently hardcoded, if it were to be derived from user input or another external source, an attacker could inject arbitrary commands.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo $tainted ;</Code>
    <Justification>The code echoes the value of `$tainted` directly into the HTML without proper sanitization or encoding. If `$tainted` contains malicious HTML or JavaScript code, it will be executed in the user's browser, leading to a cross-site scripting (XSS) vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The code does not check the return values of `popen`, `fread`, and `pclose`. If any of these functions fail, the program might continue execution with invalid data or resources, leading to unpredictable behavior or a crash.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-571</Weakness>
    <Description>Expression is Always True</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The code checks if `$sanitized` is a valid email address, but then assigns the value to `$tainted` or an empty string. The value of `$tainted` is then echoed into the HTML. If `$sanitized` is always a valid email address, then the `else` branch will never be executed. If `$sanitized` is never a valid email address, the `if` branch will never be executed.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-561</Weakness>
    <Description>Dead code</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The code includes a conditional statement based on the validation of `$sanitized` as an email, but the `$sanitized` variable is not defined or initialized anywhere in the provided code snippet. This makes the conditional statement's outcome and the subsequent assignment to `$tainted` unpredictable, effectively turning the code block into dead code.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-directGet__func_urlencode__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object
SANITIZE : use of urlencode
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();

$tainted = urlencode($tainted);


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",True,True,"echo ""window.setInterval('"". $tainted .""');"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""window.setInterval('"". $tainted .""');"" ;</Code>
    <Justification>The code constructs a Javascript command using a tainted variable ($tainted) which is derived from user input. Although urlencode() is applied, it's insufficient to prevent XSS because it doesn't neutralize Javascript-significant characters. The setInterval function can execute arbitrary Javascript code, leading to XSS vulnerability.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__exec__no_sanitizing__userByMail-sprintf_%s_simple_quote.php,"<?php







$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];



$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,False,"$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];</Code>
    <Justification>The code executes an external script ""/tmp/tainted.php"" using the `exec` function. If this script is controllable by an attacker, they can inject arbitrary commands into the system. This is a command injection vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);</Code>
    <Justification>The code constructs an LDAP query using `sprintf` and directly incorporates the `$tainted` variable, which is derived from the output of an external script. Without proper sanitization, an attacker could manipulate the script's output to inject malicious LDAP syntax, leading to unauthorized data access or modification.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__POST__whitelist_using_array__Use_untrusted_data_propertyValue_CSS-double_Quoted_Property_Value.php,"<!-- 
Unsafe sample
input : get the field UserData from the variable $_POST
SANITIZE : use in_array to check if $tainted is in the white list
File : use of untrusted data in a double quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = $_POST['UserData'];

$legal_table = array(""safe1"", ""safe2"");
if (in_array($tainted, $legal_table, true)) {
  $tainted = $tainted;
} else {
  $tainted = $legal_table[0];
}


echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\"""". $tainted .""\"" ; }"" ;",True,True,"echo ""body { color :\"""". $tainted .""\"" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\"""". $tainted .""\"" ; }"" ;</Code>
    <Justification>The code echoes user-controlled input $tainted directly into the CSS style, even after sanitization with in_array(). While in_array() prevents arbitrary strings, the whitelisted strings could still contain characters that, when used in CSS, could lead to unexpected behavior or be exploited for XSS if the browser interprets the CSS in a way that allows it (e.g., using CSS expressions or certain character encodings).  The CSS property ""color"" itself is relatively safe, but the general practice is concerning.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__popen__func_htmlentities__name-interpretation_simple_quote.php,"<?php







$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  </Code>
    <Justification>The code constructs an LDAP query by directly embedding the `$tainted` variable, which is derived from user-controlled input. Even though htmlentities() is used, it is not sufficient to prevent LDAP injection attacks. The attacker could manipulate the input in /tmp/tainted.txt to inject arbitrary LDAP code, potentially bypassing authentication or exfiltrating sensitive information. The ldap_search function will then execute this malicious query, leading to security breaches.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The file `/tmp/tainted.txt` could contain malicious code. If an attacker can control the content of `/tmp/tainted.txt`, they can inject arbitrary commands that will be executed by the `popen` function, leading to code execution on the server. This is a command injection vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code does not check the return values of `popen`, `fread`, `pclose`, `ldap_connect`, `ldap_bind`, and `ldap_search`. If any of these functions fail, the program may continue to execute with invalid data or resources, leading to unpredictable behavior or security vulnerabilities. Checking the return values would allow the program to detect and handle errors gracefully.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__SESSION__func_FILTER-CLEANING-full_special_chars_filter__data-sprintf_%s_simple_quote.php,"<?php







$tainted = $_SESSION['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     

$query = sprintf(""'%s'"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$tainted = $_SESSION['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     

$query = sprintf(""'%s'"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_SESSION['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     

$query = sprintf(""'%s'"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""&lt;br /&gt;"" ;</Code>
    <Justification>The code uses user-controlled data ($_SESSION['UserData']) to construct an XPath query without proper neutralization of special elements. Although filter_var with FILTER_SANITIZE_FULL_SPECIAL_CHARS is used, it might not be sufficient to prevent all forms of XML injection, especially if the XML structure or XPath syntax allows for specific characters or patterns to be exploited. The sprintf function adds single quotes around the tainted input, which does not provide sufficient protection against XPath injection since it can be bypassed or even used in the injection. This could allow an attacker to modify the XPath query and extract sensitive information or perform other malicious actions.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__popen__func_htmlspecialchars__name-interpretation_simple_quote.php,"<?php







$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost"");","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost"");</Code>
    <Justification>The code constructs an LDAP query by concatenating user-controlled input ($tainted) directly into the query string. Even with htmlspecialchars, it is still vulnerable to LDAP injection attacks because htmlspecialchars does not escape LDAP-specific characters.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-directGet__no_sanitizing__Use_untrusted_data_script-side_DoubleQuoted_Expr.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object
sanitize : none
File : use of untrusted data in one side of a double quoted expression in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();




echo ""x=\"""". $tainted.""\"""" ;
?>
</script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""x=\"""". $tainted.""\"""" ;",True,True,"echo ""x=\"""". $tainted.""\"""" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""x=\"""". $tainted.""\"""" ;</Code>
    <Justification>The code echoes user-controlled input ($tainted) directly into the HTML output within a double-quoted attribute without proper sanitization. This allows an attacker to inject arbitrary HTML or JavaScript code, leading to Cross-Site Scripting (XSS).</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-classicGet__func_FILTER-CLEANING-email_filter__Use_untrusted_data-div.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object
Uses an email_filter via filter_var function
File : use of untrusted data in a div tag
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<div>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input;
  }

  public  function __construct(){
   $this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo $tainted ;
?>
</div>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,echo $tainted ;,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo $tainted ;</Code>
    <Justification>The code echoes user-controlled input ($tainted) directly into the HTML output without proper neutralization of special characters. Although the code attempts to sanitize the input using FILTER_SANITIZE_EMAIL and validate it with FILTER_VALIDATE_EMAIL, this only addresses email-specific concerns.  If the input is not a valid email, $tainted becomes an empty string. However, if it is a valid email, it's printed directly to the page. This leaves the application vulnerable to XSS if a malicious user enters a crafted email address containing malicious HTML or JavaScript that isn't filtered out by the email sanitization. For example, an email like ""&lt;script&gt;alert('XSS')&lt;/script&gt;@example.com"" would execute JavaScript.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__unserialize__func_FILTER-CLEANING-email_filter__join-interpretation_simple_quote.php,"<?php







$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses unserialize() on user-controlled data ($_POST['UserData']). This is dangerous because it can lead to arbitrary code execution if the serialized data is malicious.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";</Code>
    <Justification>The code directly embeds the $tainted variable into the SQL query without proper sanitization. If $tainted contains malicious SQL code, it can lead to SQL injection vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;</Code>
    <Justification>The code uses the mysql_connect and mysql_select_db functions, which are deprecated. These functions are no longer maintained and are known to have security vulnerabilities.  mysqli or PDO should be used instead.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res = mysql_query($query);</Code>
    <Justification>The code does not check the return values of mysql_connect, mysql_select_db, and mysql_query. If any of these functions fail, the code will continue to execute, potentially leading to unexpected behavior or vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The code uses hard-coded credentials ('mysql_user', 'mysql_password') to connect to the database. This is a major security risk, as anyone with access to the code can gain access to the database.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__shell_exec__func_htmlentities__userByCN-sprintf_%s_simple_quote.php,"<?php







$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);


$ds=ldap_connect(""localhost"");","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = htmlentities($tainted, ENT_QUOTES);

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(cn='%s'))"", $tainted);


$ds=ldap_connect(""localhost"");</Code>
    <Justification>The code constructs an LDAP query using user-controlled input ($tainted) without proper sanitization. Although htmlentities is used, it does not prevent LDAP injection. An attacker could manipulate the input in /tmp/tainted.txt to inject arbitrary LDAP code, potentially bypassing authentication or accessing sensitive information.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute a command with user-controlled input from the file /tmp/tainted.txt. If the content of this file is attacker-controlled, it can lead to command injection, allowing arbitrary commands to be executed on the server.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-directGet__func_htmlentities__Use_untrusted_data_propertyValue_CSS-property_Value.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object
sanitize : use of the function htmlentities. Sanitizes the query but has a high chance to produce unexpected results
File : use of untrusted data in a property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();

$tainted = htmlentities($tainted, ENT_QUOTES);


echo ""body { color :"". $tainted ."" ; }"" ;
?>
 </style> 
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :"". $tainted ."" ; }"" ;",True,True,"$tainted = htmlentities($tainted, ENT_QUOTES);


echo ""body { color :"". $tainted ."" ; }"" ;
?>
 </style>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>
$tainted = htmlentities($tainted, ENT_QUOTES);


echo ""body { color :"". $tainted ."" ; }"" ;
?>
 </style>
    </Code>
    <Justification>The code uses user-controlled input to dynamically generate CSS, but it uses htmlentities for sanitization. While htmlentities can prevent some XSS attacks, it's not suitable for all contexts, especially CSS. An attacker can still inject malicious CSS code that bypasses htmlentities.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__unserialize__no_sanitizing__username_at-concatenation_simple_quote.php,"<?php







$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    



$query = ""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$query = ""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses unserialize() on user-supplied data ($_POST['UserData']). This is extremely dangerous because it allows an attacker to inject arbitrary code into the application by crafting a malicious serialized object. This can lead to remote code execution.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code uses an XPath query ($query) to access an XML file. The value of $query is not defined, creating a vulnerability. If $query were to be populated by user-controlled input, this would create an XPath injection vulnerability. An attacker could manipulate the XPath query to extract sensitive information from the XML file or potentially modify the XML data.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__object-indexArray__func_FILTER-CLEANING-full_special_chars_filter__join-interpretation_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input['realOne'];
  }

  public  function __construct(){
    $this->input = array();
    $this->input['test']= 'safe' ;
    $this->input['realOne']= $_GET['UserData'] ;
    $this->input['trap']= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     

$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";</Code>
    <Justification>The code constructs an SQL query by embedding a variable $tainted, which is derived from user-controlled input ($_GET['UserData']), directly into the query string. Although the input is sanitized using filter_var with FILTER_SANITIZE_FULL_SPECIAL_CHARS, this sanitization may not be sufficient to prevent all forms of SQL injection, especially in older versions of PHP or with certain database configurations.  Using parameterized queries or prepared statements is the recommended approach to prevent SQL injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res = mysql_query($query); </Code>
    <Justification>The code uses the mysql_connect and mysql_query functions, which are deprecated. Using deprecated functions poses a security risk as they may contain known vulnerabilities that are no longer patched.  It is recommended to use mysqli or PDO instead.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__shell_exec__func_addslashes__Unsafe_use_untrusted_data-style.php,"<!-- 
Unsafe sample
input : use shell_exec to cat /tmp/tainted.txt
sanitize : use of the function addslashes
File : unsafe, use of untrusted data in CSS
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = addslashes($tainted);


echo $tainted ;
?>
</style>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,echo $tainted ;,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo $tainted ;</Code>
    <Justification>The code echoes a tainted variable ($tainted) directly into the HTML output without proper sanitization for CSS context. While addslashes might prevent some forms of SQL injection, it is insufficient to prevent XSS in CSS. This allows an attacker to inject arbitrary CSS code, potentially leading to information disclosure or other malicious activities.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute a command. If the contents of /tmp/tainted.txt are attacker controlled, it could allow for command injection. Even though the result is passed through addslashes, this function is not designed to prevent command injection.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec, but does not check the return value. If the command fails, $tainted could be null or contain an error message, which could lead to unexpected behavior later in the script.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__backticks__func_FILTER-VALIDATION-email_filter__username-sprintf_%s_simple_quote.php,"<?php







$tainted = `cat /tmp/tainted.txt`;

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = sprintf(""user[username='%s']"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code uses backticks to execute a shell command (`cat /tmp/tainted.txt`). This is vulnerable to command injection if the filename `/tmp/tainted.txt` is influenced by an attacker, potentially leading to arbitrary command execution.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-643</Weakness>
    <Description>Improper Neutralization of Data within XPath Expressions ('XPath Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""user[username='%s']"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code constructs an XPath query using user-provided data (`$tainted`). If the input is not properly sanitized, an attacker can inject malicious XPath expressions, leading to unauthorized data access or modification in the XML document. The `filter_var` function is used, but it is not applied before the potentially tainted input is used in the `sprintf` function.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$xml = simplexml_load_file(""users.xml"");</Code>
    <Justification>The code uses `simplexml_load_file` without checking the return value. If the file ""users.xml"" does not exist or cannot be parsed, this function will return FALSE, and subsequent operations on `$xml` will lead to errors.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__POST__func_FILTER-CLEANING-magic_quotes_filter__Use_untrusted_data-div.php,"<!-- 
Unsafe sample
input : get the field UserData from the variable $_POST
Uses a magic_quotes_filter via filter_var function
File : use of untrusted data in a div tag
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<div>
<?php
$tainted = $_POST['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      


echo $tainted ;
?>
</div>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,echo $tainted ;,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo $tainted ;</Code>
    <Justification>The code directly outputs user-controlled input ($tainted) without proper sanitization in an HTML context. Although magic quotes are applied using filter_var, they are insufficient to prevent XSS as they only escape quotes and do not neutralize other potentially harmful characters or HTML tags. This can lead to Cross-Site Scripting (XSS) vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);</Code>
    <Justification>The code uses FILTER_SANITIZE_MAGIC_QUOTES, which simulates the deprecated magic_quotes_gpc functionality. This functionality is obsolete and its use is discouraged because it's unreliable and doesn't provide comprehensive protection against injection vulnerabilities. Relying on deprecated features can lead to security vulnerabilities and compatibility issues.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-directGet__func_FILTER-CLEANING-number_int_filter__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object
Uses a number_int_filter via filter_var function
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_NUMBER_INT);
if (filter_var($sanitized, FILTER_VALIDATE_INT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""window.setInterval('"". $tainted .""');"" ;</Code>
    <Justification>The code uses user-controlled input directly within the setInterval function. While the input is sanitized to be an integer, it can still be used to inject arbitrary JavaScript code. For example, an attacker could input ""1000);evil_function();"" which would execute evil_function() after the interval. Even if the intended use of setInterval is just to set a time, the untrusted data could cause unintended code execution.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__object-classicGet__no_sanitizing__select_from-interpretation_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input;
  }

  public  function __construct(){
   $this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();



$query = ""SELECT * FROM ' $tainted '"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,True,"$this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();



$query = ""SELECT * FROM ' $tainted '"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();



$query = ""SELECT * FROM ' $tainted '"";</Code>
    <Justification>The code directly incorporates user-supplied input ($_GET['UserData']) into an SQL query without proper sanitization or validation. This allows an attacker to inject malicious SQL code, potentially compromising the database.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res = mysql_query($query); </Code>
    <Justification>The code uses the `mysql_connect` and `mysql_query` functions, which are deprecated. This means they are no longer actively maintained and may contain security vulnerabilities that are not addressed.  It is recommended to migrate to `mysqli` or `PDO`.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__GET__ternary_white_list__Use_untrusted_data_script-doublequoted_Event_Handler.php,"<!-- 
Unsafe sample
input : reads the field UserData from the variable $_GET
sanitize : use of ternary condition
File : use of untrusted data in a double quoted event handler in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$tainted = $_GET['UserData'];

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo ""<div onmouseover=\""x=\"""". $tainted .""\""\>"";
?>
<h1>Hello World!</h1>
</div>
</body>
</html>","echo ""<div onmouseover=\""x=\"""". $tainted .""\""\>"";",True,True,"echo ""<div onmouseover=""x="""". $tainted .""""\>"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;div onmouseover=&quot;x=&quot;"". $tainted .""&quot;\&gt;"";</Code>
    <Justification>The code uses a ternary condition for sanitization, but it does not neutralize user-controllable input before it is placed in output that is used as a web page. This could lead to cross-site scripting (XSS) vulnerability.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__fopen__func_FILTER-CLEANING-magic_quotes_filter__Unsafe_use_untrusted_data-style.php,"<!-- 
Unsafe sample
input : use fopen to read /tmp/tainted.txt and put the first line in $tainted
Uses a magic_quotes_filter via filter_var function
File : unsafe, use of untrusted data in CSS
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      


echo $tainted ;
?>
</style>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"<![CDATA[echo $tainted ;
?>
</style>
</head>
<body>]]>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code><![CDATA[echo $tainted ;
?>
</style>
</head>
<body>]]></Code>
    <Justification>The code reads data from a file, sanitizes it using FILTER_SANITIZE_MAGIC_QUOTES (which is now deprecated and may not provide adequate protection), and then directly outputs this data into a &lt;style&gt; tag. An attacker could inject malicious CSS code (or even JavaScript if CSS expressions are enabled) by manipulating the contents of /tmp/tainted.txt.  Since the output context is CSS, proper CSS encoding is required to prevent XSS.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);</Code>
    <Justification>The code uses the return value of `fgets` to check for errors, but doesn't handle the `false` case beyond setting `$tainted` to an empty string. It does not report or log the error, which could mask issues with file reading.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);</Code>
    <Justification>The code uses `FILTER_SANITIZE_MAGIC_QUOTES`, which is deprecated. This suggests that the code may not be actively reviewed or maintained, and the chosen sanitization function might not provide adequate security protection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-732</Weakness>
    <Description>Incorrect Permission Assignment for Critical Resource</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$handle = @fopen(""/tmp/tainted.txt"", ""r"");</Code>
    <Justification>The code reads from /tmp/tainted.txt. If the permissions on this file are not properly restricted, an attacker could modify the file and inject malicious code into the CSS. Ensuring only the intended user/process can write to this file is crucial for security. The use of /tmp/ for potentially sensitive data is generally discouraged.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-703</Weakness>
    <Description>Improper Check or Handling of Exceptional Conditions</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code><![CDATA[$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}]]></Code>
    <Justification>The code uses `@` to suppress errors from `fopen`. While it checks if `$handle` is valid, suppressing the error prevents proper logging or handling of file opening failures. A more robust error handling mechanism should be implemented.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__POST__func_preg_match-no_filtering__join-interpretation_simple_quote.php,"<?php







$tainted = $_POST['UserData'];

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";</Code>
    <Justification>The code directly incorporates user-supplied data ($tainted) into an SQL query without proper sanitization. This allows an attacker to inject malicious SQL code, potentially compromising the database.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;</Code>
    <Justification>The code uses the 'mysql_connect' and 'mysql_select_db' functions, which are deprecated. These functions are no longer maintained and using them can expose the application to security vulnerabilities and compatibility issues.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;</Code>
    <Justification>The code does not check the return values of 'mysql_connect' and 'mysql_select_db'. If these functions fail, the script will continue to execute, potentially leading to unexpected behavior or errors.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-391</Weakness>
    <Description>Unchecked Error Condition</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$res = mysql_query($query); </Code>
    <Justification>The code does not check if the mysql_query was successful. If the query fails, $res will be false and the code will attempt to pass a boolean to mysql_fetch_array, resulting in an error.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-Array__func_addslashes__Unsafe_use_untrusted_data-comment.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object, which store it in a array
sanitize : use of the function addslashes
File : unsafe, use of untrusted data in a comment
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<!--
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input[1];
  }

  public  function __construct(){
    $this->input = array();
    $this->input[0]= 'safe' ;
    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = addslashes($tainted);


echo $tainted ;
?>
-->
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"$this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = addslashes($tainted);


echo $tainted ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>    $this->input[1]= $_GET['UserData'] ;
    $this->input[2]= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = addslashes($tainted);


echo $tainted ;</Code>
    <Justification>The code retrieves user input from $_GET['UserData'], sanitizes it with addslashes, and then echoes it. While addslashes can prevent SQL injection, it does not prevent XSS. The echoed data could contain malicious JavaScript code that would be executed in the user's browser.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-134</Weakness>
    <Description>Use of Externally-Controlled Format String</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>echo $tainted ;</Code>
    <Justification>Although unlikely in this specific scenario, if the addslashes function doesn't escape characters that are part of a format string vulnerability, then the echo statement could be vulnerable. Although highly unlikely, it is theoretically possible that a carefully crafted input could exploit this.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$tainted = addslashes($tainted);</Code>
    <Justification>The function addslashes is considered obsolete. It is better to use prepared statements and parameterized queries.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__POST__ternary_white_list__Use_untrusted_data_propertyValue_CSS-double_Quoted_Property_Value.php,"<!-- 
Unsafe sample
input : get the field UserData from the variable $_POST
sanitize : use of ternary condition
File : use of untrusted data in a double quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = $_POST['UserData'];

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\"""". $tainted .""\"" ; }"" ;",True,True,"<?php
$tainted = $_POST['UserData'];

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>&lt;?php
$tainted = $_POST['UserData'];

$tainted = $tainted  == 'safe1' ? 'safe1' : 'safe2';


echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?&gt;</Code>
    <Justification>The code uses user-controlled input ($_POST['UserData']) to generate CSS styles. Although a ternary condition is used, it only limits the input to 'safe1' or 'safe2'.  If the application logic relies on these values being truly safe, and they are not, it could still lead to unintended behavior. If the context where the value is used allows for interpretation of special characters, it can lead to XSS or other injection attacks.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__POST__func_preg_match-no_filtering__data-sprintf_%s_simple_quote.php,"<?php







$tainted = $_POST['UserData'];

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = sprintf(""'%s'"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$tainted = $_POST['UserData'];

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = sprintf(""'%s'"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_POST['UserData'];

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = sprintf(""'%s'"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""&lt;br /&gt;"" ;</Code>
    <Justification>The code takes user input from $_POST['UserData'] and uses it in an XPath query without proper sanitization. An attacker could inject malicious XPath expressions to extract sensitive information or manipulate the XML data.</Justification>
  </Issue>
</Issues>
```"
CWE-78,src/CWE_78__proc_open__func_FILTER-CLEANING-email_filter__cat-concatenation_simple_quote.php,"<?php







$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""cat '"". $tainted . ""'"";


$ret = system($query);


?>",$ret = system($query);,True,True,"$query = ""cat '"". $tainted . ""'"";\n\n\n$ret = system($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""cat '"". $tainted . ""'"";\n\n\n$ret = system($query);</Code>
    <Justification>The code constructs an OS command using externally-influenced input ($tainted) without proper neutralization, leading to OS Command Injection. Even after sanitizing for email, the $tainted variable is used in the `system()` call.  The filter_var function with FILTER_SANITIZE_EMAIL only removes illegal characters for email addresses, but it doesn't prevent command injection. An attacker could inject shell commands by including special characters like semicolons, pipes, or backticks in the input.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__exec__func_htmlspecialchars__userByCN-concatenation_simple_quote.php,"<?php







$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $result[0];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$script = ""/tmp/tainted.php"";
exec($script, $result, $return);</Code>
    <Justification>The code uses the `exec` function to execute a PHP script. If the script's content is controllable by an attacker, they can inject arbitrary commands, leading to command injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $result[0];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query by directly embedding the `$tainted` variable without proper sanitization. Although `htmlspecialchars` is used, it is insufficient to prevent LDAP injection as it only escapes characters relevant to HTML, not LDAP. An attacker could manipulate the `$tainted` value to inject arbitrary LDAP filters, potentially bypassing authentication or extracting sensitive information.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__shell_exec__func_FILTER-CLEANING-magic_quotes_filter__userByMail-sprintf_%s_simple_quote.php,"<?php







$tainted = shell_exec('cat /tmp/tainted.txt');

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = shell_exec('cat /tmp/tainted.txt');

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      

$query = sprintf(""(&(objectCategory=person)(objectClass=user)(mail='%s'))"", $tainted);</Code>
    <Justification>The code constructs an LDAP query using unsanitized input from the $tainted variable. Although the code uses filter_var with FILTER_SANITIZE_MAGIC_QUOTES, this is insufficient to prevent LDAP injection. An attacker could manipulate the input to inject arbitrary LDAP commands, potentially bypassing authentication or extracting sensitive information.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute the command 'cat /tmp/tainted.txt'.  If an attacker can control the content of /tmp/tainted.txt, they can inject arbitrary shell commands.  While this depends on file permissions, the potential for command injection is present.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-indexArray__func_FILTER-CLEANING-email_filter__Use_untrusted_data-body.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object, which store it in a array
Uses an email_filter via filter_var function
File : use of untrusted data in the body
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input['realOne'];
  }

  public  function __construct(){
    $this->input = array();
    $this->input['test']= 'safe' ;
    $this->input['realOne']= $_GET['UserData'] ;
    $this->input['trap']= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo $tainted ;
?>
<h1>Hello World!</h1>
</body>
</html>
",echo $tainted ;,True,True,echo $tainted ;,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo $tainted ;</Code>
    <Justification>The code echoes the variable $tainted directly into the HTML output without proper encoding or sanitization, which can lead to Cross-Site Scripting (XSS) vulnerabilities. Even though the input is sanitized using FILTER_SANITIZE_EMAIL and validated using FILTER_VALIDATE_EMAIL, this only protects against email-specific injection. It does not prevent against XSS attacks if the validated email contains malicious characters that are interpreted as HTML or JavaScript when rendered in the browser.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__system__func_FILTER-VALIDATION-number_float_filter__Unsafe_use_untrusted_data-style.php,"<!-- 
Unsafe sample
input : execute a ls command using the function system, and put the last result in $tainted
Flushes content of $sanitized if the filter number_float_filter is not applied
File : unsafe, use of untrusted data in CSS
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = system('ls', $retval);

if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo $tainted ;
?>
</style>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,echo $tainted ;,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code uses the `system()` function with a hardcoded command 'ls'. While the command itself is not directly influenced by user input in this snippet, the use of system() is a potential security risk. If this code were ever modified to include user input into the command, it would become vulnerable to command injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo $tainted ;</Code>
    <Justification>The code echoes the value of `$tainted` directly into the CSS style section without any sanitization. If the `system()` function or any other function that populates `$tainted` returns data containing HTML or JavaScript, it will be executed in the user's browser, leading to a cross-site scripting (XSS) vulnerability. Even though it is not user input, the output of system may be malformed.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__fopen__func_addslashes__userByMail-concatenation_simple_quote.php,"<?php







$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$tainted = addslashes($tainted);

$query = ""(&(objectCategory=person)(objectClass=user)(mail='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = addslashes($tainted);

$query = ""(&(objectCategory=person)(objectClass=user)(mail='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost"");","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = addslashes($tainted);

$query = ""(&(objectCategory=person)(objectClass=user)(mail='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost"");</Code>
    <Justification>The code constructs an LDAP query by concatenating user-controlled input ($tainted) without proper neutralization of special characters. Although addslashes() is used, it might not be sufficient to prevent LDAP injection, as it only escapes certain characters and LDAP has its own set of special characters that need to be handled. An attacker could inject malicious LDAP code, potentially leading to unauthorized access or modification of data.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code does not check the return values of ldap_connect(), ldap_bind(), and ldap_search(). If any of these functions fail, the subsequent code may operate on an invalid resource, leading to unpredictable behavior or errors. Checking the return values and handling errors appropriately would improve the reliability of the code.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-778</Weakness>
    <Description>Insufficient Logging</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$tainted = addslashes($tainted);

$query = ""(&(objectCategory=person)(objectClass=user)(mail='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code reads data from a file and uses it in an LDAP query, but there is no logging of the data read or the query being executed. In case of a security incident (e.g., LDAP injection attempt), the lack of logging makes it difficult to trace the source of the attack and analyze the impact.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__unserialize__func_FILTER-CLEANING-magic_quotes_filter__name-interpretation_simple_quote.php,"<?php







$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      

$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      

$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses unserialize() on user-controlled data ($_POST['UserData']). This can lead to arbitrary code execution if the serialized data is maliciously crafted.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      

$query = ""name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>Although the code attempts to sanitize the input with filter_var and FILTER_SANITIZE_MAGIC_QUOTES, this is insufficient to prevent LDAP injection.  The sanitized input is still directly incorporated into the LDAP query.  Magic quotes is also deprecated. An attacker could craft input that modifies the LDAP query structure, potentially leading to unauthorized data access or modification.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__proc_open__no_sanitizing__Unsafe_use_untrusted_data-attribute_Name.php,"<!-- 
Unsafe sample
input : use proc_open to read /tmp/tainted.txt
sanitize : none
File : unsafe, use of untrusted data in an attribute name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<body>
<?php
$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}




echo ""<div "". $tainted .""= bob />"" ;
?>
<h1>Hello World!</h1>
</div>
</body>
</html>","echo ""<div "". $tainted .""= bob />"" ;",True,True,"echo ""<div "". $tainted .""= bob />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;div "". $tainted .""= bob /&gt;"" ;</Code>
    <Justification>The code uses untrusted data from a file to construct an HTML attribute name. This can lead to cross-site scripting (XSS) vulnerabilities if the data contains malicious code that is executed by the web browser.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-indexArray__no_sanitizing__Use_untrusted_data_propertyValue_CSS-property_Value.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object, which store it in a array
sanitize : none
File : use of untrusted data in a property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input['realOne'];
  }

  public  function __construct(){
    $this->input = array();
    $this->input['test']= 'safe' ;
    $this->input['realOne']= $_GET['UserData'] ;
    $this->input['trap']= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();




echo ""body { color :"". $tainted ."" ; }"" ;
?>
 </style> 
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :"". $tainted ."" ; }"" ;",True,True,"echo ""body { color :"". $tainted ."" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :"". $tainted ."" ; }"" ;</Code>
    <Justification>The code uses unsanitized user input ($tainted) directly in the CSS style attribute. An attacker could inject malicious CSS code, potentially leading to cross-site scripting (XSS) if the injected CSS can be used to execute javascript.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__SESSION__func_FILTER-VALIDATION-email_filter__username-concatenation_simple_quote.php,"<?php







$tainted = $_SESSION['UserData'];

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""user[username='"". $tainted . ""']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-643</Weakness>
    <Description>Improper Neutralization of Data within XPath Expressions ('XPath Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""user[username='"". $tainted . ""']"";</Code>
    <Justification>The code constructs an XPath query by directly embedding user-controlled data ($tainted) into the query string. This allows an attacker to inject malicious XPath expressions, potentially leading to unauthorized data access or modification.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__SESSION__func_mysql_real_escape_string__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : get the UserData field of $_SESSION
SANITIZE : use of mysql_real_escape string
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$tainted = $_SESSION['UserData'];

$tainted = mysql_real_escape_string($tainted);


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",True,True,"<?php
$tainted = $_SESSION['UserData'];

$tainted = mysql_real_escape_string($tainted);


echo ""window.setInterval('"". $tainted .""');"" ;
?>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>&lt;?php
$tainted = $_SESSION['UserData'];

$tainted = mysql_real_escape_string($tainted);


echo ""window.setInterval('"". $tainted .""');"" ;
?&gt;</Code>
    <Justification>The code uses user-controlled input ($_SESSION['UserData']) in the setInterval function, even after escaping it with mysql_real_escape_string.  While mysql_real_escape_string mitigates SQL Injection, it does not prevent Cross-Site Scripting (XSS).  The escaped string is inserted directly into JavaScript code, allowing an attacker to inject arbitrary JavaScript code that will be executed in the user's browser.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$tainted = mysql_real_escape_string($tainted);</Code>
    <Justification>The code uses the `mysql_real_escape_string` function, which is deprecated.  Using deprecated functions can lead to security vulnerabilities, as these functions may not receive security updates or may have known weaknesses.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__POST__func_addslashes__Unsafe_use_untrusted_data-attribute_Name.php,"<!-- 
Unsafe sample
input : get the field UserData from the variable $_POST
sanitize : use of the function addslashes
File : unsafe, use of untrusted data in an attribute name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<body>
<?php
$tainted = $_POST['UserData'];

$tainted = addslashes($tainted);


echo ""<div "". $tainted .""= bob />"" ;
?>
<h1>Hello World!</h1>
</div>
</body>
</html>","echo ""<div "". $tainted .""= bob />"" ;",True,True,"echo ""<div "". $tainted .""= bob />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;div "". $tainted .""= bob />"" ;</Code>
    <Justification>The code uses untrusted data from $_POST['UserData'] to construct an HTML attribute name. Although addslashes is used, it is not sufficient to prevent XSS because attribute names can contain arbitrary characters. An attacker could inject malicious HTML attributes that execute JavaScript.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__POST__func_htmlspecialchars__name-concatenation_simple_quote.php,"<?php







$tainted = $_POST['UserData'];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""name='"". $tainted . ""'"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $_POST['UserData'];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""name='"". $tainted . ""'"";

$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_POST['UserData'];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""name='"". $tainted . ""'"";

$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query by directly embedding user-controlled input ($tainted) into the query string. Although htmlspecialchars is used, it is insufficient to prevent LDAP injection attacks.  An attacker could manipulate the input to inject arbitrary LDAP syntax, potentially bypassing authentication or retrieving sensitive information. The correct approach is to use parameterized queries or proper LDAP escaping functions.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__object-indexArray__func_FILTER-VALIDATION-email_filter__username_at-interpretation_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input['realOne'];
  }

  public  function __construct(){
    $this->input = array();
    $this->input['test']= 'safe' ;
    $this->input['realOne']= $_GET['UserData'] ;
    $this->input['trap']= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-643</Weakness>
    <Description>Improper Neutralization of Data within XPath Expressions ('XPath Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""

$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""&lt;br /&gt;"" ;</Code>
    <Justification>The code constructs an XPath query using user-controlled data from $_GET['UserData'] without proper sanitization. This allows an attacker to inject malicious XPath expressions, potentially leading to unauthorized data access or modification.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$xml = simplexml_load_file(""users.xml"");</Code>
    <Justification>The code does not check the return value of simplexml_load_file(). If the file ""users.xml"" does not exist or cannot be parsed, simplexml_load_file() will return false, leading to a potential error later when xpath() is called on $xml.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$xml = simplexml_load_file(""users.xml"");</Code>
    <Justification>The code uses a hardcoded filename ""users.xml"". While not strictly credentials, this could be a configuration file, and hardcoding it makes it difficult to change or manage the file location, potentially leading to security issues if the file contains sensitive information.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-703</Weakness>
    <Description>Improper Check or Handling of Exceptional Conditions</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The code uses filter_var to validate an email, but it doesn't handle the case where $sanitized is not defined or is null. This could lead to unexpected behavior or errors.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__popen__func_FILTER-VALIDATION-email_filter__username-interpretation_simple_quote.php,"<?php







$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""user[username=' $tainted ']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$query = ""user[username=' $tainted ']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""user[username=' $tainted ']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code constructs an XPath query using unsanitized data. If the `$tainted` variable contains malicious characters, it can modify the query structure, leading to potential information disclosure or other unintended consequences.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The code does not check the return value of popen(), fread(), and pclose(). If any of these functions fail, the program might continue with an invalid handle or corrupted data, leading to unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The code uses popen to execute a shell command.  The file `/tmp/tainted.txt` is read by `/bin/cat`. If the contents of `/tmp/tainted.txt` are attacker-controlled, they could include shell metacharacters, leading to command injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The function `popen` is considered less secure than alternatives like `proc_open` because it always executes a shell, which can introduce vulnerabilities if the command being executed is not carefully sanitized.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-732</Weakness>
    <Description>Incorrect Permission Assignment for Critical Resource</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The code reads `/tmp/tainted.txt`. If the permissions on `/tmp/tainted.txt` are not correctly set, an attacker might be able to modify this file and inject malicious data that will then be processed by the script.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-classicGet__func_htmlentities__Use_untrusted_data_propertyValue_CSS-span_Style_Property_Value.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object
sanitize : use of the function htmlentities. Sanitizes the query but has a high chance to produce unexpected results
File : unsafe, use of untrusted data in a property value in a span tag(CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
class Input{
  private $input;

  public function getInput(){
    return $this->input;
  }

  public  function __construct(){
   $this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = htmlentities($tainted, ENT_QUOTES);


echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;",True,True,"$tainted = htmlentities($tainted, ENT_QUOTES);


echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;
?>
<h1>Hello World!</h1>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>
$tainted = htmlentities($tainted, ENT_QUOTES);


echo ""&lt;span style=\""color :"". checked_data .""\""&gt;Hey&lt;/span&gt;"" ;
?>
&lt;h1&gt;Hello World!&lt;/h1&gt;</Code>
    <Justification>The code is vulnerable to Cross-Site Scripting (XSS) because it uses unchecked data (checked_data) directly in the style attribute of a span tag. Even though $tainted is sanitized, checked_data is not, therefore an attacker could inject malicious CSS code into the HTML output, potentially leading to information disclosure or other malicious activities. checked_data variable is not defined and could be any value.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-99</Weakness>
    <Description>Improper Control of Resource Identifiers (‘Resource injection’)</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>
  public  function __construct(){
   $this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();</Code>
    <Justification>The code retrieves user input from the $_GET array without sufficient validation, and then passes this untrusted data to a variable. While htmlentities is used, the initial access to the $_GET array is a potential vulnerability.  If the application relies on this input to identify a resource outside the intended sphere of control, it could lead to security vulnerabilities. The risk is low in this specific code snippet but important to highlight.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-1052</Weakness>
    <Description>Excessive Use of Hard-Coded Literals in Initialization</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>
  public  function __construct(){
   $this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();</Code>
    <Justification>The code directly accesses $_GET['UserData'] within the constructor. This is a hard-coded literal. While common, excessive reliance on such literals can make the code harder to maintain and refactor. Using constants or configuration values can improve maintainability.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__proc_open__func_htmlentities__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : use proc_open to read /tmp/tainted.txt
sanitize : use of the function htmlentities. Sanitizes the query but has a high chance to produce unexpected results
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}

$tainted = htmlentities($tainted, ENT_QUOTES);


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",True,True,"echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>
echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script></Code>
    <Justification>The code uses htmlentities to sanitize the tainted data, but this function is not sufficient to prevent XSS in all contexts, especially when used within javascript code. The sanitized data is directly embedded into a Javascript setInterval function, which can lead to arbitrary code execution.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);</Code>
    <Justification>The code uses proc_open to execute the command `more /tmp/tainted.txt`. While the command itself is not directly influenced by user input, the fact that the script reads from `/tmp/tainted.txt` opens up a potential vulnerability. If an attacker can control the contents of this file, they could inject malicious commands that get executed by the `more` utility. This is a form of command injection, albeit indirectly through a file read.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__object-classicGet__no_sanitizing__username_at-concatenation_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input;
  }

  public  function __construct(){
   $this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();



$query = ""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,True,"$query = ""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""&lt;br /&gt;"" ;</Code>
    <Justification>The code constructs an XPath query using unsanitized user input from $_GET['UserData'], making it vulnerable to XML/XPath injection. An attacker can manipulate the query to extract sensitive information or cause denial of service.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__array-GET__func_FILTER-CLEANING-number_float_filter__Use_untrusted_data_propertyValue_CSS-double_Quoted_Property_Value.php,"<!-- 
Unsafe sample
input : get the $_GET['userData'] in an array
Uses a number_float_filter via filter_var function
File : use of untrusted data in a double quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;

$sanitized = filter_var($tainted, FILTER_SANITIZE_NUMBER_FLOAT);
if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\"""". $tainted .""\"" ; }"" ;",True,True,"echo ""body { color :\"""". $tainted .""\"" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\"""". $tainted .""\"" ; }"" ;</Code>
    <Justification>The code uses unsanitized input `$tainted` within a double-quoted CSS property value. Although `filter_var` with `FILTER_SANITIZE_NUMBER_FLOAT` is used, it may not be sufficient to prevent XSS if the input contains characters that are valid in CSS but can still be used to inject malicious code (e.g., CSS expressions or other CSS injection techniques). It's better to properly escape the output for CSS context.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__unserialize__func_FILTER-CLEANING-special_chars_filter__data-sprintf_%s_simple_quote.php,"<?php







$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      

$query = sprintf(""'%s'"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses unserialize() on user-provided data ($_POST['UserData']). This is extremely dangerous because unserialize() can be exploited to achieve arbitrary code execution. An attacker can craft a malicious serialized object that, when unserialized, will execute arbitrary code on the server.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-643</Weakness>
    <Description>Improper Neutralization of Data within XPath Expressions ('XPath Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""'%s'"", $tainted);


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code constructs an XPath query using user-controlled data ($tainted) without proper neutralization. Even though filter_var with FILTER_SANITIZE_SPECIAL_CHARS is applied, it might not be sufficient to prevent XPath injection, especially if the XML structure is complex or if the sanitization is not tailored to the specifics of XPath syntax. An attacker can inject malicious XPath expressions to extract sensitive data or manipulate the XML structure.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""&lt;br /&gt;"" ;</Code>
    <Justification>The code outputs the XPath query ($query) and the result of the XPath query (print_r($res)) directly to the web page without proper encoding. Although filter_var is used, it might not prevent all forms of XSS. If the tainted data contains HTML or JavaScript, it could be executed in the user's browser, leading to cross-site scripting vulnerabilities.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__backticks__func_FILTER-CLEANING-number_float_filter__Unsafe_use_untrusted_data-attribute_Name.php,"<!-- 
Unsafe sample
input : backticks interpretation, reading the file /tmp/tainted.txt
Uses a number_float_filter via filter_var function
File : unsafe, use of untrusted data in an attribute name
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<body>
<?php
$tainted = `cat /tmp/tainted.txt`;

$sanitized = filter_var($tainted, FILTER_SANITIZE_NUMBER_FLOAT);
if (filter_var($sanitized, FILTER_VALIDATE_FLOAT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""<div "". $tainted .""= bob />"" ;
?>
<h1>Hello World!</h1>
</div>
</body>
</html>","echo ""<div "". $tainted .""= bob />"" ;",True,True,"echo ""<div "". $tainted .""= bob />"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code uses backticks to execute a shell command with a hardcoded path. This is unsafe because an attacker could potentially modify the system by altering the file at /tmp/tainted.txt to contain malicious commands.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;div "". $tainted .""= bob />"" ;</Code>
    <Justification>The code uses unsanitized input `$tainted` in an HTML attribute name. If `$tainted` contains special characters or script, it could lead to cross-site scripting (XSS).</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__GET__func_rawurlencode__Unsafe_use_untrusted_data-comment.php,"<!-- 
Unsafe sample
input : reads the field UserData from the variable $_GET
SANITIZE : use of rawurlencode
File : unsafe, use of untrusted data in a comment
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<!--
<?php
$tainted = $_GET['UserData'];

$tainted = rawurlencode($tainted);


echo $tainted ;
?>
-->
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"<?php
$tainted = $_GET['UserData'];

$tainted = rawurlencode($tainted);


echo $tainted ;
?>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>&lt;?php
$tainted = $_GET['UserData'];

$tainted = rawurlencode($tainted);


echo $tainted ;
?&gt;</Code>
    <Justification>The code takes user input from $_GET['UserData'], URL encodes it using rawurlencode, and then echoes it directly into an HTML comment. While rawurlencode mitigates some XSS risks by encoding special characters, it's insufficient to prevent all XSS attacks, especially if the context where the encoded data is used (HTML comment) allows for certain characters to still be interpreted as markup or control characters.  The primary issue is embedding untrusted data into the HTML, even within comments, can lead to unexpected behavior or vulnerabilities.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-directGet__func_FILTER-CLEANING-full_special_chars_filter__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object
Uses a full_special_chars_filter via filter_var function
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",True,True,"echo ""window.setInterval('"". $tainted .""');""","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""window.setInterval('"". $tainted .""');""</Code>
    <Justification>The code echoes user-controlled input ($tainted) directly into a JavaScript setInterval function without proper sanitization or encoding for the JavaScript context. This allows an attacker to inject arbitrary JavaScript code, leading to Cross-Site Scripting (XSS).</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__POST__func_FILTER-CLEANING-number_int_filter__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : get the field UserData from the variable $_POST
Uses a number_int_filter via filter_var function
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$tainted = $_POST['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_NUMBER_INT);
if (filter_var($sanitized, FILTER_VALIDATE_INT))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",True,True,"echo ""window.setInterval('"". $tainted .""');""","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""window.setInterval('"". $tainted .""');""</Code>
    <Justification>The code uses user-controlled input $tainted within the JavaScript setInterval function without proper neutralization. Although the input is sanitized to be an integer, it's still possible to inject arbitrary JavaScript code, leading to Cross-Site Scripting (XSS). For example, an attacker could input `1000'); alert('XSS'); //`, which would be interpreted as a valid integer and passed to setInterval, but would also execute the injected JavaScript code.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__POST__func_addslashes__not_name-sprintf_%s_simple_quote.php,"<?php







$tainted = $_POST['UserData'];

$tainted = addslashes($tainted);

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $_POST['UserData'];

$tainted = addslashes($tainted);

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_POST['UserData'];

$tainted = addslashes($tainted);

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code is vulnerable to LDAP injection. User-supplied data from $_POST['UserData'] is incorporated into an LDAP query without proper sanitization. Although addslashes is used, it might not be sufficient to prevent all forms of LDAP injection, depending on the LDAP server configuration and the characters that are actually dangerous in that specific context. An attacker could manipulate the LDAP query to bypass authentication or access sensitive information.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-1051</Weakness>
    <Description>Initialization with Hard-Coded Network Resource Configuration Data</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost"");</Code>
    <Justification>The LDAP server address ""localhost"" is hard-coded. This makes it difficult to change the server address without modifying the code. Using a configuration file or environment variable would improve maintainability.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__object-directGet__func_preg_replace__Use_untrusted_data_script-side_DoubleQuoted_Expr.php,"<!-- 
Unsafe sample
input : get the field userData from the variable $_GET via an object
SANITIZE : use of preg_replace
File : use of untrusted data in one side of a double quoted expression in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();

$tainted = preg_replace('/\'/', '', $tainted);


echo ""x=\"""". $tainted.""\"""" ;
?>
</script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""x=\"""". $tainted.""\"""" ;",True,True,"class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();

$tainted = preg_replace('/\'/', '', $tainted);


echo ""x=\"""". $tainted.""\"""" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();

$tainted = preg_replace('/\'/', '', $tainted);


echo ""x=\"""". $tainted.""\"""" ;</Code>
    <Justification>The code retrieves user input from $_GET['UserData'], sanitizes it using preg_replace to remove single quotes, and then outputs it within a double-quoted string in a JavaScript context. While the single quote removal mitigates some XSS vectors, it's insufficient to prevent all forms of XSS. An attacker could still inject malicious JavaScript code that doesn't rely on single quotes, leading to XSS vulnerabilities.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__system__func_mysql_real_escape_string__Use_untrusted_data_script-quoted_String.php,"<!-- 
Unsafe sample
input : execute a ls command using the function system, and put the last result in $tainted
SANITIZE : use of mysql_real_escape string
File : use of untrusted data in a simple quoted string in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$tainted = system('ls', $retval);

$tainted = mysql_real_escape_string($tainted);


echo ""alert('"". $tainted .""')"" ;
?>
</script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""alert('"". $tainted .""')"" ;",True,True,"$tainted = mysql_real_escape_string($tainted);


echo ""alert('"". $tainted .""')"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = system('ls', $retval);</Code>
    <Justification>The code uses the `system()` function to execute an external command ('ls'). While the output of the command is later escaped, the command itself is executed without any sanitization. An attacker could potentially manipulate the environment or command execution to inject malicious commands.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = mysql_real_escape_string($tainted);


echo ""alert('"". $tainted .""')"" ;</Code>
    <Justification>The code attempts to sanitize the output of the `system()` call using `mysql_real_escape_string()`. However, this function is intended for escaping strings to be used in MySQL queries, not for preventing XSS.  Using it in this context is incorrect, as it will not properly neutralize characters that are dangerous in HTML or JavaScript, such as `&lt;`, `&gt;`, `""` , and `'`.  The `$tainted` variable is then embedded within a JavaScript alert, making it vulnerable to XSS if the output of the `ls` command contains malicious characters that are not properly escaped by `mysql_real_escape_string()`.</Justification>
  </Issue>
</Issues>
```"
CWE-78,src/CWE_78__proc_open__func_FILTER-CLEANING-special_chars_filter__cat-sprintf_%s_simple_quote.php,"<?php







$descriptorspec = array(
  0 => array(""pipe"", ""r""),
  1 => array(""pipe"", ""w""),
  2 => array(""file"", ""/tmp/error-output.txt"", ""a"")
  );
$cwd = '/tmp';
$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      

$query = sprintf(""cat '%s'"", $tainted);


$ret = system($query);


?>",$ret = system($query);,True,True,"$query = sprintf(""cat '%s'"", $tainted);

$ret = system($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""cat '%s'"", $tainted);

$ret = system($query);</Code>
    <Justification>The code uses sprintf to create a command and then executes it using system(). The $tainted variable, which is derived from reading a file, is incorporated into the command without proper sanitization. Even though filter_var is used with FILTER_SANITIZE_SPECIAL_CHARS, it is insufficient to prevent command injection because it doesn't escape all characters that are special to the shell. An attacker could manipulate the contents of /tmp/tainted.txt to inject arbitrary commands into the system call.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-22</Weakness>
    <Description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$process = proc_open('more /tmp/tainted.txt', $descriptorspec, $pipes, $cwd, NULL);
if (is_resource($process)) {
  fclose($pipes[0]);
  $tainted = stream_get_contents($pipes[1]);
  fclose($pipes[1]);
  $return_value = proc_close($process);
}</Code>
    <Justification>The code reads the content of the file ""/tmp/tainted.txt"". If the application intends to restrict file access within a specific directory, reading a file with a hardcoded absolute path bypasses any path traversal protection mechanisms. An attacker with the ability to modify this file could inject path traversal sequences (e.g., ""../"") to read files outside the intended directory.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__backticks__func_preg_replace__name-sprintf_%s_simple_quote.php,"<?php







$tainted = `cat /tmp/tainted.txt`;

$tainted = preg_replace('/\'/', '', $tainted);

$query = sprintf(""name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = preg_replace('/\'/', '', $tainted);

$query = sprintf(""name='%s'"", $tainted);

$sr=ldap_search($ds,""o=My Company, c=US"", $query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code uses backticks to execute an external command (cat). If an attacker can control the contents of /tmp/tainted.txt, they can inject arbitrary commands into the system.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = preg_replace('/\'/', '', $tainted);

$query = sprintf(""name='%s'"", $tainted);

$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code attempts to sanitize the input by removing single quotes, but this is insufficient to prevent LDAP injection. An attacker could still inject arbitrary LDAP code, as other special characters are not neutralized. The sprintf function is also vulnerable, as it directly incorporates the tainted input into the query.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__popen__no_sanitizing__userByMail-interpretation_simple_quote.php,"<?php







$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);



$query = ""(&(objectCategory=person)(objectClass=user)(mail=' $tainted '))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$query = ""(&(objectCategory=person)(objectClass=user)(mail=' $tainted '))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The code uses popen to execute a command. The command is hardcoded, but the file path /tmp/tainted.txt is potentially writeable by an attacker. An attacker could inject shell commands into the file, leading to command injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""(&(objectCategory=person)(objectClass=user)(mail=' $tainted '))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query by directly embedding the $tainted variable, which originates from a file, into the query string without proper sanitization. An attacker could manipulate the contents of /tmp/tainted.txt to inject malicious LDAP syntax, potentially bypassing authentication or retrieving sensitive information.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__object-indexArray__func_preg_match-no_filtering__username-concatenation_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input['realOne'];
  }

  public  function __construct(){
    $this->input = array();
    $this->input['test']= 'safe' ;
    $this->input['realOne']= $_GET['UserData'] ;
    $this->input['trap']= 'safe' ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = ""user[username='"". $tainted . ""']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-643</Weakness>
    <Description>Improper Neutralization of Data within XPath Expressions ('XPath Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""user[username='"". $tainted . ""']"";</Code>
    <Justification>The code constructs an XPath query by directly embedding user-controlled input ($tainted) without proper sanitization. This allows an attacker to inject malicious XPath expressions, potentially leading to unauthorized data access or modification within the XML database.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__GET__func_FILTER-CLEANING-magic_quotes_filter__name-concatenation_simple_quote.php,"<?php







$tainted = $_GET['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      

$query = ""name='"". $tainted . ""'"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,False,"$query = ""name='"". $tainted . ""'"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""name='"". $tainted . ""'"";</Code>
    <Justification>The code directly concatenates unsanitized user input into an LDAP query, making it vulnerable to LDAP injection attacks. Although magic quotes are used, they are insufficient to prevent all types of LDAP injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-424</Weakness>
    <Description>Improper Protection of Alternate Path</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = $_GET['UserData'];</Code>
    <Justification>The code is directly using $_GET['UserData'] without sufficient validation which can lead to security vulnerabilities if this data is used to access restricted functionality or resources.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__shell_exec__func_htmlspecialchars__not_name-interpretation_simple_quote.php,"<?php







$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""!name=' $tainted '"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""!name=' $tainted '"";


$ds=ldap_connect(""localhost"");","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""!name=' $tainted '"";


$ds=ldap_connect(""localhost"");</Code>
    <Justification>The code constructs an LDAP query using externally-influenced input ($tainted) without proper neutralization. Although htmlspecialchars is used, it's insufficient to prevent LDAP injection because LDAP has different special characters. An attacker could manipulate the $tainted variable (e.g., by inserting LDAP control characters) to modify the query's meaning and potentially gain unauthorized access to information.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');</Code>
    <Justification>The code uses shell_exec to execute a shell command 'cat /tmp/tainted.txt'. If the contents of /tmp/tainted.txt are controlled by an attacker, they could inject arbitrary shell commands, leading to OS command injection. Even if the file is not directly writable, other vulnerabilities could allow an attacker to modify its contents.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind, and ldap_search. If any of these functions fail (e.g., due to network issues, invalid credentials, or an invalid query), the subsequent code may operate on an invalid resource, leading to unpredictable behavior or errors. The return value of ldap_close is also not checked, which could lead to resource leaks if the close operation fails.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind, and ldap_search. A failure in ldap_connect or ldap_bind could indicate a problem with the LDAP server or authentication, and failing to check these return values could lead to the execution of the search with an unauthenticated connection or against the wrong server, potentially exposing data or allowing unauthorized actions. Additionally, the return value of ldap_close is not checked, which could lead to resource leaks if the close operation fails, contributing to a denial-of-service condition over time.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__array-GET__func_http_build_query__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : get the $_GET['userData'] in an array
SANITIZE : use of http_build_query
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;

$tainted = http_build_query($tainted);


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>&lt;?php
$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;

$tainted = http_build_query($tainted);


echo ""window.setInterval('"". $tainted .""');"" ;
?&gt;</Code>
    <Justification>The code is vulnerable to command injection. Even though http_build_query is used, it's not sufficient to sanitize the input for use within javascript's setInterval function. An attacker can inject arbitrary javascript code into the setInterval function by manipulating the userData GET parameter. The injected code will be executed periodically by the browser.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__POST__func_htmlspecialchars__userByCN-concatenation_simple_quote.php,"<?php







$tainted = $_POST['UserData'];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $_POST['UserData'];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_POST['UserData'];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";</Code>
    <Justification>The code constructs an LDAP query by directly embedding user-provided data ($tainted) into the query string. Although htmlspecialchars is used, it is not sufficient to prevent LDAP injection attacks. Special characters used in LDAP queries (e.g., '*', '(', ')') can be used to alter the meaning of the query and potentially retrieve sensitive information or perform unauthorized actions.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__GET__func_FILTER-CLEANING-email_filter__join-sprintf_%s_simple_quote.php,"<?php







$tainted = $_GET['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = sprintf(""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag='%s'"", $tainted);


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = sprintf(""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag='%s'"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag='%s'"", $tainted);</Code>
    <Justification>The code uses sprintf to construct an SQL query with unsanitized user input ($tainted). Although email validation is used, it is not sufficient to prevent SQL injection because an attacker can craft an email that bypasses validation and injects SQL code. This allows an attacker to modify the query and potentially access or modify sensitive data.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;</Code>
    <Justification>The code uses the mysql_connect and mysql_select_db functions, which are deprecated. Using deprecated functions poses a security risk because they may contain known vulnerabilities that are no longer patched. It also indicates that the code is not actively maintained.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;</Code>
    <Justification>The code does not check the return values of `mysql_connect` and `mysql_select_db`. If these functions fail, they will return `false`, and the subsequent code will attempt to use a `false` value as a database connection, leading to errors or unexpected behavior. The return value of `mysql_query` is also not checked, which can hide database errors.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The code uses hard-coded credentials ('mysql_user', 'mysql_password') to connect to the database. This is a critical security vulnerability because if the code is compromised, the database credentials will be exposed, allowing an attacker to access and potentially modify the database.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__unserialize__func_addslashes__Use_untrusted_data_script-window_SetInterval.php,"<!-- 
Unsafe sample
input : Get a serialize string in POST and unserialize it
sanitize : use of the function addslashes
File : unsafe, use of untrusted data in the function setInterval
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$tainted = addslashes($tainted);


echo ""window.setInterval('"". $tainted .""');"" ;
?>
 </script>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""window.setInterval('"". $tainted .""');"" ;",True,True,"echo ""window.setInterval('"". $tainted .""');""","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>echo ""window.setInterval('"". $tainted .""');""</Code>
    <Justification>The code uses user-provided data ($tainted) within the setInterval function without proper sanitization. Although addslashes is used, it is insufficient to prevent XSS vulnerabilities. An attacker can inject malicious JavaScript code, leading to Cross-Site Scripting (XSS).</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code directly uses the unserialize function on user-provided data from $_POST['UserData']. This is a critical security vulnerability because unserialize can be exploited to achieve arbitrary code execution. An attacker can craft a malicious serialized string to instantiate arbitrary objects and execute code on the server.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__array-GET__func_htmlentities__Unsafe_use_untrusted_data-style.php,"<!-- 
Unsafe sample
input : get the $_GET['userData'] in an array
sanitize : use of the function htmlentities. Sanitizes the query but has a high chance to produce unexpected results
File : unsafe, use of untrusted data in CSS
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;

$tainted = htmlentities($tainted, ENT_QUOTES);


echo $tainted ;
?>
</style>
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;

$tainted = htmlentities($tainted, ENT_QUOTES);


echo $tainted ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;

$tainted = htmlentities($tainted, ENT_QUOTES);


echo $tainted ;</Code>
    <Justification>The code retrieves user input from $_GET['userData'] and, although it uses htmlentities, it still echoes this data directly into the CSS style block. While htmlentities can prevent direct HTML injection, it doesn't protect against CSS injection. An attacker could craft a string that, when rendered in CSS, can modify the page's appearance or even leak sensitive information.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__backticks__func_FILTER-CLEANING-special_chars_filter__username_text-sprintf_%s_simple_quote.php,"<?php







$tainted = `cat /tmp/tainted.txt`;

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      

$query = sprintf(""


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",True,False,"$query = sprintf(""","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code uses backticks to execute an external command (`cat /tmp/tainted.txt`). This is equivalent to `shell_exec()` and allows command injection if the content of `/tmp/tainted.txt` is attacker-controlled.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-91</Weakness>
    <Description>XML Injection (aka Blind XPath Injection)</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""
</Code>
    <Justification>The code uses user-controlled data `$tainted` to construct an XPath query without proper sanitization. This can lead to XPath injection, allowing an attacker to extract sensitive information or manipulate the XML data.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$xml = simplexml_load_file(""users.xml"");</Code>
    <Justification>The code loads XML from a file without validating the XML structure and the data within. If the ""users.xml"" file is attacker-controlled, it could lead to XML External Entity (XXE) injection or other deserialization vulnerabilities.</Justification>
  </Issue>
</Issues>
```"
CWE-78,src/CWE_78__shell_exec__func_FILTER-CLEANING-full_special_chars_filter__ls-concatenation_simple_quote.php,"<?php







$tainted = shell_exec('cat /tmp/tainted.txt');

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     

$query = ""ls '"". $tainted . ""'"";


$ret = system($query);


?>",$ret = system($query);,True,True,"$tainted = shell_exec('cat /tmp/tainted.txt');

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     
...","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = shell_exec('cat /tmp/tainted.txt');

$sanitized = filter_var($tainted, FILTER_SANITIZE_FULL_SPECIAL_CHARS);
  $tainted = $sanitized ;
     
...</Code>
    <Justification>The code is vulnerable to OS command injection. Although the code attempts to sanitize the input using `filter_var` with `FILTER_SANITIZE_FULL_SPECIAL_CHARS`, this filter is not sufficient to prevent all forms of command injection. Specifically, it does not escape single quotes, which are used to delimit the tainted input in the `ls` command. An attacker could inject arbitrary commands by including a single quote to terminate the string, followed by their command, and then another single quote to comment out the rest of the original command.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__SESSION__func_pg_escape_string__userByMail-concatenation_simple_quote.php,"<?php







$tainted = $_SESSION['UserData'];

$tainted = pg_escape_string($tainted);

$query = ""(&(objectCategory=person)(objectClass=user)(mail='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $_SESSION['UserData'];

$tainted = pg_escape_string($tainted);

$query = ""(&(objectCategory=person)(objectClass=user)(mail='"". $tainted . ""'))"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_SESSION['UserData'];

$tainted = pg_escape_string($tainted);

$query = ""(&(objectCategory=person)(objectClass=user)(mail='"". $tainted . ""'))"";</Code>
    <Justification>The code constructs an LDAP query by embedding user-provided data ($tainted) directly into the query string. Although pg_escape_string is used, it escapes strings for PostgreSQL, not for LDAP. This can lead to LDAP injection vulnerabilities, where an attacker can manipulate the query to bypass authentication or retrieve sensitive information.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-424</Weakness>
    <Description>Improper Protection of Alternate Path</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = $_SESSION['UserData'];

$tainted = pg_escape_string($tainted);

$query = ""(&(objectCategory=person)(objectClass=user)(mail='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code retrieves user data from $_SESSION['UserData'] without proper validation before using it in an LDAP query. An attacker could potentially manipulate this session variable to access restricted resources or functionality if the LDAP query is used for authorization purposes.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__object-directGet__no_sanitizing__join-interpretation_simple_quote.php,"<?php







class Input{
  public function getInput(){
    return $_GET['UserData'] ;
  }
}

$temp = new Input();
$tainted =  $temp->getInput();



$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,True,"$tainted =  $temp->getInput();



$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted =  $temp-&gt;getInput();



$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";</Code>
    <Justification>The variable $tainted, which takes its value from user-supplied GET data, is incorporated into an SQL query without any sanitization, which creates a SQL injection vulnerability.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;</Code>
    <Justification>The mysql_connect and mysql_select_db functions are deprecated. It is recommended to use MySQLi or PDO instead for security and future compatibility reasons.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__array-GET__func_FILTER-CLEANING-email_filter__Use_untrusted_data_attribute-simple_Quote_Attr.php,"<!-- 
Unsafe sample
input : get the $_GET['userData'] in an array
Uses an email_filter via filter_var function
File : use of untrusted data in a simple quote attribute
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo ""<div id='"".  $tainted .""'>content</div>"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<div id='"".  $tainted .""'>content</div>"" ;",True,True,"echo ""<div id='"".  $tainted .""'>content</div>"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;div id='"".  $tainted .""'>content&lt;/div>"" ;</Code>
    <Justification>The code echoes user-controlled input ($tainted) into an HTML attribute (id). While the input is sanitized using FILTER_SANITIZE_EMAIL and validated using FILTER_VALIDATE_EMAIL, this is insufficient to prevent XSS.  The FILTER_SANITIZE_EMAIL filter does not protect against all characters that could be used to break out of the attribute context and inject malicious code. An attacker could still inject characters that, while valid in an email address, are not safe in an HTML attribute, potentially leading to XSS.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__exec__whitelist_using_array__Unsafe_use_untrusted_data-script.php,"<!-- 
Unsafe sample
input : use exec to execute the script /tmp/tainted.php and store the output in $tainted
SANITIZE : use in_array to check if $tainted is in the white list
File : unsafe, use of untrusted data in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];

$legal_table = array(""safe1"", ""safe2"");
if (in_array($tainted, $legal_table, true)) {
  $tainted = $tainted;
} else {
  $tainted = $legal_table[0];
}


echo $tainted ;
?>
</script>
</head>
<body onload=""xss()"">
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"if (in_array($tainted, $legal_table, true)) {
  $tainted = $tainted;
} else {
  $tainted = $legal_table[0];
}


echo $tainted ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];</Code>
    <Justification>The code uses `exec()` to execute an external script. While the script path itself is hardcoded, the output of this script is then used later in the page. If the executed script is compromised, it could inject arbitrary commands or code into the application.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if (in_array($tainted, $legal_table, true)) {
  $tainted = $tainted;
} else {
  $tainted = $legal_table[0];
}


echo $tainted ;</Code>
    <Justification>The code echoes the `$tainted` variable directly into the HTML, inside a javascript block, which is vulnerable to XSS. While there is an attempt to sanitize the input using `in_array`, if the script `/tmp/tainted.php` outputs a string containing javascript code, it will be executed in the browser of the user visiting the page.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__array-GET__func_urlencode__Use_untrusted_data_attribute-unquoted_Attr.php,"<!-- 
Unsafe sample
input : get the $_GET['userData'] in an array
SANITIZE : use of urlencode
File : use of untrusted data in a unquoted attribute
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;

$tainted = urlencode($tainted);


echo ""<div id="". $tainted ."">content</div>"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<div id="". $tainted ."">content</div>"" ;",True,True,"echo ""<div id="". $tainted ."">content</div>"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""&lt;div id="". $tainted ."">content&lt;/div>"" ;</Code>
    <Justification>The code outputs user-controlled data ($tainted) into an HTML attribute without proper escaping. Although urlencode is used, it does not prevent XSS because it only encodes characters for use in URLs, not HTML attributes. This allows an attacker to inject arbitrary HTML or JavaScript code into the attribute, leading to XSS vulnerabilities.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__backticks__func_FILTER-CLEANING-special_chars_filter__Use_untrusted_data_propertyValue_CSS-quoted_Property_Value.php,"<!-- 
Unsafe sample
input : backticks interpretation, reading the file /tmp/tainted.txt
Uses a special_chars_filter via filter_var function
File : unsafe, use of untrusted data in a quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = `cat /tmp/tainted.txt`;

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      


echo ""body { color :\'"". $tainted .""\' ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\'"". $tainted .""\' ; }"" ;",True,True,"echo ""body { color :\'"". $tainted .""\' ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code uses backticks to execute a system command (cat /tmp/tainted.txt) to read data from a file. If an attacker can control the content of '/tmp/tainted.txt', they can inject arbitrary commands, leading to command injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\'"". $tainted .""\' ; }"" ;</Code>
    <Justification>The code echoes user-controlled input ($tainted) directly into the CSS style. While `filter_var` with `FILTER_SANITIZE_SPECIAL_CHARS` is used, it might not be sufficient to prevent all forms of CSS injection. An attacker might be able to inject malicious CSS code, potentially leading to information disclosure or other attacks.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-22</Weakness>
    <Description>Improper Limitation of a Pathname to a Restricted Directory ('Path Traversal')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code reads data from the file `/tmp/tainted.txt` via a shell command. An attacker might be able to manipulate the file name to perform path traversal by using symbolic links or other methods to access unauthorized files.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__popen__func_FILTER-VALIDATION-email_filter__select_from-concatenation_simple_quote.php,"<?php







$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""SELECT * FROM '"". $tainted . ""'"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = ""SELECT * FROM '"". $tainted . ""'"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$query = ""SELECT * FROM '"". $tainted . ""'"";</Code>
    <Justification>The code constructs an SQL query by directly embedding the `$tainted` variable, which is read from a file, into the query string. This allows for SQL injection if the file content contains malicious SQL code.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The code uses `popen` to execute the `/bin/cat /tmp/tainted.txt` command. While the command itself is static, the content of `/tmp/tainted.txt` is treated as untrusted input. If an attacker can control the content of this file, they can inject shell commands.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The code does not check the return value of `mysql_connect`. If the connection fails, `$conn` will be false, leading to potential errors later in the script.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>mysql_select_db('dbname') ;</Code>
    <Justification>The code does not check the return value of `mysql_select_db`. If the database selection fails, subsequent queries will fail, potentially leading to errors later in the script.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$res = mysql_query($query);</Code>
    <Justification>The code does not check the return value of `mysql_query`. If the query fails, `$res` will be false, leading to potential errors later in the script.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-478</Weakness>
    <Description>Missing Default Case in Switch Statement</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>Although this is an if-else statement, it serves the purpose of validating `$sanitized` and assigning it to `$tainted` accordingly. If the validation fails, `$tainted` is assigned an empty string. There are no other explicit cases. The CWE-478 is more applicable to switch statements, but it can be argued that this if-else construct could benefit from more explicit handling of other potential validation results (though unlikely in this specific case).</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""&lt;br /&gt;"" ;
} 
mysql_close($conn);</Code>
    <Justification>The code uses the `mysql_*` functions, which are deprecated and insecure. They are vulnerable to SQL injection and other security risks.</Justification>
  </Issue>
</Issues>
```"
CWE-78,src/CWE_78__popen__func_FILTER-CLEANING-special_chars_filter__cat-interpretation_simple_quote.php,"<?php







$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

$sanitized = filter_var($tainted, FILTER_SANITIZE_SPECIAL_CHARS);
  $tainted = $sanitized ;
      

$query = ""cat ' $tainted '"";


$ret = system($query);


?>",$ret = system($query);,True,True,"$query = ""cat ' $tainted '"";


$ret = system($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""cat ' $tainted '"";


$ret = system($query);</Code>
    <Justification>The code constructs a shell command using user-controlled input (`$tainted`) without proper neutralization. This allows an attacker to inject arbitrary commands into the system.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__POST__func_preg_match-no_filtering__name-sprintf_%s_simple_quote.php,"<?php







$tainted = $_POST['UserData'];

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = sprintf(""name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $_POST['UserData'];

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = sprintf(""name='%s'"", $tainted);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_POST['UserData'];

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = sprintf(""name='%s'"", $tainted);</Code>
    <Justification>The code constructs an LDAP query using user-provided data without proper sanitization. This can lead to LDAP injection vulnerabilities where an attacker can manipulate the query to bypass security controls or access unauthorized data. Although there is a regular expression, it is too permissive and does not prevent LDAP injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost"");</Code>
    <Justification>The code uses a hard-coded hostname ""localhost"" for the LDAP server connection. While not directly a credential, it tightly couples the application to a specific environment and exposes information about the system's architecture. While 'localhost' itself is not sensitive, the lack of configuration makes it difficult to adapt to different environments and could be considered a form of hard-coded configuration data.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__GET__func_htmlspecialchars__userByMail-concatenation_simple_quote.php,"<?php







$tainted = $_GET['UserData'];

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = ""(&(objectCategory=person)(objectClass=user)(mail='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $_GET['UserData'];\n\n$tainted = htmlspecialchars($tainted, ENT_QUOTES);\n\n$query = ""(&(objectCategory=person)(objectClass=user)(mail='"". $tainted . ""'))"";\n\n\n$ds=ldap_connect(""localhost""); \n$r=ldap_bind($ds);\n$sr=ldap_search($ds,""o=My Company, c=US"", $query);  \nldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_GET['UserData'];\n\n$tainted = htmlspecialchars($tainted, ENT_QUOTES);\n\n$query = ""(&(objectCategory=person)(objectClass=user)(mail='"". $tainted . ""'))"";\n\n\n$ds=ldap_connect(""localhost""); \n$r=ldap_bind($ds);\n$sr=ldap_search($ds,""o=My Company, c=US"", $query);  \nldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query by directly embedding user-supplied data ($tainted) without proper sanitization. Although htmlspecialchars is used, it's not sufficient to prevent LDAP injection.  An attacker could manipulate the input to alter the LDAP query's logic, potentially bypassing authentication or gaining unauthorized access to sensitive information.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__fopen__func_FILTER-VALIDATION-email_filter__select_from-concatenation_simple_quote.php,"<?php







$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""SELECT * FROM '"". $tainted . ""'"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = ""SELECT * FROM '"". $tainted . ""'"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$query = ""SELECT * FROM '"". $tainted . ""'"";</Code>
    <Justification>The code directly embeds user-controlled data ($tainted) into an SQL query without proper sanitization, which makes it vulnerable to SQL injection attacks. An attacker could manipulate the $tainted variable to inject arbitrary SQL code, potentially compromising the database.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The code does not check the return value of `mysql_connect`. If the connection fails, $conn will be false, and subsequent operations will result in errors. It is important to check for connection errors.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$res = mysql_query($query);</Code>
    <Justification>The code does not check the return value of `mysql_query`. If the query fails, $res will be false, and the code will continue execution, which leads to errors. It is important to check for query errors.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The code does not check the return value of `mysql_connect`. If the connection fails, $conn will be false, and subsequent operations will result in errors. It is important to check for connection errors to ensure the application's reliability.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$res = mysql_query($query);</Code>
    <Justification>The code does not check the return value of `mysql_query`. If the query fails, $res will be false, and the code will continue execution, which leads to errors. It is important to check for query errors to ensure the application's reliability.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The `mysql_connect` function is deprecated. Using deprecated functions impacts maintainability as they are no longer supported and may be removed in future versions of PHP.  It's recommended to use `mysqli_connect` or `PDO` instead.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$res = mysql_query($query);</Code>
    <Justification>The `mysql_query` function is deprecated. Using deprecated functions impacts maintainability as they are no longer supported and may be removed in future versions of PHP. It's recommended to use `mysqli_query` or `PDO` instead.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>mysql_select_db('dbname') ;</Code>
    <Justification>The `mysql_select_db` function is deprecated. Using deprecated functions impacts maintainability as they are no longer supported and may be removed in future versions of PHP. It's recommended to use `mysqli_select_db` or `PDO` instead.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""&lt;br /&gt;"" ;
} </Code>
    <Justification>The `mysql_fetch_array` function is deprecated. Using deprecated functions impacts maintainability as they are no longer supported and may be removed in future versions of PHP. It's recommended to use `mysqli_fetch_array` or `PDO` instead.</Justification>
  </Issue>
  <Issue>
    <Type>Maintainability</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>mysql_close($conn);</Code>
    <Justification>The `mysql_close` function is deprecated. Using deprecated functions impacts maintainability as they are no longer supported and may be removed in future versions of PHP. It's recommended to use `mysqli_close` or `PDO` instead.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The code uses hard-coded credentials ('mysql_user', 'mysql_password') for database connection. This is a security risk as the credentials can be easily exposed if the code is compromised.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-703</Weakness>
    <Description>Improper Check or Handling of Exceptional Conditions</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;</Code>
    <Justification>The code attempts to sanitize input using `filter_var` with `FILTER_VALIDATE_EMAIL`. However, even if the input is a valid email, it's still directly concatenated into the SQL query. This doesn't prevent SQL injection because a valid email can still contain malicious characters or code that can be interpreted by the database. The code is not properly handling the potential for SQL injection even when validating an email.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__fopen__func_htmlspecialchars__Use_untrusted_data_propertyValue_CSS-span_Style_Property_Value.php,"<!-- 
Unsafe sample
input : use fopen to read /tmp/tainted.txt and put the first line in $tainted
sanitize : use of the function htmlspecialchars. Sanitizes the query but has a high chance to produce unexpected results
File : unsafe, use of untrusted data in a property value in a span tag(CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$tainted = htmlspecialchars($tainted, ENT_QUOTES);


echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;",True,True,"$tainted = htmlspecialchars($tainted, ENT_QUOTES);


echo ""<span style=\""color :"". checked_data .""\"">Hey</span>"" ;
?>
<h1>Hello World!</h1>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>
$tainted = htmlspecialchars($tainted, ENT_QUOTES);


echo ""&lt;span style=\""color :"". checked_data .""\""&gt;Hey&lt;/span&gt;"" ;
?>
&lt;h1&gt;Hello World!&lt;/h1&gt;</Code>
    <Justification>The code uses htmlspecialchars to sanitize the input. However, the sanitized input is then used in a CSS property value within a span tag. While htmlspecialchars encodes HTML entities, it doesn't prevent CSS injection. This can be exploited to inject arbitrary CSS code, potentially leading to information disclosure or other malicious activities.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-457</Weakness>
    <Description>Use of uninitialized variable</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>
$tainted = htmlspecialchars($tainted, ENT_QUOTES);


echo ""&lt;span style=\""color :"". checked_data .""\""&gt;Hey&lt;/span&gt;"" ;</Code>
    <Justification>The variable 'checked_data' is used without being initialized. This can lead to unpredictable behavior and potentially expose sensitive information.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__POST__func_FILTER-CLEANING-email_filter__Unsafe_use_untrusted_data-script.php,"<!-- 
Unsafe sample
input : get the field UserData from the variable $_POST
Uses an email_filter via filter_var function
File : unsafe, use of untrusted data in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$tainted = $_POST['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo $tainted ;
?>
</script>
</head>
<body onload=""xss()"">
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"<![CDATA[<?php
$tainted = $_POST['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo $tainted ;
?>]]>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code><![CDATA[<?php
$tainted = $_POST['UserData'];

$sanitized = filter_var($tainted, FILTER_SANITIZE_EMAIL);
if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;


echo $tainted ;
?>]]></Code>
    <Justification>The code retrieves user input from $_POST['UserData'], attempts to sanitize it using FILTER_SANITIZE_EMAIL and validate it using FILTER_VALIDATE_EMAIL. However, even if the input is considered a valid email, it is directly echoed into a &lt;script&gt; tag. This makes it vulnerable to XSS because even a valid email could contain characters that, when interpreted in JavaScript, could lead to arbitrary code execution (e.g., by escaping the string and injecting malicious JavaScript).  There's no proper output encoding to prevent the injected email from being interpreted as code.</Justification>
  </Issue>
</Issues>
```"
CWE-78,src/CWE_78__exec__func_FILTER-VALIDATION-email_filter__ls-interpretation_simple_quote.php,"<?php







$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];

if (filter_var($sanitized, FILTER_VALIDATE_EMAIL))
  $tainted = $sanitized ;
else
  $tainted = """" ;

$query = ""ls ' $tainted '"";


$ret = system($query);


?>",$ret = system($query);,True,True,"$query = ""ls ' $tainted '"";


$ret = system($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""ls ' $tainted '"";


$ret = system($query);</Code>
    <Justification>The code uses the `system()` function to execute a command constructed with user-controlled input (`$tainted`). Even though there is an attempt to sanitize the input with filter_var, if it fails it will assign an empty string. However, this does not prevent command injection as arbitrary commands can still be executed. The single quotes around `$tainted` do not provide sufficient protection against command injection.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];</Code>
    <Justification>The code executes an external script and uses its output without proper sanitization. The external script `/tmp/tainted.php` is a potential source of tainted data. The exec function is used to run the external script. The result[0] from exec is used as tainted input.  This is highly vulnerable to command injection.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>exec($script, $result, $return);</Code>
    <Justification>The code does not check the return value `$return` of the `exec()` function. A non-zero return value indicates an error during the execution of the command. Ignoring this return value may lead to undetected errors and unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$ret = system($query);</Code>
    <Justification>The code does not check the return value `$ret` of the `system()` function. A non-zero return value indicates an error during the execution of the command. Ignoring this return value may lead to undetected errors and unexpected behavior.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$ret = system($query);</Code>
    <Justification>The `system()` function is generally discouraged due to its security risks and lack of control over the execution environment. It's recommended to use `proc_open()` or `exec()` with proper sanitization and error handling as alternatives.</Justification>
  </Issue>
</Issues>
```"
CWE-91,src/CWE_91__unserialize__func_preg_match-no_filtering__username-concatenation_simple_quote.php,"<?php







$string = $_POST['UserData'] ;
$tainted = unserialize($string);
    

$re = ""/^.*$/"";
if(preg_match($re, $tainted) == 1){
  $tainted = $tainted;
}
else{
  $tainted = """";
}

$query = ""user[username='"". $tainted . ""']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""<br /><br />"" ;

$res=$xml->xpath($query);
print_r($res);
echo ""<br />"" ;

?>","$xml = simplexml_load_file(""users.xml"");",False,False,,"```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-502</Weakness>
    <Description>Deserialization of Untrusted Data</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$string = $_POST['UserData'] ;
$tainted = unserialize($string);</Code>
    <Justification>The code uses unserialize() on user-controlled data ($_POST['UserData']), which can lead to arbitrary code execution. Deserialization of untrusted data allows attackers to inject malicious objects into the application, potentially leading to remote code execution or other security vulnerabilities.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-643</Weakness>
    <Description>Improper Neutralization of Data within XPath Expressions ('XPath Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""user[username='"". $tainted . ""']"";


$xml = simplexml_load_file(""users.xml"");
echo ""query : "". $query .""&lt;br /&gt;&lt;br /&gt;"" ;

$res=$xml->xpath($query);</Code>
    <Justification>The code constructs an XPath query using user-controlled data ($tainted) without proper sanitization. This allows attackers to inject malicious XPath expressions, potentially leading to information disclosure or modification of the XML data.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if(preg_match($re, $tainted) == 1){</Code>
    <Justification>The code uses preg_match without checking if it returns false which indicates an error, potentially leading to unexpected behavior if the regular expression fails to compile or execute correctly.</Justification>
  </Issue>
</Issues>
```"
CWE-89,src/CWE_89__backticks__no_sanitizing__join-interpretation_simple_quote.php,"<?php







$tainted = `cat /tmp/tainted.txt`;



$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";


$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); 
mysql_select_db('dbname') ;
echo ""query : "". $query .""<br /><br />"" ;

$res = mysql_query($query); 

while($data =mysql_fetch_array($res)){
print_r($data) ;
echo ""<br />"" ;
} 
mysql_close($conn);

?>","$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password'); ",True,False,"$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code uses backticks to execute an external command (`cat /tmp/tainted.txt`) without proper sanitization. This allows an attacker to inject arbitrary commands.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-89</Weakness>
    <Description>Improper Neutralization of Special Elements used in an SQL Command ('SQL Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""SELECT lastname, firstname FROM drivers, vehicles WHERE drivers.id = vehicles.ownerid AND vehicles.tag=' $tainted '"";</Code>
    <Justification>The code directly incorporates the `$tainted` variable into the SQL query without any sanitization or parameterization. This makes the application vulnerable to SQL injection attacks.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$conn = mysql_connect('localhost', 'mysql_user', 'mysql_password');</Code>
    <Justification>The code uses the `mysql_connect` function, which is deprecated. Using deprecated functions can lead to security vulnerabilities and compatibility issues in the future.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$res = mysql_query($query);</Code>
    <Justification>The code uses the `mysql_query` function, which is deprecated. Using deprecated functions can lead to security vulnerabilities and compatibility issues in the future.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>while($data =mysql_fetch_array($res)){</Code>
    <Justification>The code uses the `mysql_fetch_array` function, which is deprecated. Using deprecated functions can lead to security vulnerabilities and compatibility issues in the future.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-477</Weakness>
    <Description>Use of Obsolete Function</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>mysql_close($conn);</Code>
    <Justification>The code uses the `mysql_close` function, which is deprecated. Using deprecated functions can lead to security vulnerabilities and compatibility issues in the future.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__popen__func_rawurlencode__Unsafe_use_untrusted_data-script.php,"<!-- 
Unsafe sample
input : Uses popen to read the file /tmp/tainted.txt using cat command
SANITIZE : use of rawurlencode
File : unsafe, use of untrusted data in a script
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<script>
<?php
$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

$tainted = rawurlencode($tainted);


echo $tainted ;
?>
</script>
</head>
<body onload=""xss()"">
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"<script>
<?php
$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

$tainted = rawurlencode($tainted);


echo $tainted ;
?>
</script>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>&lt;script&gt;
&lt;?php
$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);

$tainted = rawurlencode($tainted);


echo $tainted ;
?&gt;
&lt;/script&gt;</Code>
    <Justification>The code reads data from a file, URL encodes it, and then prints it directly into a &lt;script&gt; tag. While URL encoding might prevent some direct HTML injection, it does not prevent all forms of XSS.  If the content of /tmp/tainted.txt contains javascript code, it will be executed in the browser. The rawurlencode is insufficient as a sanitization function here because it doesn't prevent the execution of arbitrary javascript code.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');</Code>
    <Justification>The code uses popen to execute the command `/bin/cat /tmp/tainted.txt`. If the filename `/tmp/tainted.txt` is derived from user input or an external source, it could be vulnerable to command injection. An attacker could potentially inject arbitrary commands by manipulating the filename.  While the provided code snippet doesn't show the source of the filename, the comment ""input : Uses popen to read the file /tmp/tainted.txt using cat command"" implies that this might be an entry point for external influence. Even though the file path is hardcoded, there is a possibility of an attacker gaining write access to the file and injecting malicious code.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$handle = popen('/bin/cat /tmp/tainted.txt', 'r');
$tainted = fread($handle, 4096);
pclose($handle);</Code>
    <Justification>The code does not check the return values of `popen`, `fread`, and `pclose`. If `popen` fails to open the file, `$handle` will be false, and `fread` will likely cause an error. If `fread` fails to read the entire file, `$tainted` might be incomplete. If `pclose` fails, the resource might not be released correctly. Checking the return values of these functions would allow the program to handle errors gracefully and prevent unexpected behavior. </Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__array-GET__func_htmlspecialchars__Unsafe_use_untrusted_data-comment.php,"<!-- 
Unsafe sample
input : get the $_GET['userData'] in an array
sanitize : use of the function htmlspecialchars. Sanitizes the query but has a high chance to produce unexpected results
File : unsafe, use of untrusted data in a comment
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<!--
<?php
$array = array();
$array[] = 'safe' ;
$array[] = $_GET['userData'] ;
$array[] = 'safe' ;
$tainted = $array[1] ;

$tainted = htmlspecialchars($tainted, ENT_QUOTES);


echo $tainted ;
?>
-->
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>",echo $tainted ;,True,True,"$array[] = $_GET['userData'] ;
$tainted = $array[1] ;

$tainted = htmlspecialchars($tainted, ENT_QUOTES);


echo $tainted ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$array[] = $_GET['userData'] ;
$tainted = $array[1] ;

$tainted = htmlspecialchars($tainted, ENT_QUOTES);


echo $tainted ;</Code>
    <Justification>The code retrieves user input from $_GET['userData'], sanitizes it using htmlspecialchars, and then outputs it. While htmlspecialchars attempts to neutralize HTML entities, it might not be sufficient to prevent all XSS attacks, especially if the output context requires more robust escaping or if the application relies on complex client-side rendering. The sanitized output is directly echoed into an HTML comment, which, while generally not directly executable, can still be manipulated to break out of the comment or cause other unexpected behavior, depending on the browser's parsing of the HTML.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__fopen__func_FILTER-CLEANING-magic_quotes_filter__userByCN-concatenation_simple_quote.php,"<?php







$handle = @fopen(""/tmp/tainted.txt"", ""r"");

if ($handle) {
  if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }
  fclose($handle);
} else {
  $tainted = """";
}

$sanitized = filter_var($tainted, FILTER_SANITIZE_MAGIC_QUOTES);
  $tainted = $sanitized ;
      

$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,False,"$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = ""(&(objectCategory=person)(objectClass=user)(cn='"". $tainted . ""'))"";</Code>
    <Justification>The code constructs an LDAP query by directly embedding the $tainted variable, which is read from a file, into the query string. Although the code uses filter_var with FILTER_SANITIZE_MAGIC_QUOTES, this is insufficient to prevent LDAP injection attacks. Magic quotes only escape single quotes, double quotes, backslashes, and null characters. An attacker could still inject arbitrary LDAP syntax to bypass authentication or extract sensitive information.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost"");</Code>
    <Justification>The code does not check the return value of ldap_connect. If the connection fails, $ds will be false, leading to errors later in the code when used in ldap_bind, ldap_search, and ldap_close.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$r=ldap_bind($ds);</Code>
    <Justification>The code does not check the return value of ldap_bind. If the bind operation fails, $r will be false, leading to errors later in the code when the code executes ldap_search and ldap_close with invalid $ds.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code does not check the return value of ldap_search. If the search operation fails, $sr will be false, leading to errors later in the code if the code attempts to process the search results without checking if $sr is valid.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-703</Weakness>
    <Description>Improper Check or Handling of Exceptional Conditions</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>if(($tainted = fgets($handle, 4096)) == false) {
    $tainted = """";
  }</Code>
    <Justification>The code checks if fgets returns false, indicating an error or end of file. However, it only assigns an empty string to $tainted. More robust error handling, such as logging the error or exiting the script, would improve reliability. The same applies to the else block where fopen fails.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-778</Weakness>
    <Description>Insufficient Logging</Description>
    <Severity>Low</Severity>
    <File>File 1</File>
    <Code>$handle = @fopen(""/tmp/tainted.txt"", ""r"");</Code>
    <Justification>If fopen fails, the code assigns an empty string to $tainted. However, it doesn't log this failure, which can make debugging and auditing more difficult.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__backticks__func_http_build_query__Use_untrusted_data_propertyValue_CSS-double_Quoted_Property_Value.php,"<!-- 
Unsafe sample
input : backticks interpretation, reading the file /tmp/tainted.txt
SANITIZE : use of http_build_query
File : use of untrusted data in a double quoted property value (CSS)
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head>
<style>
<?php
$tainted = `cat /tmp/tainted.txt`;

$tainted = http_build_query($tainted);


echo ""body { color :\"""". $tainted .""\"" ; }"" ;
?>
</style> 
</head>
<body>
<h1>Hello World!</h1>
</body>
</html>","echo ""body { color :\"""". $tainted .""\"" ; }"" ;",True,True,"echo ""body { color :\"""". $tainted .""\"" ; }"" ;","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-77</Weakness>
    <Description>Improper Neutralization of Special Elements used in a Command ('Command Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = `cat /tmp/tainted.txt`;</Code>
    <Justification>The code uses backticks to execute a shell command (`cat /tmp/tainted.txt`). This can be vulnerable to command injection if the filename `/tmp/tainted.txt` or its contents are influenced by an attacker.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>echo ""body { color :\"""". $tainted .""\"" ; }"" ;</Code>
    <Justification>The code echoes user-controlled data ($tainted) directly into the CSS style without proper sanitization. Even with `http_build_query` being used, the output is still vulnerable to CSS injection.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__GET__no_sanitizing__not_name-sprintf_%s_simple_quote.php,"<?php







$tainted = $_GET['UserData'];



$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$tainted = $_GET['UserData'];

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$tainted = $_GET['UserData'];

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code uses user-provided data directly within an LDAP query without proper sanitization, which can lead to LDAP injection vulnerabilities. An attacker could manipulate the query to bypass security measures or extract sensitive information.</Justification>
  </Issue>
</Issues>
```"
CWE-90,src/CWE_90__object-classicGet__func_htmlspecialchars__not_name-sprintf_%s_simple_quote.php,"<?php







class Input{
  private $input;

  public function getInput(){
    return $this->input;
  }

  public  function __construct(){
   $this->input = $_GET['UserData'] ;
  }
}
$temp = new Input();
$tainted =  $temp->getInput();

$tainted = htmlspecialchars($tainted, ENT_QUOTES);

$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);

?>","$ds=ldap_connect(""localhost"");",True,True,"$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-90</Weakness>
    <Description>Improper Neutralization of Special Elements used in an LDAP Query ('LDAP Injection')</Description>
    <Severity>High</Severity>
    <File>File 1</File>
    <Code>$query = sprintf(""!name='%s'"", $tainted);


$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>The code constructs an LDAP query using user-controlled input ($tainted) without proper sanitization. Although htmlspecialchars is used, it might not be sufficient to prevent LDAP injection, as LDAP has its own set of special characters that need to be escaped or neutralized. This vulnerability could allow an attacker to inject malicious LDAP code, potentially leading to unauthorized access or modification of data in the LDAP directory.</Justification>
  </Issue>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-798</Weakness>
    <Description>Use of Hard-coded Credentials</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);</Code>
    <Justification>The code uses ldap_bind without providing any credentials. This could mean that the LDAP server is configured to allow anonymous binds, which is a security risk. If the LDAP server requires authentication, then the code is likely failing to bind, which could lead to unexpected behavior. If the LDAP server requires authentication, hardcoding the credentials directly in the source code would be a security vulnerability (CWE-259 Use of Hard-coded Password or CWE-321 Use of Hard-coded Cryptographic Key).</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-252</Weakness>
    <Description>Unchecked Return Value</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);</Code>
    <Justification>The code does not check the return values of ldap_connect, ldap_bind and ldap_search. If any of these functions fail, the program will continue to execute, potentially leading to unexpected behavior or security vulnerabilities. For example, if ldap_connect fails, $ds will be false, and subsequent calls to ldap_bind and ldap_search will likely cause errors.</Justification>
  </Issue>
  <Issue>
    <Type>Reliability</Type>
    <Weakness>CWE-772</Weakness>
    <Description>Missing Release of Resource after Effective Lifetime</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>$ds=ldap_connect(""localhost""); 
$r=ldap_bind($ds);
$sr=ldap_search($ds,""o=My Company, c=US"", $query);  
ldap_close($ds);</Code>
    <Justification>Although ldap_close is called, there is no error handling to ensure ldap_close is *always* called. If ldap_search throws an exception or if any of the previous ldap_* functions fail, ldap_close will not be called, potentially leading to a resource leak.</Justification>
  </Issue>
</Issues>
```"
CWE-78,src/CWE_78__exec__no_sanitizing__find_size-sprintf_%s_simple_quote.php,"<?php







$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];



$query = sprintf(""find / size '%d'"", $tainted);


$ret = system($query);


?>",$ret = system($query);,True,True,"$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];



$query = sprintf(""find / size '%d'"", $tainted);


$ret = system($query);","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-78</Weakness>
    <Description>Improper Neutralization of Special Elements used in an OS Command ('OS Command Injection')</Description>
    <Severity>Critical</Severity>
    <File>File 1</File>
    <Code>$script = ""/tmp/tainted.php"";
exec($script, $result, $return);

$tainted = $result[0];



$query = sprintf(""find / size '%d'"", $tainted);


$ret = system($query);</Code>
    <Justification>The code executes an OS command constructed using untrusted data from $tainted. The exec function executes the script /tmp/tainted.php and stores the first line of the output in the $tainted variable. This variable is then used in a sprintf function to format a find command, which is then executed using the system function. If the content of /tmp/tainted.php is attacker-controlled, they can inject arbitrary OS commands, leading to command injection vulnerability.</Justification>
  </Issue>
</Issues>
```"
CWE-79,src/CWE_79__GET__func_preg_replace__Use_untrusted_data_attribute-unquoted_Attr.php,"<!-- 
Unsafe sample
input : reads the field UserData from the variable $_GET
SANITIZE : use of preg_replace
File : use of untrusted data in a unquoted attribute
-->

<!--Copyright 2015 Bertrand STIVALET 

Permission is hereby granted, without written agreement or royalty fee, to

use, copy, modify, and distribute this software and its documentation for

any purpose, provided that the above copyright notice and the following

three paragraphs appear in all copies of this software.


IN NO EVENT SHALL AUTHORS BE LIABLE TO ANY PARTY FOR DIRECT,

INDIRECT, SPECIAL, INCIDENTAL, OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE 

USE OF THIS SOFTWARE AND ITS DOCUMENTATION, EVEN IF AUTHORS HAVE

BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


AUTHORS SPECIFICALLY DISCLAIM ANY WARRANTIES INCLUDING, BUT NOT

LIMITED TO THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A

PARTICULAR PURPOSE, AND NON-INFRINGEMENT.


THE SOFTWARE IS PROVIDED ON AN ""AS-IS"" BASIS AND AUTHORS HAVE NO

OBLIGATION TO PROVIDE MAINTENANCE, SUPPORT, UPDATES, ENHANCEMENTS, OR

MODIFICATIONS.-->


<!DOCTYPE html>
<html>
<head/>
<body>
<?php
$tainted = $_GET['UserData'];

$tainted = preg_replace('/\'/', '', $tainted);


echo ""<div id="". $tainted ."">content</div>"" ;
?>
<h1>Hello World!</h1>
</body>
</html>","echo ""<div id="". $tainted ."">content</div>"" ;",True,True,"$tainted = $_GET['UserData'];

$tainted = preg_replace('/\'/', '', $tainted);


echo ""<div id="". $tainted ."">content</div>"" ;
?>
<h1>Hello World!</h1>","```xml
<Issues>
  <Issue>
    <Type>Security</Type>
    <Weakness>CWE-79</Weakness>
    <Description>Improper Neutralization of Input During Web Page Generation ('Cross-site Scripting')</Description>
    <Severity>Medium</Severity>
    <File>File 1</File>
    <Code>
$tainted = $_GET['UserData'];

$tainted = preg_replace('/\'/', '', $tainted);


echo ""&lt;div id="". $tainted ."">content&lt;/div>"" ;
?>
&lt;h1>Hello World!&lt;/h1></Code>
    <Justification>The code retrieves user input from $_GET['UserData'], attempts to sanitize it by removing single quotes using preg_replace, and then directly embeds it into an HTML attribute (id). While the single quote removal provides some protection, it is insufficient to prevent XSS attacks.  An attacker can inject arbitrary HTML or JavaScript code via other characters.  Since the id attribute is unquoted, an attacker can inject other attributes and event handlers.</Justification>
  </Issue>
</Issues>
```"
